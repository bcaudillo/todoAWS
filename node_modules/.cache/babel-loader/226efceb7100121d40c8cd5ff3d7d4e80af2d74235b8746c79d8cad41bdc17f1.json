{"ast":null,"code":"import { parse, print } from 'graphql';\nimport { catchError } from 'rxjs';\nimport { AmplifyUrl, getAmplifyUserAgent } from '@aws-amplify/core/internals/utils';\nimport { isCancelError } from '@aws-amplify/api-rest';\nimport { post, cancel, updateRequestToBeCancellable } from '@aws-amplify/api-rest/internals';\nimport { AWSAppSyncRealTimeProvider } from '../Providers/AWSAppSyncRealTimeProvider/index.mjs';\nimport { resolveConfig } from '../utils/resolveConfig.mjs';\nimport { resolveLibraryOptions } from '../utils/resolveLibraryOptions.mjs';\nimport { repackageUnauthorizedError } from '../utils/errors/repackageAuthError.mjs';\nimport { NO_AUTH_TOKEN_HEADER, NO_SIGNED_IN_USER, NO_VALID_AUTH_TOKEN, NO_VALID_CREDENTIALS, NO_API_KEY, NO_ENDPOINT } from '../utils/errors/constants.mjs';\nimport { GraphQLApiError } from '../utils/errors/GraphQLApiError.mjs';\nimport '../utils/errors/validation.mjs';\nimport { createGraphQLResultWithError } from '../utils/errors/createGraphQLResultWithError.mjs';\nimport { isGraphQLResponseWithErrors } from './utils/runtimeTypeGuards/isGraphQLResponseWithErrors.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst USER_AGENT_HEADER = 'x-amz-user-agent';\nconst isAmplifyInstance = amplify => {\n  return typeof amplify !== 'function';\n};\n/**\n * Export Cloud Logic APIs\n */\nclass InternalGraphQLAPIClass {\n  constructor() {\n    /**\n     * @private\n     */\n    this.appSyncRealTime = new AWSAppSyncRealTimeProvider();\n    this._api = {\n      post,\n      cancelREST: cancel,\n      isCancelErrorREST: isCancelError,\n      updateRequestToBeCancellable\n    };\n  }\n  getModuleName() {\n    return 'InternalGraphQLAPI';\n  }\n  async _headerBasedAuth(amplify, authMode) {\n    let additionalHeaders = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const {\n      apiKey\n    } = resolveConfig(amplify);\n    let headers = {};\n    switch (authMode) {\n      case 'apiKey':\n        if (!apiKey) {\n          throw new GraphQLApiError(NO_API_KEY);\n        }\n        headers = {\n          'X-Api-Key': apiKey\n        };\n        break;\n      case 'iam':\n        {\n          const session = await amplify.Auth.fetchAuthSession();\n          if (session.credentials === undefined) {\n            throw new GraphQLApiError(NO_VALID_CREDENTIALS);\n          }\n          break;\n        }\n      case 'oidc':\n      case 'userPool':\n        {\n          let token;\n          try {\n            var _await$amplify$Auth$f;\n            token = (_await$amplify$Auth$f = (await amplify.Auth.fetchAuthSession()).tokens) === null || _await$amplify$Auth$f === void 0 ? void 0 : _await$amplify$Auth$f.accessToken.toString();\n          } catch (e) {\n            // fetchAuthSession failed\n            throw new GraphQLApiError({\n              ...NO_SIGNED_IN_USER,\n              underlyingError: e\n            });\n          }\n          // `fetchAuthSession()` succeeded but didn't return `tokens`.\n          // This may happen when unauthenticated access is enabled and there is\n          // no user signed in.\n          if (!token) {\n            throw new GraphQLApiError(NO_VALID_AUTH_TOKEN);\n          }\n          headers = {\n            Authorization: token\n          };\n          break;\n        }\n      case 'lambda':\n        if (typeof additionalHeaders === 'object' && !additionalHeaders.Authorization) {\n          throw new GraphQLApiError(NO_AUTH_TOKEN_HEADER);\n        }\n        headers = {\n          Authorization: additionalHeaders.Authorization\n        };\n        break;\n    }\n    return headers;\n  }\n  /**\n   * to get the operation type\n   * @param operation\n   */\n  getGraphqlOperationType(operation) {\n    const doc = parse(operation);\n    const definitions = doc.definitions;\n    const [{\n      operation: operationType\n    }] = definitions;\n    return operationType;\n  }\n  /**\n   * Executes a GraphQL operation\n   *\n   * @param options - GraphQL Options\n   * @param [additionalHeaders] - headers to merge in after any `libraryConfigHeaders` set in the config\n   * @returns An Observable if the query is a subscription query, else a promise of the graphql result.\n   */\n  graphql(amplify, _ref, additionalHeaders, customUserAgentDetails) {\n    let {\n      query: paramQuery,\n      variables = {},\n      authMode,\n      authToken\n    } = _ref;\n    const query = typeof paramQuery === 'string' ? parse(paramQuery) : parse(print(paramQuery));\n    const [operationDef = {}] = query.definitions.filter(def => def.kind === 'OperationDefinition');\n    const {\n      operation: operationType\n    } = operationDef;\n    const headers = additionalHeaders || {};\n    switch (operationType) {\n      case 'query':\n      case 'mutation':\n        {\n          const abortController = new AbortController();\n          let responsePromise;\n          if (isAmplifyInstance(amplify)) {\n            responsePromise = this._graphql(amplify, {\n              query,\n              variables,\n              authMode\n            }, headers, abortController, customUserAgentDetails, authToken);\n          } else {\n            // NOTE: this wrapper function must be await-able so the Amplify server context manager can\n            // destroy the context only after it completes\n            const wrapper = async amplifyInstance => {\n              const result = await this._graphql(amplifyInstance, {\n                query,\n                variables,\n                authMode\n              }, headers, abortController, customUserAgentDetails, authToken);\n              return result;\n            };\n            responsePromise = amplify(wrapper);\n          }\n          this._api.updateRequestToBeCancellable(responsePromise, abortController);\n          return responsePromise;\n        }\n      case 'subscription':\n        return this._graphqlSubscribe(amplify, {\n          query,\n          variables,\n          authMode\n        }, headers, customUserAgentDetails, authToken);\n      default:\n        throw new Error(\"invalid operation type: \".concat(operationType));\n    }\n  }\n  async _graphql(amplify, _ref2) {\n    let {\n      query,\n      variables,\n      authMode: explicitAuthMode\n    } = _ref2;\n    let additionalHeaders = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let abortController = arguments.length > 3 ? arguments[3] : undefined;\n    let customUserAgentDetails = arguments.length > 4 ? arguments[4] : undefined;\n    let authToken = arguments.length > 5 ? arguments[5] : undefined;\n    const {\n      region,\n      endpoint: appSyncGraphqlEndpoint,\n      customEndpoint,\n      customEndpointRegion,\n      defaultAuthMode\n    } = resolveConfig(amplify);\n    const authMode = explicitAuthMode || defaultAuthMode || 'iam';\n    /**\n     * Retrieve library options from Amplify configuration.\n     * `customHeaders` here are from the Amplify configuration options,\n     * and are for non-AppSync endpoints only. These are *not* the same as\n     * `additionalHeaders`, which are custom headers that are either 1)\n     * included when configuring the API client or 2) passed along with\n     * individual requests.\n     */\n    const {\n      headers: customHeaders,\n      withCredentials\n    } = resolveLibraryOptions(amplify);\n    /**\n     * Client or request-specific custom headers that may or may not be\n     * returned by a function:\n     */\n    let additionalCustomHeaders;\n    if (typeof additionalHeaders === 'function') {\n      const requestOptions = {\n        method: 'POST',\n        url: new AmplifyUrl(customEndpoint || appSyncGraphqlEndpoint || '').toString(),\n        queryString: print(query)\n      };\n      additionalCustomHeaders = await additionalHeaders(requestOptions);\n    } else {\n      additionalCustomHeaders = additionalHeaders;\n    }\n    // if an authorization header is set, have the explicit authToken take precedence\n    if (authToken) {\n      additionalCustomHeaders = {\n        ...additionalCustomHeaders,\n        Authorization: authToken\n      };\n    }\n    // TODO: Figure what we need to do to remove `!`'s.\n    const headers = {\n      ...(!customEndpoint && (await this._headerBasedAuth(amplify, authMode, additionalCustomHeaders))),\n      /**\n       * Custom endpoint headers.\n       * If there is both a custom endpoint and custom region present, we get the headers.\n       * If there is a custom endpoint but no region, we return an empty object.\n       * If neither are present, we return an empty object.\n       */\n      ...(customEndpoint && (customEndpointRegion ? await this._headerBasedAuth(amplify, authMode, additionalCustomHeaders) : {}) || {}),\n      // Custom headers included in Amplify configuration options:\n      ...(customHeaders && (await customHeaders({\n        query: print(query),\n        variables\n      }))),\n      // Custom headers from individual requests or API client configuration:\n      ...additionalCustomHeaders,\n      // User agent headers:\n      ...(!customEndpoint && {\n        [USER_AGENT_HEADER]: getAmplifyUserAgent(customUserAgentDetails)\n      })\n    };\n    const body = {\n      query: print(query),\n      variables: variables || null\n    };\n    let signingServiceInfo;\n    /**\n     * We do not send the signing service info to the REST API under the\n     * following conditions (i.e. it will not sign the request):\n     *   - there is a custom endpoint but no region\n     *   - the auth mode is `none`, or `apiKey`\n     *   - the auth mode is a type other than the types listed below\n     */\n    if (customEndpoint && !customEndpointRegion || authMode !== 'oidc' && authMode !== 'userPool' && authMode !== 'iam' && authMode !== 'lambda') {\n      signingServiceInfo = undefined;\n    } else {\n      signingServiceInfo = {\n        service: !customEndpointRegion ? 'appsync' : 'execute-api',\n        region: !customEndpointRegion ? region : customEndpointRegion\n      };\n    }\n    const endpoint = customEndpoint || appSyncGraphqlEndpoint;\n    if (!endpoint) {\n      throw createGraphQLResultWithError(new GraphQLApiError(NO_ENDPOINT));\n    }\n    let response;\n    try {\n      // See the inline doc of the REST `post()` API for possible errors to be thrown.\n      // As these errors are catastrophic they should be caught and handled by GraphQL\n      // API consumers.\n      const {\n        body: responseBody\n      } = await this._api.post(amplify, {\n        url: new AmplifyUrl(endpoint),\n        options: {\n          headers,\n          body,\n          signingServiceInfo,\n          withCredentials\n        },\n        abortController\n      });\n      response = await responseBody.json();\n    } catch (error) {\n      if (this.isCancelError(error)) {\n        throw error;\n      }\n      response = createGraphQLResultWithError(error);\n    }\n    if (isGraphQLResponseWithErrors(response)) {\n      throw repackageUnauthorizedError(response);\n    }\n    return response;\n  }\n  /**\n   * Checks to see if an error thrown is from an api request cancellation\n   * @param {any} error - Any error\n   * @return {boolean} - A boolean indicating if the error was from an api request cancellation\n   */\n  isCancelError(error) {\n    return this._api.isCancelErrorREST(error);\n  }\n  /**\n   * Cancels an inflight request. Only applicable for graphql queries and mutations\n   * @param {any} request - request to cancel\n   * @returns - A boolean indicating if the request was cancelled\n   */\n  cancel(request, message) {\n    return this._api.cancelREST(request, message);\n  }\n  _graphqlSubscribe(amplify, _ref3) {\n    let {\n      query,\n      variables,\n      authMode\n    } = _ref3;\n    let additionalHeaders = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let customUserAgentDetails = arguments.length > 3 ? arguments[3] : undefined;\n    let authToken = arguments.length > 4 ? arguments[4] : undefined;\n    const config = resolveConfig(amplify);\n    /**\n     * Retrieve library options from Amplify configuration.\n     * `libraryConfigHeaders` are from the Amplify configuration options,\n     * and will not be overwritten by other custom headers. These are *not*\n     * the same as `additionalHeaders`, which are custom headers that are\n     * either 1)included when configuring the API client or 2) passed along\n     * with individual requests.\n     */\n    const {\n      headers: libraryConfigHeaders\n    } = resolveLibraryOptions(amplify);\n    return this.appSyncRealTime.subscribe({\n      query: print(query),\n      variables,\n      appSyncGraphqlEndpoint: config === null || config === void 0 ? void 0 : config.endpoint,\n      region: config === null || config === void 0 ? void 0 : config.region,\n      authenticationType: authMode || (config === null || config === void 0 ? void 0 : config.defaultAuthMode),\n      apiKey: config === null || config === void 0 ? void 0 : config.apiKey,\n      additionalHeaders,\n      authToken,\n      libraryConfigHeaders\n    }, customUserAgentDetails).pipe(catchError(e => {\n      if (e.errors) {\n        throw repackageUnauthorizedError(e);\n      }\n      throw e;\n    }));\n  }\n}\nconst InternalGraphQLAPI = new InternalGraphQLAPIClass();\nexport { InternalGraphQLAPI, InternalGraphQLAPIClass };","map":{"version":3,"names":["USER_AGENT_HEADER","isAmplifyInstance","amplify","InternalGraphQLAPIClass","constructor","appSyncRealTime","AWSAppSyncRealTimeProvider","_api","post","cancelREST","cancel","isCancelErrorREST","isCancelError","updateRequestToBeCancellable","getModuleName","_headerBasedAuth","authMode","additionalHeaders","arguments","length","undefined","apiKey","resolveConfig","headers","GraphQLApiError","NO_API_KEY","session","Auth","fetchAuthSession","credentials","NO_VALID_CREDENTIALS","token","_await$amplify$Auth$f","tokens","accessToken","toString","e","NO_SIGNED_IN_USER","underlyingError","NO_VALID_AUTH_TOKEN","Authorization","NO_AUTH_TOKEN_HEADER","getGraphqlOperationType","operation","doc","parse","definitions","operationType","graphql","_ref","customUserAgentDetails","query","paramQuery","variables","authToken","print","operationDef","filter","def","kind","abortController","AbortController","responsePromise","_graphql","wrapper","amplifyInstance","result","_graphqlSubscribe","Error","concat","_ref2","explicitAuthMode","region","endpoint","appSyncGraphqlEndpoint","customEndpoint","customEndpointRegion","defaultAuthMode","customHeaders","withCredentials","resolveLibraryOptions","additionalCustomHeaders","requestOptions","method","url","AmplifyUrl","queryString","getAmplifyUserAgent","body","signingServiceInfo","service","createGraphQLResultWithError","NO_ENDPOINT","response","responseBody","options","json","error","isGraphQLResponseWithErrors","repackageUnauthorizedError","request","message","_ref3","config","libraryConfigHeaders","subscribe","authenticationType","pipe","catchError","errors","InternalGraphQLAPI"],"sources":["/Users/bcaudillo/Desktop/Projects/todo/node_modules/@aws-amplify/api-graphql/src/internals/InternalGraphQLAPI.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { parse, print, } from 'graphql';\nimport { catchError } from 'rxjs';\nimport { AmplifyUrl, getAmplifyUserAgent, } from '@aws-amplify/core/internals/utils';\nimport { isCancelError as isCancelErrorREST } from '@aws-amplify/api-rest';\nimport { cancel as cancelREST, post, updateRequestToBeCancellable, } from '@aws-amplify/api-rest/internals';\nimport { AWSAppSyncRealTimeProvider } from '../Providers/AWSAppSyncRealTimeProvider';\nimport { resolveConfig, resolveLibraryOptions } from '../utils';\nimport { repackageUnauthorizedError } from '../utils/errors/repackageAuthError';\nimport { NO_API_KEY, NO_AUTH_TOKEN_HEADER, NO_ENDPOINT, NO_SIGNED_IN_USER, NO_VALID_AUTH_TOKEN, NO_VALID_CREDENTIALS, } from '../utils/errors/constants';\nimport { GraphQLApiError, createGraphQLResultWithError } from '../utils/errors';\nimport { isGraphQLResponseWithErrors } from './utils/runtimeTypeGuards/isGraphQLResponseWithErrors';\nconst USER_AGENT_HEADER = 'x-amz-user-agent';\nconst isAmplifyInstance = (amplify) => {\n    return typeof amplify !== 'function';\n};\n/**\n * Export Cloud Logic APIs\n */\nexport class InternalGraphQLAPIClass {\n    constructor() {\n        /**\n         * @private\n         */\n        this.appSyncRealTime = new AWSAppSyncRealTimeProvider();\n        this._api = {\n            post,\n            cancelREST,\n            isCancelErrorREST,\n            updateRequestToBeCancellable,\n        };\n    }\n    getModuleName() {\n        return 'InternalGraphQLAPI';\n    }\n    async _headerBasedAuth(amplify, authMode, additionalHeaders = {}) {\n        const { apiKey } = resolveConfig(amplify);\n        let headers = {};\n        switch (authMode) {\n            case 'apiKey':\n                if (!apiKey) {\n                    throw new GraphQLApiError(NO_API_KEY);\n                }\n                headers = {\n                    'X-Api-Key': apiKey,\n                };\n                break;\n            case 'iam': {\n                const session = await amplify.Auth.fetchAuthSession();\n                if (session.credentials === undefined) {\n                    throw new GraphQLApiError(NO_VALID_CREDENTIALS);\n                }\n                break;\n            }\n            case 'oidc':\n            case 'userPool': {\n                let token;\n                try {\n                    token = (await amplify.Auth.fetchAuthSession()).tokens?.accessToken.toString();\n                }\n                catch (e) {\n                    // fetchAuthSession failed\n                    throw new GraphQLApiError({\n                        ...NO_SIGNED_IN_USER,\n                        underlyingError: e,\n                    });\n                }\n                // `fetchAuthSession()` succeeded but didn't return `tokens`.\n                // This may happen when unauthenticated access is enabled and there is\n                // no user signed in.\n                if (!token) {\n                    throw new GraphQLApiError(NO_VALID_AUTH_TOKEN);\n                }\n                headers = {\n                    Authorization: token,\n                };\n                break;\n            }\n            case 'lambda':\n                if (typeof additionalHeaders === 'object' &&\n                    !additionalHeaders.Authorization) {\n                    throw new GraphQLApiError(NO_AUTH_TOKEN_HEADER);\n                }\n                headers = {\n                    Authorization: additionalHeaders.Authorization,\n                };\n                break;\n            case 'none':\n                break;\n            default:\n                break;\n        }\n        return headers;\n    }\n    /**\n     * to get the operation type\n     * @param operation\n     */\n    getGraphqlOperationType(operation) {\n        const doc = parse(operation);\n        const definitions = doc.definitions;\n        const [{ operation: operationType }] = definitions;\n        return operationType;\n    }\n    /**\n     * Executes a GraphQL operation\n     *\n     * @param options - GraphQL Options\n     * @param [additionalHeaders] - headers to merge in after any `libraryConfigHeaders` set in the config\n     * @returns An Observable if the query is a subscription query, else a promise of the graphql result.\n     */\n    graphql(amplify, { query: paramQuery, variables = {}, authMode, authToken }, additionalHeaders, customUserAgentDetails) {\n        const query = typeof paramQuery === 'string'\n            ? parse(paramQuery)\n            : parse(print(paramQuery));\n        const [operationDef = {}] = query.definitions.filter(def => def.kind === 'OperationDefinition');\n        const { operation: operationType } = operationDef;\n        const headers = additionalHeaders || {};\n        switch (operationType) {\n            case 'query':\n            case 'mutation': {\n                const abortController = new AbortController();\n                let responsePromise;\n                if (isAmplifyInstance(amplify)) {\n                    responsePromise = this._graphql(amplify, { query, variables, authMode }, headers, abortController, customUserAgentDetails, authToken);\n                }\n                else {\n                    // NOTE: this wrapper function must be await-able so the Amplify server context manager can\n                    // destroy the context only after it completes\n                    const wrapper = async (amplifyInstance) => {\n                        const result = await this._graphql(amplifyInstance, { query, variables, authMode }, headers, abortController, customUserAgentDetails, authToken);\n                        return result;\n                    };\n                    responsePromise = amplify(wrapper);\n                }\n                this._api.updateRequestToBeCancellable(responsePromise, abortController);\n                return responsePromise;\n            }\n            case 'subscription':\n                return this._graphqlSubscribe(amplify, { query, variables, authMode }, headers, customUserAgentDetails, authToken);\n            default:\n                throw new Error(`invalid operation type: ${operationType}`);\n        }\n    }\n    async _graphql(amplify, { query, variables, authMode: explicitAuthMode }, additionalHeaders = {}, abortController, customUserAgentDetails, authToken) {\n        const { region, endpoint: appSyncGraphqlEndpoint, customEndpoint, customEndpointRegion, defaultAuthMode, } = resolveConfig(amplify);\n        const authMode = explicitAuthMode || defaultAuthMode || 'iam';\n        /**\n         * Retrieve library options from Amplify configuration.\n         * `customHeaders` here are from the Amplify configuration options,\n         * and are for non-AppSync endpoints only. These are *not* the same as\n         * `additionalHeaders`, which are custom headers that are either 1)\n         * included when configuring the API client or 2) passed along with\n         * individual requests.\n         */\n        const { headers: customHeaders, withCredentials } = resolveLibraryOptions(amplify);\n        /**\n         * Client or request-specific custom headers that may or may not be\n         * returned by a function:\n         */\n        let additionalCustomHeaders;\n        if (typeof additionalHeaders === 'function') {\n            const requestOptions = {\n                method: 'POST',\n                url: new AmplifyUrl(customEndpoint || appSyncGraphqlEndpoint || '').toString(),\n                queryString: print(query),\n            };\n            additionalCustomHeaders = await additionalHeaders(requestOptions);\n        }\n        else {\n            additionalCustomHeaders = additionalHeaders;\n        }\n        // if an authorization header is set, have the explicit authToken take precedence\n        if (authToken) {\n            additionalCustomHeaders = {\n                ...additionalCustomHeaders,\n                Authorization: authToken,\n            };\n        }\n        // TODO: Figure what we need to do to remove `!`'s.\n        const headers = {\n            ...(!customEndpoint &&\n                (await this._headerBasedAuth(amplify, authMode, additionalCustomHeaders))),\n            /**\n             * Custom endpoint headers.\n             * If there is both a custom endpoint and custom region present, we get the headers.\n             * If there is a custom endpoint but no region, we return an empty object.\n             * If neither are present, we return an empty object.\n             */\n            ...((customEndpoint &&\n                (customEndpointRegion\n                    ? await this._headerBasedAuth(amplify, authMode, additionalCustomHeaders)\n                    : {})) ||\n                {}),\n            // Custom headers included in Amplify configuration options:\n            ...(customHeaders &&\n                (await customHeaders({\n                    query: print(query),\n                    variables,\n                }))),\n            // Custom headers from individual requests or API client configuration:\n            ...additionalCustomHeaders,\n            // User agent headers:\n            ...(!customEndpoint && {\n                [USER_AGENT_HEADER]: getAmplifyUserAgent(customUserAgentDetails),\n            }),\n        };\n        const body = {\n            query: print(query),\n            variables: variables || null,\n        };\n        let signingServiceInfo;\n        /**\n         * We do not send the signing service info to the REST API under the\n         * following conditions (i.e. it will not sign the request):\n         *   - there is a custom endpoint but no region\n         *   - the auth mode is `none`, or `apiKey`\n         *   - the auth mode is a type other than the types listed below\n         */\n        if ((customEndpoint && !customEndpointRegion) ||\n            (authMode !== 'oidc' &&\n                authMode !== 'userPool' &&\n                authMode !== 'iam' &&\n                authMode !== 'lambda')) {\n            signingServiceInfo = undefined;\n        }\n        else {\n            signingServiceInfo = {\n                service: !customEndpointRegion ? 'appsync' : 'execute-api',\n                region: !customEndpointRegion ? region : customEndpointRegion,\n            };\n        }\n        const endpoint = customEndpoint || appSyncGraphqlEndpoint;\n        if (!endpoint) {\n            throw createGraphQLResultWithError(new GraphQLApiError(NO_ENDPOINT));\n        }\n        let response;\n        try {\n            // See the inline doc of the REST `post()` API for possible errors to be thrown.\n            // As these errors are catastrophic they should be caught and handled by GraphQL\n            // API consumers.\n            const { body: responseBody } = await this._api.post(amplify, {\n                url: new AmplifyUrl(endpoint),\n                options: {\n                    headers,\n                    body,\n                    signingServiceInfo,\n                    withCredentials,\n                },\n                abortController,\n            });\n            response = await responseBody.json();\n        }\n        catch (error) {\n            if (this.isCancelError(error)) {\n                throw error;\n            }\n            response = createGraphQLResultWithError(error);\n        }\n        if (isGraphQLResponseWithErrors(response)) {\n            throw repackageUnauthorizedError(response);\n        }\n        return response;\n    }\n    /**\n     * Checks to see if an error thrown is from an api request cancellation\n     * @param {any} error - Any error\n     * @return {boolean} - A boolean indicating if the error was from an api request cancellation\n     */\n    isCancelError(error) {\n        return this._api.isCancelErrorREST(error);\n    }\n    /**\n     * Cancels an inflight request. Only applicable for graphql queries and mutations\n     * @param {any} request - request to cancel\n     * @returns - A boolean indicating if the request was cancelled\n     */\n    cancel(request, message) {\n        return this._api.cancelREST(request, message);\n    }\n    _graphqlSubscribe(amplify, { query, variables, authMode }, additionalHeaders = {}, customUserAgentDetails, authToken) {\n        const config = resolveConfig(amplify);\n        /**\n         * Retrieve library options from Amplify configuration.\n         * `libraryConfigHeaders` are from the Amplify configuration options,\n         * and will not be overwritten by other custom headers. These are *not*\n         * the same as `additionalHeaders`, which are custom headers that are\n         * either 1)included when configuring the API client or 2) passed along\n         * with individual requests.\n         */\n        const { headers: libraryConfigHeaders } = resolveLibraryOptions(amplify);\n        return this.appSyncRealTime\n            .subscribe({\n            query: print(query),\n            variables,\n            appSyncGraphqlEndpoint: config?.endpoint,\n            region: config?.region,\n            authenticationType: authMode || config?.defaultAuthMode,\n            apiKey: config?.apiKey,\n            additionalHeaders,\n            authToken,\n            libraryConfigHeaders,\n        }, customUserAgentDetails)\n            .pipe(catchError(e => {\n            if (e.errors) {\n                throw repackageUnauthorizedError(e);\n            }\n            throw e;\n        }));\n    }\n}\nexport const InternalGraphQLAPI = new InternalGraphQLAPIClass();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}