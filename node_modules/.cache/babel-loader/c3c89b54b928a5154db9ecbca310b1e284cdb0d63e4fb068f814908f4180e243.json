{"ast":null,"code":"import { CookieStorage } from './cookieStorage';\nimport { LocalStorage } from './localStorage';\nimport { MemoryStorage } from './memoryStorage';\nimport { isStoreTypeWithSettings } from './settings';\nimport { StoreType } from './types';\nexport * from './types';\nexport * from './localStorage';\nexport * from './cookieStorage';\nexport * from './memoryStorage';\nexport * from './universalStorage';\nexport * from './settings';\n/**\n * Creates multiple storage systems from an array of StoreType and options\n * @param args StoreType and options\n * @returns Storage array\n */\nexport function initializeStorages(args) {\n  var storages = args.map(function (s) {\n    var type;\n    var settings;\n    if (isStoreTypeWithSettings(s)) {\n      type = s.name;\n      settings = s.settings;\n    } else {\n      type = s;\n    }\n    switch (type) {\n      case StoreType.Cookie:\n        return new CookieStorage(settings);\n      case StoreType.LocalStorage:\n        return new LocalStorage();\n      case StoreType.Memory:\n        return new MemoryStorage();\n      default:\n        throw new Error(\"Unknown Store Type: \".concat(s));\n    }\n  });\n  return storages;\n}\n/**\n * Injects the CookieOptions into a the arguments for initializeStorage\n * @param storeTypes list of storeType\n * @param cookieOptions cookie Options\n * @returns arguments for initializeStorage\n */\nexport function applyCookieOptions(storeTypes, cookieOptions) {\n  return storeTypes.map(function (s) {\n    if (cookieOptions && s === StoreType.Cookie) {\n      return {\n        name: s,\n        settings: cookieOptions\n      };\n    }\n    return s;\n  });\n}","map":{"version":3,"names":["CookieStorage","LocalStorage","MemoryStorage","isStoreTypeWithSettings","StoreType","initializeStorages","args","storages","map","s","type","settings","name","Cookie","Memory","Error","concat","applyCookieOptions","storeTypes","cookieOptions"],"sources":["/Users/bcaudillo/Desktop/Projects/todo/node_modules/@segment/analytics-next/src/core/storage/index.ts"],"sourcesContent":["import { CookieOptions, CookieStorage } from './cookieStorage'\nimport { LocalStorage } from './localStorage'\nimport { MemoryStorage } from './memoryStorage'\nimport { isStoreTypeWithSettings } from './settings'\nimport { StoreType, Store, InitializeStorageArgs } from './types'\n\nexport * from './types'\nexport * from './localStorage'\nexport * from './cookieStorage'\nexport * from './memoryStorage'\nexport * from './universalStorage'\nexport * from './settings'\n\n/**\n * Creates multiple storage systems from an array of StoreType and options\n * @param args StoreType and options\n * @returns Storage array\n */\nexport function initializeStorages(args: InitializeStorageArgs): Store[] {\n  const storages = args.map((s) => {\n    let type: StoreType\n    let settings\n\n    if (isStoreTypeWithSettings(s)) {\n      type = s.name\n      settings = s.settings\n    } else {\n      type = s\n    }\n\n    switch (type) {\n      case StoreType.Cookie:\n        return new CookieStorage(settings)\n      case StoreType.LocalStorage:\n        return new LocalStorage()\n      case StoreType.Memory:\n        return new MemoryStorage()\n      default:\n        throw new Error(`Unknown Store Type: ${s}`)\n    }\n  })\n  return storages\n}\n\n/**\n * Injects the CookieOptions into a the arguments for initializeStorage\n * @param storeTypes list of storeType\n * @param cookieOptions cookie Options\n * @returns arguments for initializeStorage\n */\nexport function applyCookieOptions(\n  storeTypes: StoreType[],\n  cookieOptions?: CookieOptions\n): InitializeStorageArgs {\n  return storeTypes.map((s) => {\n    if (cookieOptions && s === StoreType.Cookie) {\n      return {\n        name: s,\n        settings: cookieOptions,\n      }\n    }\n    return s\n  })\n}\n"],"mappings":"AAAA,SAAwBA,aAAa,QAAQ,iBAAiB;AAC9D,SAASC,YAAY,QAAQ,gBAAgB;AAC7C,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,SAASC,uBAAuB,QAAQ,YAAY;AACpD,SAASC,SAAS,QAAsC,SAAS;AAEjE,cAAc,SAAS;AACvB,cAAc,gBAAgB;AAC9B,cAAc,iBAAiB;AAC/B,cAAc,iBAAiB;AAC/B,cAAc,oBAAoB;AAClC,cAAc,YAAY;AAE1B;;;;;AAKA,OAAM,SAAUC,kBAAkBA,CAACC,IAA2B;EAC5D,IAAMC,QAAQ,GAAGD,IAAI,CAACE,GAAG,CAAC,UAACC,CAAC;IAC1B,IAAIC,IAAe;IACnB,IAAIC,QAAQ;IAEZ,IAAIR,uBAAuB,CAACM,CAAC,CAAC,EAAE;MAC9BC,IAAI,GAAGD,CAAC,CAACG,IAAI;MACbD,QAAQ,GAAGF,CAAC,CAACE,QAAQ;KACtB,MAAM;MACLD,IAAI,GAAGD,CAAC;;IAGV,QAAQC,IAAI;MACV,KAAKN,SAAS,CAACS,MAAM;QACnB,OAAO,IAAIb,aAAa,CAACW,QAAQ,CAAC;MACpC,KAAKP,SAAS,CAACH,YAAY;QACzB,OAAO,IAAIA,YAAY,EAAE;MAC3B,KAAKG,SAAS,CAACU,MAAM;QACnB,OAAO,IAAIZ,aAAa,EAAE;MAC5B;QACE,MAAM,IAAIa,KAAK,CAAC,uBAAAC,MAAA,CAAuBP,CAAC,CAAE,CAAC;;EAEjD,CAAC,CAAC;EACF,OAAOF,QAAQ;AACjB;AAEA;;;;;;AAMA,OAAM,SAAUU,kBAAkBA,CAChCC,UAAuB,EACvBC,aAA6B;EAE7B,OAAOD,UAAU,CAACV,GAAG,CAAC,UAACC,CAAC;IACtB,IAAIU,aAAa,IAAIV,CAAC,KAAKL,SAAS,CAACS,MAAM,EAAE;MAC3C,OAAO;QACLD,IAAI,EAAEH,CAAC;QACPE,QAAQ,EAAEQ;OACX;;IAEH,OAAOV,CAAC;EACV,CAAC,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}