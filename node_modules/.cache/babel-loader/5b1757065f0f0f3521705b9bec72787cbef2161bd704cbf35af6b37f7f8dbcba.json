{"ast":null,"code":"import { __assign } from \"tslib\";\n/**\n * Merge legacy settings and initialized Integration option overrides.\n *\n * This will merge any options that were passed from initialization into\n * overrides for settings that are returned by the Segment CDN.\n *\n * i.e. this allows for passing options directly into destinations from\n * the Analytics constructor.\n */\nexport function mergedOptions(settings, options) {\n  var _a;\n  var optionOverrides = Object.entries((_a = options.integrations) !== null && _a !== void 0 ? _a : {}).reduce(function (overrides, _a) {\n    var _b, _c;\n    var integration = _a[0],\n      options = _a[1];\n    if (typeof options === 'object') {\n      return __assign(__assign({}, overrides), (_b = {}, _b[integration] = options, _b));\n    }\n    return __assign(__assign({}, overrides), (_c = {}, _c[integration] = {}, _c));\n  }, {});\n  return Object.entries(settings.integrations).reduce(function (integrationSettings, _a) {\n    var _b;\n    var integration = _a[0],\n      settings = _a[1];\n    return __assign(__assign({}, integrationSettings), (_b = {}, _b[integration] = __assign(__assign({}, settings), optionOverrides[integration]), _b));\n  }, {});\n}","map":{"version":3,"names":["mergedOptions","settings","options","optionOverrides","Object","entries","_a","integrations","reduce","overrides","integration","__assign","_b","_c","integrationSettings"],"sources":["/Users/bcaudillo/Desktop/Projects/todo/node_modules/@segment/analytics-next/src/lib/merged-options.ts"],"sourcesContent":["import { JSONObject, Options } from '../core/events/interfaces'\nimport { LegacySettings } from '../browser'\n\n/**\n * Merge legacy settings and initialized Integration option overrides.\n *\n * This will merge any options that were passed from initialization into\n * overrides for settings that are returned by the Segment CDN.\n *\n * i.e. this allows for passing options directly into destinations from\n * the Analytics constructor.\n */\nexport function mergedOptions(\n  settings: LegacySettings,\n  options: Options\n): Record<string, JSONObject> {\n  const optionOverrides = Object.entries(options.integrations ?? {}).reduce(\n    (overrides, [integration, options]) => {\n      if (typeof options === 'object') {\n        return {\n          ...overrides,\n          [integration]: options,\n        }\n      }\n\n      return {\n        ...overrides,\n        [integration]: {},\n      }\n    },\n    {} as Record<string, JSONObject>\n  )\n\n  return Object.entries(settings.integrations).reduce(\n    (integrationSettings, [integration, settings]) => {\n      return {\n        ...integrationSettings,\n        [integration]: {\n          ...settings,\n          ...optionOverrides[integration],\n        },\n      }\n    },\n    {} as Record<string, JSONObject>\n  )\n}\n"],"mappings":";AAGA;;;;;;;;;AASA,OAAM,SAAUA,aAAaA,CAC3BC,QAAwB,EACxBC,OAAgB;;EAEhB,IAAMC,eAAe,GAAGC,MAAM,CAACC,OAAO,CAAC,CAAAC,EAAA,GAAAJ,OAAO,CAACK,YAAY,cAAAD,EAAA,cAAAA,EAAA,GAAI,EAAE,CAAC,CAACE,MAAM,CACvE,UAACC,SAAS,EAAEH,EAAsB;;QAArBI,WAAW,GAAAJ,EAAA;MAAEJ,OAAO,GAAAI,EAAA;IAC/B,IAAI,OAAOJ,OAAO,KAAK,QAAQ,EAAE;MAC/B,OAAAS,QAAA,CAAAA,QAAA,KACKF,SAAS,IAAAG,EAAA,OAAAA,EAAA,CACXF,WAAW,IAAGR,OAAO,EAAAU,EAAA;;IAI1B,OAAAD,QAAA,CAAAA,QAAA,KACKF,SAAS,IAAAI,EAAA,OAAAA,EAAA,CACXH,WAAW,IAAG,EAAE,EAAAG,EAAA;EAErB,CAAC,EACD,EAAgC,CACjC;EAED,OAAOT,MAAM,CAACC,OAAO,CAACJ,QAAQ,CAACM,YAAY,CAAC,CAACC,MAAM,CACjD,UAACM,mBAAmB,EAAER,EAAuB;;QAAtBI,WAAW,GAAAJ,EAAA;MAAEL,QAAQ,GAAAK,EAAA;IAC1C,OAAAK,QAAA,CAAAA,QAAA,KACKG,mBAAmB,IAAAF,EAAA,OAAAA,EAAA,CACrBF,WAAW,IAAAC,QAAA,CAAAA,QAAA,KACPV,QAAQ,GACRE,eAAe,CAACO,WAAW,CAAC,GAAAE,EAAA;EAGrC,CAAC,EACD,EAAgC,CACjC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}