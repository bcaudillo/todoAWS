{"ast":null,"code":"/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar isUint32Array = require('@stdlib/assert-is-uint32array');\nvar UINT32_MAX = require('@stdlib/constants-uint32-max');\nvar GlobalUint32Array = require('./uint32array.js');\n\n// MAIN //\n\n/**\n* Tests for native `Uint32Array` support.\n*\n* @returns {boolean} boolean indicating if an environment has `Uint32Array` support\n*\n* @example\n* var bool = hasUint32ArraySupport();\n* // returns <boolean>\n*/\nfunction hasUint32ArraySupport() {\n  var bool;\n  var arr;\n  if (typeof GlobalUint32Array !== 'function') {\n    return false;\n  }\n  // Test basic support...\n  try {\n    arr = [1, 3.14, -3.14, UINT32_MAX + 1, UINT32_MAX + 2];\n    arr = new GlobalUint32Array(arr);\n    bool = isUint32Array(arr) && arr[0] === 1 && arr[1] === 3 &&\n    // truncation\n    arr[2] === UINT32_MAX - 2 &&\n    // truncation and wrap around\n    arr[3] === 0 &&\n    // wrap around\n    arr[4] === 1 // wrap around\n    ;\n  } catch (err) {\n    // eslint-disable-line no-unused-vars\n    bool = false;\n  }\n  return bool;\n}\n\n// EXPORTS //\n\nmodule.exports = hasUint32ArraySupport;","map":{"version":3,"names":["isUint32Array","require","UINT32_MAX","GlobalUint32Array","hasUint32ArraySupport","bool","arr","err","module","exports"],"sources":["/Users/bcaudillo/Desktop/Projects/todo/node_modules/@stdlib/assert-has-uint32array-support/lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isUint32Array = require( '@stdlib/assert-is-uint32array' );\nvar UINT32_MAX = require( '@stdlib/constants-uint32-max' );\nvar GlobalUint32Array = require( './uint32array.js' );\n\n\n// MAIN //\n\n/**\n* Tests for native `Uint32Array` support.\n*\n* @returns {boolean} boolean indicating if an environment has `Uint32Array` support\n*\n* @example\n* var bool = hasUint32ArraySupport();\n* // returns <boolean>\n*/\nfunction hasUint32ArraySupport() {\n\tvar bool;\n\tvar arr;\n\n\tif ( typeof GlobalUint32Array !== 'function' ) {\n\t\treturn false;\n\t}\n\t// Test basic support...\n\ttry {\n\t\tarr = [ 1, 3.14, -3.14, UINT32_MAX+1, UINT32_MAX+2 ];\n\t\tarr = new GlobalUint32Array( arr );\n\t\tbool = (\n\t\t\tisUint32Array( arr ) &&\n\t\t\tarr[ 0 ] === 1 &&\n\t\t\tarr[ 1 ] === 3 &&            // truncation\n\t\t\tarr[ 2 ] === UINT32_MAX-2 && // truncation and wrap around\n\t\t\tarr[ 3 ] === 0 &&            // wrap around\n\t\t\tarr[ 4 ] === 1               // wrap around\n\t\t);\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\tbool = false;\n\t}\n\treturn bool;\n}\n\n\n// EXPORTS //\n\nmodule.exports = hasUint32ArraySupport;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AAEA,IAAIA,aAAa,GAAGC,OAAO,CAAE,+BAAgC,CAAC;AAC9D,IAAIC,UAAU,GAAGD,OAAO,CAAE,8BAA+B,CAAC;AAC1D,IAAIE,iBAAiB,GAAGF,OAAO,CAAE,kBAAmB,CAAC;;AAGrD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,qBAAqBA,CAAA,EAAG;EAChC,IAAIC,IAAI;EACR,IAAIC,GAAG;EAEP,IAAK,OAAOH,iBAAiB,KAAK,UAAU,EAAG;IAC9C,OAAO,KAAK;EACb;EACA;EACA,IAAI;IACHG,GAAG,GAAG,CAAE,CAAC,EAAE,IAAI,EAAE,CAAC,IAAI,EAAEJ,UAAU,GAAC,CAAC,EAAEA,UAAU,GAAC,CAAC,CAAE;IACpDI,GAAG,GAAG,IAAIH,iBAAiB,CAAEG,GAAI,CAAC;IAClCD,IAAI,GACHL,aAAa,CAAEM,GAAI,CAAC,IACpBA,GAAG,CAAE,CAAC,CAAE,KAAK,CAAC,IACdA,GAAG,CAAE,CAAC,CAAE,KAAK,CAAC;IAAe;IAC7BA,GAAG,CAAE,CAAC,CAAE,KAAKJ,UAAU,GAAC,CAAC;IAAI;IAC7BI,GAAG,CAAE,CAAC,CAAE,KAAK,CAAC;IAAe;IAC7BA,GAAG,CAAE,CAAC,CAAE,KAAK,CAAC,CAAe;IAC7B;EACF,CAAC,CAAC,OAAQC,GAAG,EAAG;IAAE;IACjBF,IAAI,GAAG,KAAK;EACb;EACA,OAAOA,IAAI;AACZ;;AAGA;;AAEAG,MAAM,CAACC,OAAO,GAAGL,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}