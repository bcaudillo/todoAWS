{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nexport function loadLegacyVideoPlugins(analytics) {\n  return __awaiter(this, void 0, void 0, function () {\n    var plugins;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, import(\n          // @ts-expect-error\n          '@segment/analytics.js-video-plugins/dist/index.umd.js')\n          // This is super gross, but we need to support the `window.analytics.plugins` namespace\n          // that is linked in the segment docs in order to be backwards compatible with ajs-classic\n          // @ts-expect-error\n          ];\n        case 1:\n          plugins = _a.sent();\n          // This is super gross, but we need to support the `window.analytics.plugins` namespace\n          // that is linked in the segment docs in order to be backwards compatible with ajs-classic\n          // @ts-expect-error\n          analytics._plugins = plugins;\n          return [2 /*return*/];\n      }\n    });\n  });\n}","map":{"version":3,"names":["loadLegacyVideoPlugins","analytics","plugins","_a","sent","_plugins"],"sources":["/Users/bcaudillo/Desktop/Projects/todo/node_modules/@segment/analytics-next/src/plugins/legacy-video-plugins/index.ts"],"sourcesContent":["import { Analytics } from '../../core/analytics'\n\nexport async function loadLegacyVideoPlugins(\n  analytics: Analytics\n): Promise<void> {\n  const plugins = await import(\n    // @ts-expect-error\n    '@segment/analytics.js-video-plugins/dist/index.umd.js'\n  )\n\n  // This is super gross, but we need to support the `window.analytics.plugins` namespace\n  // that is linked in the segment docs in order to be backwards compatible with ajs-classic\n\n  // @ts-expect-error\n  analytics._plugins = plugins\n}\n"],"mappings":";AAEA,OAAM,SAAgBA,sBAAsBA,CAC1CC,SAAoB;;;;;;UAEJ,qBAAM,MAAM;UAC1B;UACA,uDAAuD;UAGzD;UACA;UAEA;UAAA,C;;UARMC,OAAO,GAAGC,EAAA,CAAAC,IAAA,EAGf;UAED;UACA;UAEA;UACAH,SAAS,CAACI,QAAQ,GAAGH,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}