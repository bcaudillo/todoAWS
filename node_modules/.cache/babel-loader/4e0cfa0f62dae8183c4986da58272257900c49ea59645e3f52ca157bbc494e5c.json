{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Identify = void 0;\nvar facade_1 = require(\"./facade\");\nvar obj_case_1 = __importDefault(require(\"obj-case\"));\nvar inherits_1 = __importDefault(require(\"inherits\"));\nvar is_email_1 = __importDefault(require(\"./is-email\"));\nvar new_date_1 = __importDefault(require(\"new-date\"));\nvar trim = function (str) {\n  return str.trim();\n};\nfunction Identify(dictionary, opts) {\n  facade_1.Facade.call(this, dictionary, opts);\n}\nexports.Identify = Identify;\ninherits_1.default(Identify, facade_1.Facade);\nvar i = Identify.prototype;\ni.action = function () {\n  return \"identify\";\n};\ni.type = i.action;\ni.traits = function (aliases) {\n  var ret = this.field(\"traits\") || {};\n  var id = this.userId();\n  aliases = aliases || {};\n  if (id) ret.id = id;\n  for (var alias in aliases) {\n    var value = this[alias] == null ? this.proxy(\"traits.\" + alias) : this[alias]();\n    if (value == null) continue;\n    ret[aliases[alias]] = value;\n    if (alias !== aliases[alias]) delete ret[alias];\n  }\n  return ret;\n};\ni.email = function () {\n  var email = this.proxy(\"traits.email\");\n  if (email) return email;\n  var userId = this.userId();\n  if (is_email_1.default(userId)) return userId;\n};\ni.created = function () {\n  var created = this.proxy(\"traits.created\") || this.proxy(\"traits.createdAt\");\n  if (created) return new_date_1.default(created);\n};\ni.companyCreated = function () {\n  var created = this.proxy(\"traits.company.created\") || this.proxy(\"traits.company.createdAt\");\n  if (created) {\n    return new_date_1.default(created);\n  }\n};\ni.companyName = function () {\n  return this.proxy(\"traits.company.name\");\n};\ni.name = function () {\n  var name = this.proxy(\"traits.name\");\n  if (typeof name === \"string\") {\n    return trim(name);\n  }\n  var firstName = this.firstName();\n  var lastName = this.lastName();\n  if (firstName && lastName) {\n    return trim(firstName + \" \" + lastName);\n  }\n};\ni.firstName = function () {\n  var firstName = this.proxy(\"traits.firstName\");\n  if (typeof firstName === \"string\") {\n    return trim(firstName);\n  }\n  var name = this.proxy(\"traits.name\");\n  if (typeof name === \"string\") {\n    return trim(name).split(\" \")[0];\n  }\n};\ni.lastName = function () {\n  var lastName = this.proxy(\"traits.lastName\");\n  if (typeof lastName === \"string\") {\n    return trim(lastName);\n  }\n  var name = this.proxy(\"traits.name\");\n  if (typeof name !== \"string\") {\n    return;\n  }\n  var space = trim(name).indexOf(\" \");\n  if (space === -1) {\n    return;\n  }\n  return trim(name.substr(space + 1));\n};\ni.uid = function () {\n  return this.userId() || this.username() || this.email();\n};\ni.description = function () {\n  return this.proxy(\"traits.description\") || this.proxy(\"traits.background\");\n};\ni.age = function () {\n  var date = this.birthday();\n  var age = obj_case_1.default(this.traits(), \"age\");\n  if (age != null) return age;\n  if (!(date instanceof Date)) return;\n  var now = new Date();\n  return now.getFullYear() - date.getFullYear();\n};\ni.avatar = function () {\n  var traits = this.traits();\n  return obj_case_1.default(traits, \"avatar\") || obj_case_1.default(traits, \"photoUrl\") || obj_case_1.default(traits, \"avatarUrl\");\n};\ni.position = function () {\n  var traits = this.traits();\n  return obj_case_1.default(traits, \"position\") || obj_case_1.default(traits, \"jobTitle\");\n};\ni.username = facade_1.Facade.proxy(\"traits.username\");\ni.website = facade_1.Facade.one(\"traits.website\");\ni.websites = facade_1.Facade.multi(\"traits.website\");\ni.phone = facade_1.Facade.one(\"traits.phone\");\ni.phones = facade_1.Facade.multi(\"traits.phone\");\ni.address = facade_1.Facade.proxy(\"traits.address\");\ni.gender = facade_1.Facade.proxy(\"traits.gender\");\ni.birthday = facade_1.Facade.proxy(\"traits.birthday\");","map":{"version":3,"names":["facade_1","require","obj_case_1","__importDefault","inherits_1","is_email_1","new_date_1","trim","str","Identify","dictionary","opts","Facade","call","exports","default","i","prototype","action","type","traits","aliases","ret","field","id","userId","alias","value","proxy","email","created","companyCreated","companyName","name","firstName","lastName","split","space","indexOf","substr","uid","username","description","age","date","birthday","Date","now","getFullYear","avatar","position","website","one","websites","multi","phone","phones","address","gender"],"sources":["/Users/bcaudillo/Desktop/Projects/todo/node_modules/@segment/facade/lib/identify.js"],"sourcesContent":["\"use strict\";\n\nimport { Facade } from \"./facade\";\nimport get from \"obj-case\";\nimport inherit from \"inherits\";\nimport isEmail from \"./is-email\";\nimport newDate from \"new-date\";\n\nlet trim = (str) => str.trim();\n\n/**\n * Initialize a new `Identify` facade with a `dictionary` of arguments.\n *\n * @param {Object} dictionary - The object to wrap.\n * @param {string} [dictionary.userId] - The ID of the user.\n * @param {string} [dictionary.anonymousId] - The anonymous ID of the user.\n * @param {string} [dictionary.traits] - The user's traits.\n * @param {Object} opts - Options about what kind of Facade to create.\n *\n * @augments Facade\n */\nexport function Identify(dictionary, opts) {\n  Facade.call(this, dictionary, opts);\n}\n\ninherit(Identify, Facade);\n\nconst i = Identify.prototype;\n\n/**\n * Return the type of facade this is. This will always return `\"identify\"`.\n *\n * @return {string}\n */\ni.action = function () {\n  return \"identify\";\n};\n\n/**\n * An alias for {@link Identify#action}.\n *\n * @function\n * @return {string}\n */\ni.type = i.action;\n\n/**\n * Get the user's traits. This is identical to how {@link Facade#traits} works,\n * except it looks at `traits.*` instead of `options.traits.*`.\n *\n * Traits are gotten from `traits`, augmented with a property `id` with\n * the event's `userId`.\n *\n * The parameter `aliases` is meant to transform keys in `traits` into new\n * keys. Each alias like `{ \"xxx\": \"yyy\" }` will take whatever is at `xxx` in\n * the traits, and move it to `yyy`. If `xxx` is a method of this facade, it'll\n * be called as a function instead of treated as a key into the traits.\n *\n * @example\n * let obj = { traits: { foo: \"bar\" }, anonymousId: \"xxx\" }\n * let identify = new Identify(obj)\n *\n * identify.traits() // { \"foo\": \"bar\" }\n * identify.traits({ \"foo\": \"asdf\" }) // { \"asdf\": \"bar\" }\n * identify.traits({ \"sessionId\": \"rofl\" }) // { \"rofl\": \"xxx\" }\n *\n * @param {Object} aliases - A mapping from keys to the new keys they should be\n * transformed to.\n * @return {Object}\n */\ni.traits = function (aliases) {\n  let ret = this.field(\"traits\") || {};\n  let id = this.userId();\n  aliases = aliases || {};\n\n  if (id) ret.id = id;\n\n  for (let alias in aliases) {\n    let value =\n      this[alias] == null ? this.proxy(\"traits.\" + alias) : this[alias]();\n    if (value == null) continue;\n    ret[aliases[alias]] = value;\n    if (alias !== aliases[alias]) delete ret[alias];\n  }\n\n  return ret;\n};\n\n/**\n * Get the user's email from `traits.email`, falling back to `userId` only if\n * it looks like a valid email.\n *\n * This *should* be a string, but may not be if the client isn't adhering to\n * the spec.\n *\n * @return {string}\n */\ni.email = function () {\n  let email = this.proxy(\"traits.email\");\n  if (email) return email;\n\n  let userId = this.userId();\n  if (isEmail(userId)) return userId;\n};\n\n/**\n * Get the time of creation of the user from `traits.created` or\n * `traits.createdAt`.\n *\n * @return {Date}\n */\ni.created = function () {\n  let created = this.proxy(\"traits.created\") || this.proxy(\"traits.createdAt\");\n  if (created) return newDate(created);\n};\n\n/**\n * Get the time of creation of the user's company from `traits.company.created`\n * or `traits.company.createdAt`.\n *\n * @return {Date}\n */\ni.companyCreated = function () {\n  let created =\n    this.proxy(\"traits.company.created\") ||\n    this.proxy(\"traits.company.createdAt\");\n\n  if (created) {\n    return newDate(created);\n  }\n};\n\n/**\n * Get the user's company name from `traits.company.name`.\n *\n * This *should* be a string, but may not be if the client isn't adhering to\n * the spec.\n *\n * @return {string}\n */\ni.companyName = function () {\n  return this.proxy(\"traits.company.name\");\n};\n\n/**\n * Get the user's name `traits.name`, falling back to combining {@link\n * Identify#firstName} and {@link Identify#lastName} if possible.\n *\n * This *should* be a string, but may not be if the client isn't adhering to\n * the spec.\n *\n * @return {string}\n */\ni.name = function () {\n  let name = this.proxy(\"traits.name\");\n  if (typeof name === \"string\") {\n    return trim(name);\n  }\n\n  let firstName = this.firstName();\n  let lastName = this.lastName();\n  if (firstName && lastName) {\n    return trim(firstName + \" \" + lastName);\n  }\n};\n\n/**\n * Get the user's first name from `traits.firstName`, optionally splitting it\n * out of a the full name if that's all that was provided.\n *\n * Splitting the full name works on the assumption that the full name is of the\n * form \"FirstName LastName\"; it will not work for non-Western names.\n *\n * This *should* be a string, but may not be if the client isn't adhering to\n * the spec.\n *\n * @return {string}\n */\ni.firstName = function () {\n  let firstName = this.proxy(\"traits.firstName\");\n  if (typeof firstName === \"string\") {\n    return trim(firstName);\n  }\n\n  let name = this.proxy(\"traits.name\");\n  if (typeof name === \"string\") {\n    return trim(name).split(\" \")[0];\n  }\n};\n\n/**\n * Get the user's last name from `traits.lastName`, optionally splitting it out\n * of a the full name if that's all that was provided.\n *\n * Splitting the full name works on the assumption that the full name is of the\n * form \"FirstName LastName\"; it will not work for non-Western names.\n *\n * This *should* be a string, but may not be if the client isn't adhering to\n * the spec.\n *\n * @return {string}\n */\ni.lastName = function () {\n  let lastName = this.proxy(\"traits.lastName\");\n  if (typeof lastName === \"string\") {\n    return trim(lastName);\n  }\n\n  let name = this.proxy(\"traits.name\");\n  if (typeof name !== \"string\") {\n    return;\n  }\n\n  let space = trim(name).indexOf(\" \");\n  if (space === -1) {\n    return;\n  }\n\n  return trim(name.substr(space + 1));\n};\n\n/**\n * Get the user's \"unique id\" from `userId`, `traits.username`, or\n * `traits.email`.\n *\n * This *should* be a string, but may not be if the client isn't adhering to\n * the spec.\n *\n * @return {string}\n */\ni.uid = function () {\n  return this.userId() || this.username() || this.email();\n};\n\n/**\n * Get the user's description from `traits.description` or `traits.background`.\n *\n * This *should* be a string, but may not be if the client isn't adhering to\n * the spec.\n *\n * @return {string}\n */\ni.description = function () {\n  return this.proxy(\"traits.description\") || this.proxy(\"traits.background\");\n};\n\n/**\n * Get the user's age from `traits.age`, falling back to computing it from\n * `traits.birthday` and the current time.\n *\n * @return {number}\n */\ni.age = function () {\n  let date = this.birthday();\n  let age = get(this.traits(), \"age\");\n  if (age != null) return age;\n  if (!(date instanceof Date)) return;\n  let now = new Date();\n  return now.getFullYear() - date.getFullYear();\n};\n\n/**\n * Get the URL of the user's avatar from `traits.avatar`, `traits.photoUrl`, or\n * `traits.avatarUrl`.\n *\n * This *should* be a string, but may not be if the client isn't adhering to\n * the spec.\n *\n * @return {string}\n */\ni.avatar = function () {\n  let traits = this.traits();\n  return (\n    get(traits, \"avatar\") || get(traits, \"photoUrl\") || get(traits, \"avatarUrl\")\n  );\n};\n\n/**\n * Get the user's job position from `traits.position` or `traits.jobTitle`.\n *\n * This *should* be a string, but may not be if the client isn't adhering to\n * the spec.\n *\n * @return {string}\n */\ni.position = function () {\n  let traits = this.traits();\n  return get(traits, \"position\") || get(traits, \"jobTitle\");\n};\n\n/**\n * Get the user's username from `traits.username`.\n *\n * This *should* be a string, but may not be if the client isn't adhering to\n * the spec.\n *\n * @function\n * @return {string}\n */\ni.username = Facade.proxy(\"traits.username\");\n\n/**\n * Get the user's website from `traits.website`, or if there are multiple in\n * `traits.websites`, return the first one.\n *\n * This *should* be a string, but may not be if the client isn't adhering to\n * the spec.\n *\n * @function\n * @return {string}\n */\ni.website = Facade.one(\"traits.website\");\n\n/**\n * Get the user's websites from `traits.websites`, or if there is only one in\n * `traits.website`, then wrap it in an array.\n *\n * This *should* be an array of strings, but may not be if the client isn't\n * adhering to the spec.\n *\n * @function\n * @return {array}\n */\ni.websites = Facade.multi(\"traits.website\");\n\n/**\n * Get the user's phone number from `traits.phone`, or if there are multiple in\n * `traits.phones`, return the first one.\n *\n * This *should* be a string, but may not be if the client isn't adhering to\n * the spec.\n *\n * @function\n * @return {string}\n */\ni.phone = Facade.one(\"traits.phone\");\n\n/**\n * Get the user's phone numbers from `traits.phones`, or if there is only one\n * in `traits.phone`, then wrap it in an array.\n *\n * This *should* be an array of strings, but may not be if the client isn't\n * adhering to the spec.\n *\n * @function\n * @return {array}\n */\ni.phones = Facade.multi(\"traits.phone\");\n\n/**\n * Get the user's address from `traits.address`.\n *\n * This *should* be an object, but may not be if the client isn't adhering to\n * the spec.\n *\n * @function\n * @return {object}\n */\ni.address = Facade.proxy(\"traits.address\");\n\n/**\n * Get the user's gender from `traits.gender`.\n *\n * This *should* be a string, but may not be if the client isn't adhering to\n * the spec.\n *\n * @function\n * @return {string}\n */\ni.gender = Facade.proxy(\"traits.gender\");\n\n/**\n * Get the user's birthday from `traits.birthday`.\n *\n * This *should* be a Date if `opts.traverse` was enabled (it is by default)\n * when letructing this Identify. Otherwise, it should be a string. But it\n * may be neither if the client isn't adhering to the spec.\n * spec.\n *\n * @function\n * @return {object}\n */\ni.birthday = Facade.proxy(\"traits.birthday\");\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}