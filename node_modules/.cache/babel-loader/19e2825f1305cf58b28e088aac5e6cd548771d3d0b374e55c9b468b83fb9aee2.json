{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport { v4 as uuid } from '@lukeed/uuid';\nimport { dset } from 'dset';\nimport md5 from 'spark-md5';\nimport { addPageContext } from '../page';\nexport * from './interfaces';\nvar EventFactory = /** @class */function () {\n  function EventFactory(user) {\n    this.user = user;\n  }\n  EventFactory.prototype.track = function (event, properties, options, globalIntegrations, pageCtx) {\n    return this.normalize(__assign(__assign({}, this.baseEvent()), {\n      event: event,\n      type: 'track',\n      properties: properties,\n      options: __assign({}, options),\n      integrations: __assign({}, globalIntegrations)\n    }), pageCtx);\n  };\n  EventFactory.prototype.page = function (category, page, properties, options, globalIntegrations, pageCtx) {\n    var _a;\n    var event = {\n      type: 'page',\n      properties: __assign({}, properties),\n      options: __assign({}, options),\n      integrations: __assign({}, globalIntegrations)\n    };\n    if (category !== null) {\n      event.category = category;\n      event.properties = (_a = event.properties) !== null && _a !== void 0 ? _a : {};\n      event.properties.category = category;\n    }\n    if (page !== null) {\n      event.name = page;\n    }\n    return this.normalize(__assign(__assign({}, this.baseEvent()), event), pageCtx);\n  };\n  EventFactory.prototype.screen = function (category, screen, properties, options, globalIntegrations, pageCtx) {\n    var event = {\n      type: 'screen',\n      properties: __assign({}, properties),\n      options: __assign({}, options),\n      integrations: __assign({}, globalIntegrations)\n    };\n    if (category !== null) {\n      event.category = category;\n    }\n    if (screen !== null) {\n      event.name = screen;\n    }\n    return this.normalize(__assign(__assign({}, this.baseEvent()), event), pageCtx);\n  };\n  EventFactory.prototype.identify = function (userId, traits, options, globalIntegrations, pageCtx) {\n    return this.normalize(__assign(__assign({}, this.baseEvent()), {\n      type: 'identify',\n      userId: userId,\n      traits: traits,\n      options: __assign({}, options),\n      integrations: __assign({}, globalIntegrations)\n    }), pageCtx);\n  };\n  EventFactory.prototype.group = function (groupId, traits, options, globalIntegrations, pageCtx) {\n    return this.normalize(__assign(__assign({}, this.baseEvent()), {\n      type: 'group',\n      traits: traits,\n      options: __assign({}, options),\n      integrations: __assign({}, globalIntegrations),\n      groupId: groupId\n    }), pageCtx);\n  };\n  EventFactory.prototype.alias = function (to, from, options, globalIntegrations, pageCtx) {\n    var base = {\n      userId: to,\n      type: 'alias',\n      options: __assign({}, options),\n      integrations: __assign({}, globalIntegrations)\n    };\n    if (from !== null) {\n      base.previousId = from;\n    }\n    if (to === undefined) {\n      return this.normalize(__assign(__assign({}, base), this.baseEvent()));\n    }\n    return this.normalize(__assign(__assign({}, this.baseEvent()), base), pageCtx);\n  };\n  EventFactory.prototype.baseEvent = function () {\n    var base = {\n      integrations: {},\n      options: {}\n    };\n    var user = this.user;\n    if (user.id()) {\n      base.userId = user.id();\n    }\n    if (user.anonymousId()) {\n      base.anonymousId = user.anonymousId();\n    }\n    return base;\n  };\n  /**\n   * Builds the context part of an event based on \"foreign\" keys that\n   * are provided in the `Options` parameter for an Event\n   */\n  EventFactory.prototype.context = function (event) {\n    var _a, _b, _c;\n    var optionsKeys = ['integrations', 'anonymousId', 'timestamp', 'userId'];\n    var options = (_a = event.options) !== null && _a !== void 0 ? _a : {};\n    delete options['integrations'];\n    var providedOptionsKeys = Object.keys(options);\n    var context = (_c = (_b = event.options) === null || _b === void 0 ? void 0 : _b.context) !== null && _c !== void 0 ? _c : {};\n    var overrides = {};\n    providedOptionsKeys.forEach(function (key) {\n      if (key === 'context') {\n        return;\n      }\n      if (optionsKeys.includes(key)) {\n        dset(overrides, key, options[key]);\n      } else {\n        dset(context, key, options[key]);\n      }\n    });\n    return [context, overrides];\n  };\n  EventFactory.prototype.normalize = function (event, pageCtx) {\n    var _a, _b, _c;\n    // set anonymousId globally if we encounter an override\n    //segment.com/docs/connections/sources/catalog/libraries/website/javascript/identity/#override-the-anonymous-id-using-the-options-object\n    ((_a = event.options) === null || _a === void 0 ? void 0 : _a.anonymousId) && this.user.anonymousId(event.options.anonymousId);\n    var integrationBooleans = Object.keys((_b = event.integrations) !== null && _b !== void 0 ? _b : {}).reduce(function (integrationNames, name) {\n      var _a;\n      var _b;\n      return __assign(__assign({}, integrationNames), (_a = {}, _a[name] = Boolean((_b = event.integrations) === null || _b === void 0 ? void 0 : _b[name]), _a));\n    }, {});\n    // This is pretty trippy, but here's what's going on:\n    // - a) We don't pass initial integration options as part of the event, only if they're true or false\n    // - b) We do accept per integration overrides (like integrations.Amplitude.sessionId) at the event level\n    // Hence the need to convert base integration options to booleans, but maintain per event integration overrides\n    var allIntegrations = __assign(__assign({}, integrationBooleans), (_c = event.options) === null || _c === void 0 ? void 0 : _c.integrations);\n    var _d = this.context(event),\n      context = _d[0],\n      overrides = _d[1];\n    var options = event.options,\n      rest = __rest(event, [\"options\"]);\n    var newEvent = __assign(__assign(__assign(__assign({\n      timestamp: new Date()\n    }, rest), {\n      context: context,\n      integrations: allIntegrations\n    }), overrides), {\n      messageId: 'ajs-next-' + md5.hash(JSON.stringify(event) + uuid())\n    });\n    addPageContext(newEvent, pageCtx);\n    return newEvent;\n  };\n  return EventFactory;\n}();\nexport { EventFactory };","map":{"version":3,"names":["v4","uuid","dset","md5","addPageContext","EventFactory","user","prototype","track","event","properties","options","globalIntegrations","pageCtx","normalize","__assign","baseEvent","type","integrations","page","category","_a","name","screen","identify","userId","traits","group","groupId","alias","to","from","base","previousId","undefined","id","anonymousId","context","optionsKeys","providedOptionsKeys","Object","keys","_c","_b","overrides","forEach","key","includes","integrationBooleans","reduce","integrationNames","Boolean","allIntegrations","_d","rest","__rest","newEvent","timestamp","Date","messageId","hash","JSON","stringify"],"sources":["/Users/bcaudillo/Desktop/Projects/todo/node_modules/@segment/analytics-next/src/core/events/index.ts"],"sourcesContent":["import { v4 as uuid } from '@lukeed/uuid'\nimport { dset } from 'dset'\nimport { ID, User } from '../user'\nimport {\n  Options,\n  Integrations,\n  EventProperties,\n  Traits,\n  SegmentEvent,\n} from './interfaces'\nimport md5 from 'spark-md5'\nimport { addPageContext, PageContext } from '../page'\n\nexport * from './interfaces'\n\nexport class EventFactory {\n  constructor(public user: User) {}\n\n  track(\n    event: string,\n    properties?: EventProperties,\n    options?: Options,\n    globalIntegrations?: Integrations,\n    pageCtx?: PageContext\n  ): SegmentEvent {\n    return this.normalize(\n      {\n        ...this.baseEvent(),\n        event,\n        type: 'track' as const,\n        properties,\n        options: { ...options },\n        integrations: { ...globalIntegrations },\n      },\n      pageCtx\n    )\n  }\n\n  page(\n    category: string | null,\n    page: string | null,\n    properties?: EventProperties,\n    options?: Options,\n    globalIntegrations?: Integrations,\n    pageCtx?: PageContext\n  ): SegmentEvent {\n    const event: Partial<SegmentEvent> = {\n      type: 'page' as const,\n      properties: { ...properties },\n      options: { ...options },\n      integrations: { ...globalIntegrations },\n    }\n\n    if (category !== null) {\n      event.category = category\n      event.properties = event.properties ?? {}\n      event.properties.category = category\n    }\n\n    if (page !== null) {\n      event.name = page\n    }\n\n    return this.normalize(\n      {\n        ...this.baseEvent(),\n        ...event,\n      } as SegmentEvent,\n      pageCtx\n    )\n  }\n\n  screen(\n    category: string | null,\n    screen: string | null,\n    properties?: EventProperties,\n    options?: Options,\n    globalIntegrations?: Integrations,\n    pageCtx?: PageContext\n  ): SegmentEvent {\n    const event: Partial<SegmentEvent> = {\n      type: 'screen' as const,\n      properties: { ...properties },\n      options: { ...options },\n      integrations: { ...globalIntegrations },\n    }\n\n    if (category !== null) {\n      event.category = category\n    }\n\n    if (screen !== null) {\n      event.name = screen\n    }\n    return this.normalize(\n      {\n        ...this.baseEvent(),\n        ...event,\n      } as SegmentEvent,\n      pageCtx\n    )\n  }\n\n  identify(\n    userId: ID,\n    traits?: Traits,\n    options?: Options,\n    globalIntegrations?: Integrations,\n    pageCtx?: PageContext\n  ): SegmentEvent {\n    return this.normalize(\n      {\n        ...this.baseEvent(),\n        type: 'identify' as const,\n        userId,\n        traits,\n        options: { ...options },\n        integrations: { ...globalIntegrations },\n      },\n      pageCtx\n    )\n  }\n\n  group(\n    groupId: ID,\n    traits?: Traits,\n    options?: Options,\n    globalIntegrations?: Integrations,\n    pageCtx?: PageContext\n  ): SegmentEvent {\n    return this.normalize(\n      {\n        ...this.baseEvent(),\n        type: 'group' as const,\n        traits,\n        options: { ...options },\n        integrations: { ...globalIntegrations },\n        groupId,\n      },\n      pageCtx\n    )\n  }\n\n  alias(\n    to: string,\n    from: string | null,\n    options?: Options,\n    globalIntegrations?: Integrations,\n    pageCtx?: PageContext\n  ): SegmentEvent {\n    const base: Partial<SegmentEvent> = {\n      userId: to,\n      type: 'alias' as const,\n      options: { ...options },\n      integrations: { ...globalIntegrations },\n    }\n\n    if (from !== null) {\n      base.previousId = from\n    }\n\n    if (to === undefined) {\n      return this.normalize({\n        ...base,\n        ...this.baseEvent(),\n      } as SegmentEvent)\n    }\n\n    return this.normalize(\n      {\n        ...this.baseEvent(),\n        ...base,\n      } as SegmentEvent,\n      pageCtx\n    )\n  }\n\n  private baseEvent(): Partial<SegmentEvent> {\n    const base: Partial<SegmentEvent> = {\n      integrations: {},\n      options: {},\n    }\n\n    const user = this.user\n\n    if (user.id()) {\n      base.userId = user.id()\n    }\n\n    if (user.anonymousId()) {\n      base.anonymousId = user.anonymousId()\n    }\n\n    return base\n  }\n\n  /**\n   * Builds the context part of an event based on \"foreign\" keys that\n   * are provided in the `Options` parameter for an Event\n   */\n  private context(event: SegmentEvent): [object, object] {\n    const optionsKeys = ['integrations', 'anonymousId', 'timestamp', 'userId']\n\n    const options = event.options ?? {}\n    delete options['integrations']\n\n    const providedOptionsKeys = Object.keys(options)\n\n    const context = event.options?.context ?? {}\n    const overrides = {}\n\n    providedOptionsKeys.forEach((key) => {\n      if (key === 'context') {\n        return\n      }\n\n      if (optionsKeys.includes(key)) {\n        dset(overrides, key, options[key])\n      } else {\n        dset(context, key, options[key])\n      }\n    })\n\n    return [context, overrides]\n  }\n\n  public normalize(event: SegmentEvent, pageCtx?: PageContext): SegmentEvent {\n    // set anonymousId globally if we encounter an override\n    //segment.com/docs/connections/sources/catalog/libraries/website/javascript/identity/#override-the-anonymous-id-using-the-options-object\n    event.options?.anonymousId &&\n      this.user.anonymousId(event.options.anonymousId)\n\n    const integrationBooleans = Object.keys(event.integrations ?? {}).reduce(\n      (integrationNames, name) => {\n        return {\n          ...integrationNames,\n          [name]: Boolean(event.integrations?.[name]),\n        }\n      },\n      {} as Record<string, boolean>\n    )\n\n    // This is pretty trippy, but here's what's going on:\n    // - a) We don't pass initial integration options as part of the event, only if they're true or false\n    // - b) We do accept per integration overrides (like integrations.Amplitude.sessionId) at the event level\n    // Hence the need to convert base integration options to booleans, but maintain per event integration overrides\n    const allIntegrations = {\n      // Base config integrations object as booleans\n      ...integrationBooleans,\n\n      // Per event overrides, for things like amplitude sessionId, for example\n      ...event.options?.integrations,\n    }\n\n    const [context, overrides] = this.context(event)\n    const { options, ...rest } = event\n\n    const newEvent: SegmentEvent = {\n      timestamp: new Date(),\n      ...rest,\n      context,\n      integrations: allIntegrations,\n      ...overrides,\n      messageId: 'ajs-next-' + md5.hash(JSON.stringify(event) + uuid()),\n    }\n    addPageContext(newEvent, pageCtx)\n\n    return newEvent\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}