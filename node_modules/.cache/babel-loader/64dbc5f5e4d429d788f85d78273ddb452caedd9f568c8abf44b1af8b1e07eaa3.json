{"ast":null,"code":"'use strict';\n\n/**\n * Matcher, slightly modified from:\n *\n * https://github.com/csnover/js-iso8601/blob/lax/iso8601.js\n */\nvar matcher = /^(\\d{4})(?:-?(\\d{2})(?:-?(\\d{2}))?)?(?:([ T])(\\d{2}):?(\\d{2})(?::?(\\d{2})(?:[,\\.](\\d{1,}))?)?(?:(Z)|([+\\-])(\\d{2})(?::?(\\d{2}))?)?)?$/;\n\n/**\n * Convert an ISO date string to a date. Fallback to native `Date.parse`.\n *\n * https://github.com/csnover/js-iso8601/blob/lax/iso8601.js\n *\n * @param {String} iso\n * @return {Date}\n */\n\nexports.parse = function (iso) {\n  var numericKeys = [1, 5, 6, 7, 11, 12];\n  var arr = matcher.exec(iso);\n  var offset = 0;\n\n  // fallback to native parsing\n  if (!arr) {\n    return new Date(iso);\n  }\n\n  /* eslint-disable no-cond-assign */\n  // remove undefined values\n  for (var i = 0, val; val = numericKeys[i]; i++) {\n    arr[val] = parseInt(arr[val], 10) || 0;\n  }\n  /* eslint-enable no-cond-assign */\n\n  // allow undefined days and months\n  arr[2] = parseInt(arr[2], 10) || 1;\n  arr[3] = parseInt(arr[3], 10) || 1;\n\n  // month is 0-11\n  arr[2]--;\n\n  // allow abitrary sub-second precision\n  arr[8] = arr[8] ? (arr[8] + '00').substring(0, 3) : 0;\n\n  // apply timezone if one exists\n  if (arr[4] === ' ') {\n    offset = new Date().getTimezoneOffset();\n  } else if (arr[9] !== 'Z' && arr[10]) {\n    offset = arr[11] * 60 + arr[12];\n    if (arr[10] === '+') {\n      offset = 0 - offset;\n    }\n  }\n  var millis = Date.UTC(arr[1], arr[2], arr[3], arr[5], arr[6] + offset, arr[7], arr[8]);\n  return new Date(millis);\n};\n\n/**\n * Checks whether a `string` is an ISO date string. `strict` mode requires that\n * the date string at least have a year, month and date.\n *\n * @param {String} string\n * @param {Boolean} strict\n * @return {Boolean}\n */\n\nexports.is = function (string, strict) {\n  if (typeof string !== 'string') {\n    return false;\n  }\n  if (strict && /^\\d{4}-\\d{2}-\\d{2}/.test(string) === false) {\n    return false;\n  }\n  return matcher.test(string);\n};","map":{"version":3,"names":["matcher","exports","parse","iso","numericKeys","arr","exec","offset","Date","i","val","parseInt","substring","getTimezoneOffset","millis","UTC","is","string","strict","test"],"sources":["/Users/bcaudillo/Desktop/Projects/todo/node_modules/@segment/isodate/lib/index.js"],"sourcesContent":["'use strict';\n\n/**\n * Matcher, slightly modified from:\n *\n * https://github.com/csnover/js-iso8601/blob/lax/iso8601.js\n */\n\nvar matcher = /^(\\d{4})(?:-?(\\d{2})(?:-?(\\d{2}))?)?(?:([ T])(\\d{2}):?(\\d{2})(?::?(\\d{2})(?:[,\\.](\\d{1,}))?)?(?:(Z)|([+\\-])(\\d{2})(?::?(\\d{2}))?)?)?$/;\n\n/**\n * Convert an ISO date string to a date. Fallback to native `Date.parse`.\n *\n * https://github.com/csnover/js-iso8601/blob/lax/iso8601.js\n *\n * @param {String} iso\n * @return {Date}\n */\n\nexports.parse = function(iso) {\n  var numericKeys = [1, 5, 6, 7, 11, 12];\n  var arr = matcher.exec(iso);\n  var offset = 0;\n\n  // fallback to native parsing\n  if (!arr) {\n    return new Date(iso);\n  }\n\n  /* eslint-disable no-cond-assign */\n  // remove undefined values\n  for (var i = 0, val; val = numericKeys[i]; i++) {\n    arr[val] = parseInt(arr[val], 10) || 0;\n  }\n  /* eslint-enable no-cond-assign */\n\n  // allow undefined days and months\n  arr[2] = parseInt(arr[2], 10) || 1;\n  arr[3] = parseInt(arr[3], 10) || 1;\n\n  // month is 0-11\n  arr[2]--;\n\n  // allow abitrary sub-second precision\n  arr[8] = arr[8] ? (arr[8] + '00').substring(0, 3) : 0;\n\n  // apply timezone if one exists\n  if (arr[4] === ' ') {\n    offset = new Date().getTimezoneOffset();\n  } else if (arr[9] !== 'Z' && arr[10]) {\n    offset = arr[11] * 60 + arr[12];\n    if (arr[10] === '+') {\n      offset = 0 - offset;\n    }\n  }\n\n  var millis = Date.UTC(arr[1], arr[2], arr[3], arr[5], arr[6] + offset, arr[7], arr[8]);\n  return new Date(millis);\n};\n\n\n/**\n * Checks whether a `string` is an ISO date string. `strict` mode requires that\n * the date string at least have a year, month and date.\n *\n * @param {String} string\n * @param {Boolean} strict\n * @return {Boolean}\n */\n\nexports.is = function(string, strict) {\n  if (typeof string !== 'string') {\n    return false;\n  }\n  if (strict && (/^\\d{4}-\\d{2}-\\d{2}/).test(string) === false) {\n    return false;\n  }\n  return matcher.test(string);\n};\n"],"mappings":"AAAA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AAEA,IAAIA,OAAO,GAAG,uIAAuI;;AAErJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAC,OAAO,CAACC,KAAK,GAAG,UAASC,GAAG,EAAE;EAC5B,IAAIC,WAAW,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC;EACtC,IAAIC,GAAG,GAAGL,OAAO,CAACM,IAAI,CAACH,GAAG,CAAC;EAC3B,IAAII,MAAM,GAAG,CAAC;;EAEd;EACA,IAAI,CAACF,GAAG,EAAE;IACR,OAAO,IAAIG,IAAI,CAACL,GAAG,CAAC;EACtB;;EAEA;EACA;EACA,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEC,GAAG,EAAEA,GAAG,GAAGN,WAAW,CAACK,CAAC,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC9CJ,GAAG,CAACK,GAAG,CAAC,GAAGC,QAAQ,CAACN,GAAG,CAACK,GAAG,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC;EACxC;EACA;;EAEA;EACAL,GAAG,CAAC,CAAC,CAAC,GAAGM,QAAQ,CAACN,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC;EAClCA,GAAG,CAAC,CAAC,CAAC,GAAGM,QAAQ,CAACN,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC;;EAElC;EACAA,GAAG,CAAC,CAAC,CAAC,EAAE;;EAER;EACAA,GAAG,CAAC,CAAC,CAAC,GAAGA,GAAG,CAAC,CAAC,CAAC,GAAG,CAACA,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,EAAEO,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC;;EAErD;EACA,IAAIP,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;IAClBE,MAAM,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACK,iBAAiB,CAAC,CAAC;EACzC,CAAC,MAAM,IAAIR,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,IAAIA,GAAG,CAAC,EAAE,CAAC,EAAE;IACpCE,MAAM,GAAGF,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAGA,GAAG,CAAC,EAAE,CAAC;IAC/B,IAAIA,GAAG,CAAC,EAAE,CAAC,KAAK,GAAG,EAAE;MACnBE,MAAM,GAAG,CAAC,GAAGA,MAAM;IACrB;EACF;EAEA,IAAIO,MAAM,GAAGN,IAAI,CAACO,GAAG,CAACV,GAAG,CAAC,CAAC,CAAC,EAAEA,GAAG,CAAC,CAAC,CAAC,EAAEA,GAAG,CAAC,CAAC,CAAC,EAAEA,GAAG,CAAC,CAAC,CAAC,EAAEA,GAAG,CAAC,CAAC,CAAC,GAAGE,MAAM,EAAEF,GAAG,CAAC,CAAC,CAAC,EAAEA,GAAG,CAAC,CAAC,CAAC,CAAC;EACtF,OAAO,IAAIG,IAAI,CAACM,MAAM,CAAC;AACzB,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAb,OAAO,CAACe,EAAE,GAAG,UAASC,MAAM,EAAEC,MAAM,EAAE;EACpC,IAAI,OAAOD,MAAM,KAAK,QAAQ,EAAE;IAC9B,OAAO,KAAK;EACd;EACA,IAAIC,MAAM,IAAK,oBAAoB,CAAEC,IAAI,CAACF,MAAM,CAAC,KAAK,KAAK,EAAE;IAC3D,OAAO,KAAK;EACd;EACA,OAAOjB,OAAO,CAACmB,IAAI,CAACF,MAAM,CAAC;AAC7B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}