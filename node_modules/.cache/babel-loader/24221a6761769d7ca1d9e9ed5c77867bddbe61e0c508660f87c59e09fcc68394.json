{"ast":null,"code":"/**\n * Returns an object containing only the properties prefixed by the input\n * string.\n * Ex: prefix('ajs_traits_', { ajs_traits_address: '123 St' })\n * will return { address: '123 St' }\n **/\nexport function pickPrefix(prefix, object) {\n  return Object.keys(object).reduce(function (acc, key) {\n    if (key.startsWith(prefix)) {\n      var field = key.substr(prefix.length);\n      acc[field] = object[key];\n    }\n    return acc;\n  }, {});\n}","map":{"version":3,"names":["pickPrefix","prefix","object","Object","keys","reduce","acc","key","startsWith","field","substr","length"],"sources":["/Users/bcaudillo/Desktop/Projects/todo/node_modules/@segment/analytics-next/src/core/query-string/pickPrefix.ts"],"sourcesContent":["import { QueryStringParams } from '.'\n\n/**\n * Returns an object containing only the properties prefixed by the input\n * string.\n * Ex: prefix('ajs_traits_', { ajs_traits_address: '123 St' })\n * will return { address: '123 St' }\n **/\nexport function pickPrefix(\n  prefix: string,\n  object: QueryStringParams\n): QueryStringParams {\n  return Object.keys(object).reduce((acc: QueryStringParams, key: string) => {\n    if (key.startsWith(prefix)) {\n      const field = key.substr(prefix.length)\n      acc[field] = object[key]!\n    }\n    return acc\n  }, {})\n}\n"],"mappings":"AAEA;;;;;;AAMA,OAAM,SAAUA,UAAUA,CACxBC,MAAc,EACdC,MAAyB;EAEzB,OAAOC,MAAM,CAACC,IAAI,CAACF,MAAM,CAAC,CAACG,MAAM,CAAC,UAACC,GAAsB,EAAEC,GAAW;IACpE,IAAIA,GAAG,CAACC,UAAU,CAACP,MAAM,CAAC,EAAE;MAC1B,IAAMQ,KAAK,GAAGF,GAAG,CAACG,MAAM,CAACT,MAAM,CAACU,MAAM,CAAC;MACvCL,GAAG,CAACG,KAAK,CAAC,GAAGP,MAAM,CAACK,GAAG,CAAE;;IAE3B,OAAOD,GAAG;EACZ,CAAC,EAAE,EAAE,CAAC;AACR","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}