{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["/Users/bcaudillo/Desktop/Projects/todo/node_modules/@segment/analytics-core/src/plugins/index.ts"],"sourcesContent":["import type { CoreAnalytics } from '../analytics'\nimport type { CoreContext } from '../context'\n\ninterface CorePluginConfig {\n  options: any\n  priority: 'critical' | 'non-critical' // whether AJS should expect this plugin to be loaded before starting event delivery\n}\n\nexport type PluginType =\n  | 'before'\n  | 'after'\n  | 'destination'\n  | 'enrichment'\n  | 'utility'\n\n// enrichment - modifies the event. Enrichment can happen in parallel, by reducing all changes in the final event. Failures in this stage could halt event delivery.\n// destination - runs in parallel at the end of the lifecycle. Cannot modify the event, can fail and not halt execution.\n// utility - do not affect lifecycle. Should be run and executed once. Their `track/identify` calls don't really do anything. example\n\nexport interface CorePlugin<\n  Ctx extends CoreContext = CoreContext,\n  Analytics extends CoreAnalytics = any\n> {\n  name: string\n  alternativeNames?: string[]\n  version: string\n  type: PluginType\n  isLoaded: () => boolean\n  load: (\n    ctx: Ctx,\n    instance: Analytics,\n    config?: CorePluginConfig\n  ) => Promise<unknown>\n\n  unload?: (ctx: Ctx, instance: Analytics) => Promise<unknown> | unknown\n  ready?: () => Promise<unknown>\n  track?: (ctx: Ctx) => Promise<Ctx> | Ctx\n  identify?: (ctx: Ctx) => Promise<Ctx> | Ctx\n  page?: (ctx: Ctx) => Promise<Ctx> | Ctx\n  group?: (ctx: Ctx) => Promise<Ctx> | Ctx\n  alias?: (ctx: Ctx) => Promise<Ctx> | Ctx\n  screen?: (ctx: Ctx) => Promise<Ctx> | Ctx\n}\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}