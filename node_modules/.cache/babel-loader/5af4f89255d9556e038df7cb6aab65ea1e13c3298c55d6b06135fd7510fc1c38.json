{"ast":null,"code":"export function backoff(params) {\n  var random = Math.random() + 1;\n  var _a = params.minTimeout,\n    minTimeout = _a === void 0 ? 500 : _a,\n    _b = params.factor,\n    factor = _b === void 0 ? 2 : _b,\n    attempt = params.attempt,\n    _c = params.maxTimeout,\n    maxTimeout = _c === void 0 ? Infinity : _c;\n  return Math.min(random * minTimeout * Math.pow(factor, attempt), maxTimeout);\n}","map":{"version":3,"names":["backoff","params","random","Math","_a","minTimeout","_b","factor","attempt","_c","maxTimeout","Infinity","min","pow"],"sources":["/Users/bcaudillo/Desktop/Projects/todo/node_modules/@segment/analytics-core/src/priority-queue/backoff.ts"],"sourcesContent":["type BackoffParams = {\n  /** The number of milliseconds before starting the first retry. Default is 500 */\n  minTimeout?: number\n\n  /** The maximum number of milliseconds between two retries. Default is Infinity */\n  maxTimeout?: number\n\n  /** The exponential factor to use. Default is 2. */\n  factor?: number\n\n  /** The current attempt */\n  attempt: number\n}\n\nexport function backoff(params: BackoffParams): number {\n  const random = Math.random() + 1\n  const {\n    minTimeout = 500,\n    factor = 2,\n    attempt,\n    maxTimeout = Infinity,\n  } = params\n  return Math.min(random * minTimeout * Math.pow(factor, attempt), maxTimeout)\n}\n"],"mappings":"AAcA,OAAM,SAAUA,OAAOA,CAACC,MAAqB;EAC3C,IAAMC,MAAM,GAAGC,IAAI,CAACD,MAAM,EAAE,GAAG,CAAC;EAE9B,IAAAE,EAAA,GAIEH,MAAM,CAAAI,UAJQ;IAAhBA,UAAU,GAAAD,EAAA,cAAG,GAAG,GAAAA,EAAA;IAChBE,EAAA,GAGEL,MAAM,CAAAM,MAHE;IAAVA,MAAM,GAAAD,EAAA,cAAG,CAAC,GAAAA,EAAA;IACVE,OAAO,GAELP,MAAM,CAAAO,OAFD;IACPC,EAAA,GACER,MAAM,CAAAS,UADa;IAArBA,UAAU,GAAAD,EAAA,cAAGE,QAAQ,GAAAF,EAAA;EAEvB,OAAON,IAAI,CAACS,GAAG,CAACV,MAAM,GAAGG,UAAU,GAAGF,IAAI,CAACU,GAAG,CAACN,MAAM,EAAEC,OAAO,CAAC,EAAEE,UAAU,CAAC;AAC9E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}