{"ast":null,"code":"/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar FLOAT64_SMALLEST_NORMAL = require('@stdlib/constants-float64-smallest-normal');\nvar isInfinite = require('@stdlib/math-base-assert-is-infinite');\nvar isnan = require('@stdlib/math-base-assert-is-nan');\nvar abs = require('@stdlib/math-base-special-abs');\n\n// VARIABLES //\n\n// (1<<52)\nvar SCALAR = 4503599627370496;\n\n// MAIN //\n\n/**\n* Returns a normal number `y` and exponent `exp` satisfying \\\\(x = y \\cdot 2^\\mathrm{exp}\\\\) and assigns results to a provided output array.\n*\n* @param {number} x - input value\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array index offset\n* @returns {Collection} output array\n*\n* @example\n* var pow = require( '@stdlib/math-base-special-pow' );\n*\n* var out = normalize( 3.14e-319, [ 0.0, 0 ], 1, 0 );\n* // returns [ 1.4141234400356668e-303, -52 ]\n*\n* var y = out[ 0 ];\n* var exp = out[ 1 ];\n*\n* var bool = ( y*pow(2.0,exp) === 3.14e-319 );\n* // returns true\n*\n* @example\n* var out = normalize( 0.0, [ 0.0, 0 ], 1, 0 );\n* // returns [ 0.0, 0 ];\n*\n* @example\n* var PINF = require( '@stdlib/constants-float64-pinf' );\n*\n* var out = normalize( PINF, [ 0.0, 0 ], 1, 0 );\n* // returns [ Infinity, 0 ]\n*\n* @example\n* var NINF = require( '@stdlib/constants-float64-ninf' );\n*\n* var out = normalize( NINF, [ 0.0, 0 ], 1, 0 );\n* // returns [ -Infinity, 0 ]\n*\n* @example\n* var out = normalize( NaN, [ 0.0, 0 ], 1, 0 );\n* // returns [ NaN, 0 ]\n*/\nfunction normalize(x, out, stride, offset) {\n  if (isnan(x) || isInfinite(x)) {\n    out[offset] = x;\n    out[offset + stride] = 0;\n    return out;\n  }\n  if (x !== 0.0 && abs(x) < FLOAT64_SMALLEST_NORMAL) {\n    out[offset] = x * SCALAR;\n    out[offset + stride] = -52;\n    return out;\n  }\n  out[offset] = x;\n  out[offset + stride] = 0;\n  return out;\n}\n\n// EXPORTS //\n\nmodule.exports = normalize;","map":{"version":3,"names":["FLOAT64_SMALLEST_NORMAL","require","isInfinite","isnan","abs","SCALAR","normalize","x","out","stride","offset","module","exports"],"sources":["/Users/bcaudillo/Desktop/Projects/todo/node_modules/@stdlib/number-float64-base-normalize/lib/assign.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar FLOAT64_SMALLEST_NORMAL = require( '@stdlib/constants-float64-smallest-normal' );\nvar isInfinite = require( '@stdlib/math-base-assert-is-infinite' );\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar abs = require( '@stdlib/math-base-special-abs' );\n\n\n// VARIABLES //\n\n// (1<<52)\nvar SCALAR = 4503599627370496;\n\n\n// MAIN //\n\n/**\n* Returns a normal number `y` and exponent `exp` satisfying \\\\(x = y \\cdot 2^\\mathrm{exp}\\\\) and assigns results to a provided output array.\n*\n* @param {number} x - input value\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array index offset\n* @returns {Collection} output array\n*\n* @example\n* var pow = require( '@stdlib/math-base-special-pow' );\n*\n* var out = normalize( 3.14e-319, [ 0.0, 0 ], 1, 0 );\n* // returns [ 1.4141234400356668e-303, -52 ]\n*\n* var y = out[ 0 ];\n* var exp = out[ 1 ];\n*\n* var bool = ( y*pow(2.0,exp) === 3.14e-319 );\n* // returns true\n*\n* @example\n* var out = normalize( 0.0, [ 0.0, 0 ], 1, 0 );\n* // returns [ 0.0, 0 ];\n*\n* @example\n* var PINF = require( '@stdlib/constants-float64-pinf' );\n*\n* var out = normalize( PINF, [ 0.0, 0 ], 1, 0 );\n* // returns [ Infinity, 0 ]\n*\n* @example\n* var NINF = require( '@stdlib/constants-float64-ninf' );\n*\n* var out = normalize( NINF, [ 0.0, 0 ], 1, 0 );\n* // returns [ -Infinity, 0 ]\n*\n* @example\n* var out = normalize( NaN, [ 0.0, 0 ], 1, 0 );\n* // returns [ NaN, 0 ]\n*/\nfunction normalize( x, out, stride, offset ) {\n\tif ( isnan( x ) || isInfinite( x ) ) {\n\t\tout[ offset ] = x;\n\t\tout[ offset + stride ] = 0;\n\t\treturn out;\n\t}\n\tif ( x !== 0.0 && abs( x ) < FLOAT64_SMALLEST_NORMAL ) {\n\t\tout[ offset ] = x * SCALAR;\n\t\tout[ offset + stride ] = -52;\n\t\treturn out;\n\t}\n\tout[ offset ] = x;\n\tout[ offset + stride ] = 0;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = normalize;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AAEA,IAAIA,uBAAuB,GAAGC,OAAO,CAAE,2CAA4C,CAAC;AACpF,IAAIC,UAAU,GAAGD,OAAO,CAAE,sCAAuC,CAAC;AAClE,IAAIE,KAAK,GAAGF,OAAO,CAAE,iCAAkC,CAAC;AACxD,IAAIG,GAAG,GAAGH,OAAO,CAAE,+BAAgC,CAAC;;AAGpD;;AAEA;AACA,IAAII,MAAM,GAAG,gBAAgB;;AAG7B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,SAASA,CAAEC,CAAC,EAAEC,GAAG,EAAEC,MAAM,EAAEC,MAAM,EAAG;EAC5C,IAAKP,KAAK,CAAEI,CAAE,CAAC,IAAIL,UAAU,CAAEK,CAAE,CAAC,EAAG;IACpCC,GAAG,CAAEE,MAAM,CAAE,GAAGH,CAAC;IACjBC,GAAG,CAAEE,MAAM,GAAGD,MAAM,CAAE,GAAG,CAAC;IAC1B,OAAOD,GAAG;EACX;EACA,IAAKD,CAAC,KAAK,GAAG,IAAIH,GAAG,CAAEG,CAAE,CAAC,GAAGP,uBAAuB,EAAG;IACtDQ,GAAG,CAAEE,MAAM,CAAE,GAAGH,CAAC,GAAGF,MAAM;IAC1BG,GAAG,CAAEE,MAAM,GAAGD,MAAM,CAAE,GAAG,CAAC,EAAE;IAC5B,OAAOD,GAAG;EACX;EACAA,GAAG,CAAEE,MAAM,CAAE,GAAGH,CAAC;EACjBC,GAAG,CAAEE,MAAM,GAAGD,MAAM,CAAE,GAAG,CAAC;EAC1B,OAAOD,GAAG;AACX;;AAGA;;AAEAG,MAAM,CAACC,OAAO,GAAGN,SAAS","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}