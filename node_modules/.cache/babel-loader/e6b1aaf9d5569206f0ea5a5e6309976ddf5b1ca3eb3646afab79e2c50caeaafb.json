{"ast":null,"code":"import { __assign, __awaiter, __extends, __generator, __spreadArray } from \"tslib\";\nimport { getProcessEnv } from '../lib/get-process-env';\nimport { getCDN, setGlobalCDNUrl } from '../lib/parse-cdn';\nimport { fetch } from '../lib/fetch';\nimport { Analytics, NullAnalytics } from '../core/analytics';\nimport { Context } from '../core/context';\nimport { mergedOptions } from '../lib/merged-options';\nimport { createDeferred } from '@segment/analytics-generic-utils';\nimport { envEnrichment } from '../plugins/env-enrichment';\nimport { remoteLoader } from '../plugins/remote-loader';\nimport { segmentio } from '../plugins/segmentio';\nimport { validation } from '../plugins/validation';\nimport { AnalyticsBuffered, flushAnalyticsCallsInNewTask, flushAddSourceMiddleware, flushSetAnonymousID, flushOn, PreInitMethodCall } from '../core/buffer';\nimport { attachInspector } from '../core/inspector';\nimport { Stats } from '../core/stats';\nimport { setGlobalAnalyticsKey } from '../lib/global-analytics-helper';\nexport function loadLegacySettings(writeKey, cdnURL) {\n  var baseUrl = cdnURL !== null && cdnURL !== void 0 ? cdnURL : getCDN();\n  return fetch(\"\".concat(baseUrl, \"/v1/projects/\").concat(writeKey, \"/settings\")).then(function (res) {\n    if (!res.ok) {\n      return res.text().then(function (errorResponseMessage) {\n        throw new Error(errorResponseMessage);\n      });\n    }\n    return res.json();\n  }).catch(function (err) {\n    console.error(err.message);\n    throw err;\n  });\n}\nfunction hasLegacyDestinations(settings) {\n  return getProcessEnv().NODE_ENV !== 'test' &&\n  // just one integration means segmentio\n  Object.keys(settings.integrations).length > 1;\n}\nfunction hasTsubMiddleware(settings) {\n  var _a, _b, _c;\n  return getProcessEnv().NODE_ENV !== 'test' && ((_c = (_b = (_a = settings.middlewareSettings) === null || _a === void 0 ? void 0 : _a.routingRules) === null || _b === void 0 ? void 0 : _b.length) !== null && _c !== void 0 ? _c : 0) > 0;\n}\n/**\n * With AJS classic, we allow users to call setAnonymousId before the library initialization.\n * This is important because some of the destinations will use the anonymousId during the initialization,\n * and if we set anonId afterwards, that wouldn’t impact the destination.\n *\n * Also Ensures events can be registered before library initialization.\n * This is important so users can register to 'initialize' and any events that may fire early during setup.\n */\nfunction flushPreBuffer(analytics, buffer) {\n  flushSetAnonymousID(analytics, buffer);\n  flushOn(analytics, buffer);\n}\n/**\n * Finish flushing buffer and cleanup.\n */\nfunction flushFinalBuffer(analytics, buffer) {\n  return __awaiter(this, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          // Call popSnippetWindowBuffer before each flush task since there may be\n          // analytics calls during async function calls.\n          return [4 /*yield*/, flushAddSourceMiddleware(analytics, buffer)];\n        case 1:\n          // Call popSnippetWindowBuffer before each flush task since there may be\n          // analytics calls during async function calls.\n          _a.sent();\n          flushAnalyticsCallsInNewTask(analytics, buffer);\n          // Clear buffer, just in case analytics is loaded twice; we don't want to fire events off again.\n          buffer.clear();\n          return [2 /*return*/];\n      }\n    });\n  });\n}\nfunction registerPlugins(writeKey, legacySettings, analytics, options, pluginLikes, legacyIntegrationSources) {\n  var _a, _b, _c;\n  if (pluginLikes === void 0) {\n    pluginLikes = [];\n  }\n  return __awaiter(this, void 0, void 0, function () {\n    var plugins, pluginSources, tsubMiddleware, _d, legacyDestinations, _e, schemaFilter, _f, mergedSettings, remotePlugins, toRegister, shouldIgnoreSegmentio, _g, _h, ctx;\n    var _this = this;\n    return __generator(this, function (_j) {\n      switch (_j.label) {\n        case 0:\n          plugins = pluginLikes === null || pluginLikes === void 0 ? void 0 : pluginLikes.filter(function (pluginLike) {\n            return typeof pluginLike === 'object';\n          });\n          pluginSources = pluginLikes === null || pluginLikes === void 0 ? void 0 : pluginLikes.filter(function (pluginLike) {\n            return typeof pluginLike === 'function' && typeof pluginLike.pluginName === 'string';\n          });\n          if (!hasTsubMiddleware(legacySettings)) return [3 /*break*/, 2];\n          return [4 /*yield*/, import( /* webpackChunkName: \"tsub-middleware\" */'../plugins/routing-middleware').then(function (mod) {\n            return mod.tsubMiddleware(legacySettings.middlewareSettings.routingRules);\n          })];\n        case 1:\n          _d = _j.sent();\n          return [3 /*break*/, 3];\n        case 2:\n          _d = undefined;\n          _j.label = 3;\n        case 3:\n          tsubMiddleware = _d;\n          if (!(hasLegacyDestinations(legacySettings) || legacyIntegrationSources.length > 0)) return [3 /*break*/, 5];\n          return [4 /*yield*/, import( /* webpackChunkName: \"ajs-destination\" */'../plugins/ajs-destination').then(function (mod) {\n            return mod.ajsDestinations(writeKey, legacySettings, analytics.integrations, options, tsubMiddleware, legacyIntegrationSources);\n          })];\n        case 4:\n          _e = _j.sent();\n          return [3 /*break*/, 6];\n        case 5:\n          _e = [];\n          _j.label = 6;\n        case 6:\n          legacyDestinations = _e;\n          if (!legacySettings.legacyVideoPluginsEnabled) return [3 /*break*/, 8];\n          return [4 /*yield*/, import( /* webpackChunkName: \"legacyVideos\" */'../plugins/legacy-video-plugins').then(function (mod) {\n            return mod.loadLegacyVideoPlugins(analytics);\n          })];\n        case 7:\n          _j.sent();\n          _j.label = 8;\n        case 8:\n          if (!((_a = options.plan) === null || _a === void 0 ? void 0 : _a.track)) return [3 /*break*/, 10];\n          return [4 /*yield*/, import( /* webpackChunkName: \"schemaFilter\" */'../plugins/schema-filter').then(function (mod) {\n            var _a;\n            return mod.schemaFilter((_a = options.plan) === null || _a === void 0 ? void 0 : _a.track, legacySettings);\n          })];\n        case 9:\n          _f = _j.sent();\n          return [3 /*break*/, 11];\n        case 10:\n          _f = undefined;\n          _j.label = 11;\n        case 11:\n          schemaFilter = _f;\n          mergedSettings = mergedOptions(legacySettings, options);\n          return [4 /*yield*/, remoteLoader(legacySettings, analytics.integrations, mergedSettings, options, tsubMiddleware, pluginSources).catch(function () {\n            return [];\n          })];\n        case 12:\n          remotePlugins = _j.sent();\n          toRegister = __spreadArray(__spreadArray(__spreadArray([validation, envEnrichment], plugins, true), legacyDestinations, true), remotePlugins, true);\n          if (schemaFilter) {\n            toRegister.push(schemaFilter);\n          }\n          shouldIgnoreSegmentio = ((_b = options.integrations) === null || _b === void 0 ? void 0 : _b.All) === false && !options.integrations['Segment.io'] || options.integrations && options.integrations['Segment.io'] === false;\n          if (!!shouldIgnoreSegmentio) return [3 /*break*/, 14];\n          _h = (_g = toRegister).push;\n          return [4 /*yield*/, segmentio(analytics, mergedSettings['Segment.io'], legacySettings.integrations)];\n        case 13:\n          _h.apply(_g, [_j.sent()]);\n          _j.label = 14;\n        case 14:\n          return [4 /*yield*/, analytics.register.apply(analytics, toRegister)];\n        case 15:\n          ctx = _j.sent();\n          if (!Object.entries((_c = legacySettings.enabledMiddleware) !== null && _c !== void 0 ? _c : {}).some(function (_a) {\n            var enabled = _a[1];\n            return enabled;\n          })) return [3 /*break*/, 17];\n          return [4 /*yield*/, import( /* webpackChunkName: \"remoteMiddleware\" */'../plugins/remote-middleware').then(function (_a) {\n            var remoteMiddlewares = _a.remoteMiddlewares;\n            return __awaiter(_this, void 0, void 0, function () {\n              var middleware, promises;\n              return __generator(this, function (_b) {\n                switch (_b.label) {\n                  case 0:\n                    return [4 /*yield*/, remoteMiddlewares(ctx, legacySettings, options.obfuscate)];\n                  case 1:\n                    middleware = _b.sent();\n                    promises = middleware.map(function (mdw) {\n                      return analytics.addSourceMiddleware(mdw);\n                    });\n                    return [2 /*return*/, Promise.all(promises)];\n                }\n              });\n            });\n          })];\n        case 16:\n          _j.sent();\n          _j.label = 17;\n        case 17:\n          return [2 /*return*/, ctx];\n      }\n    });\n  });\n}\nfunction loadAnalytics(settings, options, preInitBuffer) {\n  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n  if (options === void 0) {\n    options = {};\n  }\n  return __awaiter(this, void 0, void 0, function () {\n    var legacySettings, _l, disabled, retryQueue, analytics, plugins, classicIntegrations, segmentLoadOptions, ctx, search, hash, term;\n    return __generator(this, function (_m) {\n      switch (_m.label) {\n        case 0:\n          // return no-op analytics instance if disabled\n          if (options.disable === true) {\n            return [2 /*return*/, [new NullAnalytics(), Context.system()]];\n          }\n          if (options.globalAnalyticsKey) setGlobalAnalyticsKey(options.globalAnalyticsKey);\n          // this is an ugly side-effect, but it's for the benefits of the plugins that get their cdn via getCDN()\n          if (settings.cdnURL) setGlobalCDNUrl(settings.cdnURL);\n          if (options.initialPageview) {\n            // capture the page context early, so it's always up-to-date\n            preInitBuffer.push(new PreInitMethodCall('page', []));\n          }\n          if (!((_a = settings.cdnSettings) !== null && _a !== void 0)) return [3 /*break*/, 1];\n          _l = _a;\n          return [3 /*break*/, 3];\n        case 1:\n          return [4 /*yield*/, loadLegacySettings(settings.writeKey, settings.cdnURL)];\n        case 2:\n          _l = _m.sent();\n          _m.label = 3;\n        case 3:\n          legacySettings = _l;\n          if (options.updateCDNSettings) {\n            legacySettings = options.updateCDNSettings(legacySettings);\n          }\n          if (!(typeof options.disable === 'function')) return [3 /*break*/, 5];\n          return [4 /*yield*/, options.disable(legacySettings)];\n        case 4:\n          disabled = _m.sent();\n          if (disabled) {\n            return [2 /*return*/, [new NullAnalytics(), Context.system()]];\n          }\n          _m.label = 5;\n        case 5:\n          retryQueue = (_c = (_b = legacySettings.integrations['Segment.io']) === null || _b === void 0 ? void 0 : _b.retryQueue) !== null && _c !== void 0 ? _c : true;\n          options = __assign({\n            retryQueue: retryQueue\n          }, options);\n          analytics = new Analytics(settings, options);\n          attachInspector(analytics);\n          plugins = (_d = settings.plugins) !== null && _d !== void 0 ? _d : [];\n          classicIntegrations = (_e = settings.classicIntegrations) !== null && _e !== void 0 ? _e : [];\n          segmentLoadOptions = (_f = options.integrations) === null || _f === void 0 ? void 0 : _f['Segment.io'];\n          Stats.initRemoteMetrics(__assign(__assign({}, legacySettings.metrics), {\n            host: (_g = segmentLoadOptions === null || segmentLoadOptions === void 0 ? void 0 : segmentLoadOptions.apiHost) !== null && _g !== void 0 ? _g : (_h = legacySettings.metrics) === null || _h === void 0 ? void 0 : _h.host,\n            protocol: segmentLoadOptions === null || segmentLoadOptions === void 0 ? void 0 : segmentLoadOptions.protocol\n          }));\n          // needs to be flushed before plugins are registered\n          flushPreBuffer(analytics, preInitBuffer);\n          return [4 /*yield*/, registerPlugins(settings.writeKey, legacySettings, analytics, options, plugins, classicIntegrations)];\n        case 6:\n          ctx = _m.sent();\n          search = (_j = window.location.search) !== null && _j !== void 0 ? _j : '';\n          hash = (_k = window.location.hash) !== null && _k !== void 0 ? _k : '';\n          term = search.length ? search : hash.replace(/(?=#).*(?=\\?)/, '');\n          if (!term.includes('ajs_')) return [3 /*break*/, 8];\n          return [4 /*yield*/, analytics.queryString(term).catch(console.error)];\n        case 7:\n          _m.sent();\n          _m.label = 8;\n        case 8:\n          analytics.initialized = true;\n          analytics.emit('initialize', settings, options);\n          return [4 /*yield*/, flushFinalBuffer(analytics, preInitBuffer)];\n        case 9:\n          _m.sent();\n          return [2 /*return*/, [analytics, ctx]];\n      }\n    });\n  });\n}\n/**\n * The public browser interface for Segment Analytics\n *\n * @example\n * ```ts\n *  export const analytics = new AnalyticsBrowser()\n *  analytics.load({ writeKey: 'foo' })\n * ```\n * @link https://github.com/segmentio/analytics-next/#readme\n */\nvar AnalyticsBrowser = /** @class */function (_super) {\n  __extends(AnalyticsBrowser, _super);\n  function AnalyticsBrowser() {\n    var _this = this;\n    var _a = createDeferred(),\n      loadStart = _a.promise,\n      resolveLoadStart = _a.resolve;\n    _this = _super.call(this, function (buffer) {\n      return loadStart.then(function (_a) {\n        var settings = _a[0],\n          options = _a[1];\n        return loadAnalytics(settings, options, buffer);\n      });\n    }) || this;\n    _this._resolveLoadStart = function (settings, options) {\n      return resolveLoadStart([settings, options]);\n    };\n    return _this;\n  }\n  /**\n   * Fully initialize an analytics instance, including:\n   *\n   * * Fetching settings from the segment CDN (by default).\n   * * Fetching all remote destinations configured by the user (if applicable).\n   * * Flushing buffered analytics events.\n   * * Loading all middleware.\n   *\n   * Note:️  This method should only be called *once* in your application.\n   *\n   * @example\n   * ```ts\n   * export const analytics = new AnalyticsBrowser()\n   * analytics.load({ writeKey: 'foo' })\n   * ```\n   */\n  AnalyticsBrowser.prototype.load = function (settings, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    this._resolveLoadStart(settings, options);\n    return this;\n  };\n  /**\n   * Instantiates an object exposing Analytics methods.\n   *\n   * @example\n   * ```ts\n   * const ajs = AnalyticsBrowser.load({ writeKey: '<YOUR_WRITE_KEY>' })\n   *\n   * ajs.track(\"foo\")\n   * ...\n   * ```\n   */\n  AnalyticsBrowser.load = function (settings, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    return new AnalyticsBrowser().load(settings, options);\n  };\n  AnalyticsBrowser.standalone = function (writeKey, options) {\n    return AnalyticsBrowser.load({\n      writeKey: writeKey\n    }, options).then(function (res) {\n      return res[0];\n    });\n  };\n  return AnalyticsBrowser;\n}(AnalyticsBuffered);\nexport { AnalyticsBrowser };","map":{"version":3,"names":["getProcessEnv","getCDN","setGlobalCDNUrl","fetch","Analytics","NullAnalytics","Context","mergedOptions","createDeferred","envEnrichment","remoteLoader","segmentio","validation","AnalyticsBuffered","flushAnalyticsCallsInNewTask","flushAddSourceMiddleware","flushSetAnonymousID","flushOn","PreInitMethodCall","attachInspector","Stats","setGlobalAnalyticsKey","loadLegacySettings","writeKey","cdnURL","baseUrl","concat","then","res","ok","text","errorResponseMessage","Error","json","catch","err","console","error","message","hasLegacyDestinations","settings","NODE_ENV","Object","keys","integrations","length","hasTsubMiddleware","_c","_b","_a","middlewareSettings","routingRules","flushPreBuffer","analytics","buffer","flushFinalBuffer","sent","clear","registerPlugins","legacySettings","options","pluginLikes","legacyIntegrationSources","plugins","filter","pluginLike","pluginSources","pluginName","mod","tsubMiddleware","_d","_j","undefined","ajsDestinations","_e","legacyDestinations","legacyVideoPluginsEnabled","loadLegacyVideoPlugins","plan","track","schemaFilter","_f","mergedSettings","remotePlugins","toRegister","__spreadArray","push","shouldIgnoreSegmentio","All","_h","_g","apply","register","ctx","entries","enabledMiddleware","some","enabled","remoteMiddlewares","obfuscate","middleware","promises","map","mdw","addSourceMiddleware","Promise","all","loadAnalytics","preInitBuffer","disable","system","globalAnalyticsKey","initialPageview","cdnSettings","_l","_m","updateCDNSettings","disabled","retryQueue","__assign","classicIntegrations","segmentLoadOptions","initRemoteMetrics","metrics","host","apiHost","protocol","search","window","location","hash","_k","term","replace","includes","queryString","initialized","emit","AnalyticsBrowser","_super","__extends","_this","loadStart","promise","resolveLoadStart","resolve","call","_resolveLoadStart","prototype","load","standalone"],"sources":["/Users/bcaudillo/Desktop/Projects/todo/node_modules/@segment/analytics-next/src/browser/index.ts"],"sourcesContent":["import { getProcessEnv } from '../lib/get-process-env'\nimport { getCDN, setGlobalCDNUrl } from '../lib/parse-cdn'\n\nimport { fetch } from '../lib/fetch'\nimport {\n  Analytics,\n  AnalyticsSettings,\n  NullAnalytics,\n  InitOptions,\n} from '../core/analytics'\nimport { Context } from '../core/context'\nimport { Plan } from '../core/events'\nimport { Plugin } from '../core/plugin'\nimport { MetricsOptions } from '../core/stats/remote-metrics'\nimport { mergedOptions } from '../lib/merged-options'\nimport { createDeferred } from '@segment/analytics-generic-utils'\nimport { envEnrichment } from '../plugins/env-enrichment'\nimport {\n  PluginFactory,\n  remoteLoader,\n  RemotePlugin,\n} from '../plugins/remote-loader'\nimport type { RoutingRule } from '../plugins/routing-middleware'\nimport { segmentio, SegmentioSettings } from '../plugins/segmentio'\nimport { validation } from '../plugins/validation'\nimport {\n  AnalyticsBuffered,\n  PreInitMethodCallBuffer,\n  flushAnalyticsCallsInNewTask,\n  flushAddSourceMiddleware,\n  flushSetAnonymousID,\n  flushOn,\n  PreInitMethodCall,\n} from '../core/buffer'\nimport { ClassicIntegrationSource } from '../plugins/ajs-destination/types'\nimport { attachInspector } from '../core/inspector'\nimport { Stats } from '../core/stats'\nimport { setGlobalAnalyticsKey } from '../lib/global-analytics-helper'\n\nexport interface LegacyIntegrationConfiguration {\n  /* @deprecated - This does not indicate browser types anymore */\n  type?: string\n\n  versionSettings?: {\n    version?: string\n    override?: string\n    componentTypes?: Array<'browser' | 'android' | 'ios' | 'server'>\n  }\n\n  bundlingStatus?: string\n\n  /**\n   * Consent settings for the integration\n   */\n  consentSettings?: {\n    /**\n     * Consent categories for the integration\n     * @example [\"Analytics\", \"Advertising\", \"CAT001\"]\n     */\n    categories: string[]\n  }\n\n  // Segment.io specific\n  retryQueue?: boolean\n\n  // any extra unknown settings\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [key: string]: any\n}\n\nexport interface LegacySettings {\n  integrations: {\n    [name: string]: LegacyIntegrationConfiguration\n  }\n\n  middlewareSettings?: {\n    routingRules: RoutingRule[]\n  }\n\n  enabledMiddleware?: Record<string, boolean>\n  metrics?: MetricsOptions\n\n  plan?: Plan\n\n  legacyVideoPluginsEnabled?: boolean\n\n  remotePlugins?: RemotePlugin[]\n\n  /**\n   * Top level consent settings\n   */\n  consentSettings?: {\n    /**\n     * All unique consent categories for enabled destinations.\n     * There can be categories in this array that are important for consent that are not included in any integration  (e.g. 2 cloud mode categories).\n     * @example [\"Analytics\", \"Advertising\", \"CAT001\"]\n     */\n    allCategories: string[]\n\n    /**\n     * Whether or not there are any unmapped destinations for enabled destinations.\n     */\n    hasUnmappedDestinations: boolean\n  }\n}\n\nexport interface AnalyticsBrowserSettings extends AnalyticsSettings {\n  /**\n   * The settings for the Segment Source.\n   * If provided, `AnalyticsBrowser` will not fetch remote settings\n   * for the source.\n   */\n  cdnSettings?: LegacySettings & Record<string, unknown>\n  /**\n   * If provided, will override the default Segment CDN (https://cdn.segment.com) for this application.\n   */\n  cdnURL?: string\n}\n\nexport function loadLegacySettings(\n  writeKey: string,\n  cdnURL?: string\n): Promise<LegacySettings> {\n  const baseUrl = cdnURL ?? getCDN()\n\n  return fetch(`${baseUrl}/v1/projects/${writeKey}/settings`)\n    .then((res) => {\n      if (!res.ok) {\n        return res.text().then((errorResponseMessage) => {\n          throw new Error(errorResponseMessage)\n        })\n      }\n      return res.json()\n    })\n    .catch((err) => {\n      console.error(err.message)\n      throw err\n    })\n}\n\nfunction hasLegacyDestinations(settings: LegacySettings): boolean {\n  return (\n    getProcessEnv().NODE_ENV !== 'test' &&\n    // just one integration means segmentio\n    Object.keys(settings.integrations).length > 1\n  )\n}\n\nfunction hasTsubMiddleware(settings: LegacySettings): boolean {\n  return (\n    getProcessEnv().NODE_ENV !== 'test' &&\n    (settings.middlewareSettings?.routingRules?.length ?? 0) > 0\n  )\n}\n\n/**\n * With AJS classic, we allow users to call setAnonymousId before the library initialization.\n * This is important because some of the destinations will use the anonymousId during the initialization,\n * and if we set anonId afterwards, that wouldn’t impact the destination.\n *\n * Also Ensures events can be registered before library initialization.\n * This is important so users can register to 'initialize' and any events that may fire early during setup.\n */\nfunction flushPreBuffer(\n  analytics: Analytics,\n  buffer: PreInitMethodCallBuffer\n): void {\n  flushSetAnonymousID(analytics, buffer)\n  flushOn(analytics, buffer)\n}\n\n/**\n * Finish flushing buffer and cleanup.\n */\nasync function flushFinalBuffer(\n  analytics: Analytics,\n  buffer: PreInitMethodCallBuffer\n): Promise<void> {\n  // Call popSnippetWindowBuffer before each flush task since there may be\n  // analytics calls during async function calls.\n  await flushAddSourceMiddleware(analytics, buffer)\n  flushAnalyticsCallsInNewTask(analytics, buffer)\n  // Clear buffer, just in case analytics is loaded twice; we don't want to fire events off again.\n  buffer.clear()\n}\n\nasync function registerPlugins(\n  writeKey: string,\n  legacySettings: LegacySettings,\n  analytics: Analytics,\n  options: InitOptions,\n  pluginLikes: (Plugin | PluginFactory)[] = [],\n  legacyIntegrationSources: ClassicIntegrationSource[]\n): Promise<Context> {\n  const plugins = pluginLikes?.filter(\n    (pluginLike) => typeof pluginLike === 'object'\n  ) as Plugin[]\n\n  const pluginSources = pluginLikes?.filter(\n    (pluginLike) =>\n      typeof pluginLike === 'function' &&\n      typeof pluginLike.pluginName === 'string'\n  ) as PluginFactory[]\n\n  const tsubMiddleware = hasTsubMiddleware(legacySettings)\n    ? await import(\n        /* webpackChunkName: \"tsub-middleware\" */ '../plugins/routing-middleware'\n      ).then((mod) => {\n        return mod.tsubMiddleware(\n          legacySettings.middlewareSettings!.routingRules\n        )\n      })\n    : undefined\n\n  const legacyDestinations =\n    hasLegacyDestinations(legacySettings) || legacyIntegrationSources.length > 0\n      ? await import(\n          /* webpackChunkName: \"ajs-destination\" */ '../plugins/ajs-destination'\n        ).then((mod) => {\n          return mod.ajsDestinations(\n            writeKey,\n            legacySettings,\n            analytics.integrations,\n            options,\n            tsubMiddleware,\n            legacyIntegrationSources\n          )\n        })\n      : []\n\n  if (legacySettings.legacyVideoPluginsEnabled) {\n    await import(\n      /* webpackChunkName: \"legacyVideos\" */ '../plugins/legacy-video-plugins'\n    ).then((mod) => {\n      return mod.loadLegacyVideoPlugins(analytics)\n    })\n  }\n\n  const schemaFilter = options.plan?.track\n    ? await import(\n        /* webpackChunkName: \"schemaFilter\" */ '../plugins/schema-filter'\n      ).then((mod) => {\n        return mod.schemaFilter(options.plan?.track, legacySettings)\n      })\n    : undefined\n\n  const mergedSettings = mergedOptions(legacySettings, options)\n  const remotePlugins = await remoteLoader(\n    legacySettings,\n    analytics.integrations,\n    mergedSettings,\n    options,\n    tsubMiddleware,\n    pluginSources\n  ).catch(() => [])\n\n  const toRegister = [\n    validation,\n    envEnrichment,\n    ...plugins,\n    ...legacyDestinations,\n    ...remotePlugins,\n  ]\n\n  if (schemaFilter) {\n    toRegister.push(schemaFilter)\n  }\n\n  const shouldIgnoreSegmentio =\n    (options.integrations?.All === false &&\n      !options.integrations['Segment.io']) ||\n    (options.integrations && options.integrations['Segment.io'] === false)\n\n  if (!shouldIgnoreSegmentio) {\n    toRegister.push(\n      await segmentio(\n        analytics,\n        mergedSettings['Segment.io'] as SegmentioSettings,\n        legacySettings.integrations\n      )\n    )\n  }\n\n  const ctx = await analytics.register(...toRegister)\n\n  if (\n    Object.entries(legacySettings.enabledMiddleware ?? {}).some(\n      ([, enabled]) => enabled\n    )\n  ) {\n    await import(\n      /* webpackChunkName: \"remoteMiddleware\" */ '../plugins/remote-middleware'\n    ).then(async ({ remoteMiddlewares }) => {\n      const middleware = await remoteMiddlewares(\n        ctx,\n        legacySettings,\n        options.obfuscate\n      )\n      const promises = middleware.map((mdw) =>\n        analytics.addSourceMiddleware(mdw)\n      )\n      return Promise.all(promises)\n    })\n  }\n\n  return ctx\n}\n\nasync function loadAnalytics(\n  settings: AnalyticsBrowserSettings,\n  options: InitOptions = {},\n  preInitBuffer: PreInitMethodCallBuffer\n): Promise<[Analytics, Context]> {\n  // return no-op analytics instance if disabled\n  if (options.disable === true) {\n    return [new NullAnalytics(), Context.system()]\n  }\n\n  if (options.globalAnalyticsKey)\n    setGlobalAnalyticsKey(options.globalAnalyticsKey)\n  // this is an ugly side-effect, but it's for the benefits of the plugins that get their cdn via getCDN()\n  if (settings.cdnURL) setGlobalCDNUrl(settings.cdnURL)\n\n  if (options.initialPageview) {\n    // capture the page context early, so it's always up-to-date\n    preInitBuffer.push(new PreInitMethodCall('page', []))\n  }\n\n  let legacySettings =\n    settings.cdnSettings ??\n    (await loadLegacySettings(settings.writeKey, settings.cdnURL))\n\n  if (options.updateCDNSettings) {\n    legacySettings = options.updateCDNSettings(legacySettings)\n  }\n\n  // if options.disable is a function, we allow user to disable analytics based on CDN Settings\n  if (typeof options.disable === 'function') {\n    const disabled = await options.disable(legacySettings)\n    if (disabled) {\n      return [new NullAnalytics(), Context.system()]\n    }\n  }\n\n  const retryQueue: boolean =\n    legacySettings.integrations['Segment.io']?.retryQueue ?? true\n\n  options = {\n    retryQueue,\n    ...options,\n  }\n\n  const analytics = new Analytics(settings, options)\n\n  attachInspector(analytics)\n\n  const plugins = settings.plugins ?? []\n\n  const classicIntegrations = settings.classicIntegrations ?? []\n\n  const segmentLoadOptions = options.integrations?.['Segment.io'] as\n    | SegmentioSettings\n    | undefined\n\n  Stats.initRemoteMetrics({\n    ...legacySettings.metrics,\n    host: segmentLoadOptions?.apiHost ?? legacySettings.metrics?.host,\n    protocol: segmentLoadOptions?.protocol,\n  })\n\n  // needs to be flushed before plugins are registered\n  flushPreBuffer(analytics, preInitBuffer)\n\n  const ctx = await registerPlugins(\n    settings.writeKey,\n    legacySettings,\n    analytics,\n    options,\n    plugins,\n    classicIntegrations\n  )\n\n  const search = window.location.search ?? ''\n  const hash = window.location.hash ?? ''\n\n  const term = search.length ? search : hash.replace(/(?=#).*(?=\\?)/, '')\n\n  if (term.includes('ajs_')) {\n    await analytics.queryString(term).catch(console.error)\n  }\n\n  analytics.initialized = true\n  analytics.emit('initialize', settings, options)\n\n  await flushFinalBuffer(analytics, preInitBuffer)\n\n  return [analytics, ctx]\n}\n\n/**\n * The public browser interface for Segment Analytics\n *\n * @example\n * ```ts\n *  export const analytics = new AnalyticsBrowser()\n *  analytics.load({ writeKey: 'foo' })\n * ```\n * @link https://github.com/segmentio/analytics-next/#readme\n */\nexport class AnalyticsBrowser extends AnalyticsBuffered {\n  private _resolveLoadStart: (\n    settings: AnalyticsBrowserSettings,\n    options: InitOptions\n  ) => void\n\n  constructor() {\n    const { promise: loadStart, resolve: resolveLoadStart } =\n      createDeferred<Parameters<AnalyticsBrowser['load']>>()\n\n    super((buffer) =>\n      loadStart.then(([settings, options]) =>\n        loadAnalytics(settings, options, buffer)\n      )\n    )\n\n    this._resolveLoadStart = (settings, options) =>\n      resolveLoadStart([settings, options])\n  }\n\n  /**\n   * Fully initialize an analytics instance, including:\n   *\n   * * Fetching settings from the segment CDN (by default).\n   * * Fetching all remote destinations configured by the user (if applicable).\n   * * Flushing buffered analytics events.\n   * * Loading all middleware.\n   *\n   * Note:️  This method should only be called *once* in your application.\n   *\n   * @example\n   * ```ts\n   * export const analytics = new AnalyticsBrowser()\n   * analytics.load({ writeKey: 'foo' })\n   * ```\n   */\n  load(\n    settings: AnalyticsBrowserSettings,\n    options: InitOptions = {}\n  ): AnalyticsBrowser {\n    this._resolveLoadStart(settings, options)\n    return this\n  }\n\n  /**\n   * Instantiates an object exposing Analytics methods.\n   *\n   * @example\n   * ```ts\n   * const ajs = AnalyticsBrowser.load({ writeKey: '<YOUR_WRITE_KEY>' })\n   *\n   * ajs.track(\"foo\")\n   * ...\n   * ```\n   */\n  static load(\n    settings: AnalyticsBrowserSettings,\n    options: InitOptions = {}\n  ): AnalyticsBrowser {\n    return new AnalyticsBrowser().load(settings, options)\n  }\n\n  static standalone(\n    writeKey: string,\n    options?: InitOptions\n  ): Promise<Analytics> {\n    return AnalyticsBrowser.load({ writeKey }, options).then((res) => res[0])\n  }\n}\n"],"mappings":";AAAA,SAASA,aAAa,QAAQ,wBAAwB;AACtD,SAASC,MAAM,EAAEC,eAAe,QAAQ,kBAAkB;AAE1D,SAASC,KAAK,QAAQ,cAAc;AACpC,SACEC,SAAS,EAETC,aAAa,QAER,mBAAmB;AAC1B,SAASC,OAAO,QAAQ,iBAAiB;AAIzC,SAASC,aAAa,QAAQ,uBAAuB;AACrD,SAASC,cAAc,QAAQ,kCAAkC;AACjE,SAASC,aAAa,QAAQ,2BAA2B;AACzD,SAEEC,YAAY,QAEP,0BAA0B;AAEjC,SAASC,SAAS,QAA2B,sBAAsB;AACnE,SAASC,UAAU,QAAQ,uBAAuB;AAClD,SACEC,iBAAiB,EAEjBC,4BAA4B,EAC5BC,wBAAwB,EACxBC,mBAAmB,EACnBC,OAAO,EACPC,iBAAiB,QACZ,gBAAgB;AAEvB,SAASC,eAAe,QAAQ,mBAAmB;AACnD,SAASC,KAAK,QAAQ,eAAe;AACrC,SAASC,qBAAqB,QAAQ,gCAAgC;AAkFtE,OAAM,SAAUC,kBAAkBA,CAChCC,QAAgB,EAChBC,MAAe;EAEf,IAAMC,OAAO,GAAGD,MAAM,aAANA,MAAM,cAANA,MAAM,GAAIvB,MAAM,EAAE;EAElC,OAAOE,KAAK,CAAC,GAAAuB,MAAA,CAAGD,OAAO,mBAAAC,MAAA,CAAgBH,QAAQ,cAAW,CAAC,CACxDI,IAAI,CAAC,UAACC,GAAG;IACR,IAAI,CAACA,GAAG,CAACC,EAAE,EAAE;MACX,OAAOD,GAAG,CAACE,IAAI,EAAE,CAACH,IAAI,CAAC,UAACI,oBAAoB;QAC1C,MAAM,IAAIC,KAAK,CAACD,oBAAoB,CAAC;MACvC,CAAC,CAAC;;IAEJ,OAAOH,GAAG,CAACK,IAAI,EAAE;EACnB,CAAC,CAAC,CACDC,KAAK,CAAC,UAACC,GAAG;IACTC,OAAO,CAACC,KAAK,CAACF,GAAG,CAACG,OAAO,CAAC;IAC1B,MAAMH,GAAG;EACX,CAAC,CAAC;AACN;AAEA,SAASI,qBAAqBA,CAACC,QAAwB;EACrD,OACExC,aAAa,EAAE,CAACyC,QAAQ,KAAK,MAAM;EACnC;EACAC,MAAM,CAACC,IAAI,CAACH,QAAQ,CAACI,YAAY,CAAC,CAACC,MAAM,GAAG,CAAC;AAEjD;AAEA,SAASC,iBAAiBA,CAACN,QAAwB;;EACjD,OACExC,aAAa,EAAE,CAACyC,QAAQ,KAAK,MAAM,IACnC,CAAC,CAAAM,EAAA,IAAAC,EAAA,IAAAC,EAAA,GAAAT,QAAQ,CAACU,kBAAkB,cAAAD,EAAA,uBAAAA,EAAA,CAAEE,YAAY,cAAAH,EAAA,uBAAAA,EAAA,CAAEH,MAAM,cAAAE,EAAA,cAAAA,EAAA,GAAI,CAAC,IAAI,CAAC;AAEhE;AAEA;;;;;;;;AAQA,SAASK,cAAcA,CACrBC,SAAoB,EACpBC,MAA+B;EAE/BtC,mBAAmB,CAACqC,SAAS,EAAEC,MAAM,CAAC;EACtCrC,OAAO,CAACoC,SAAS,EAAEC,MAAM,CAAC;AAC5B;AAEA;;;AAGA,SAAeC,gBAAgBA,CAC7BF,SAAoB,EACpBC,MAA+B;;;;;UAE/B;UACA;UACA,qBAAMvC,wBAAwB,CAACsC,SAAS,EAAEC,MAAM,CAAC;;UAFjD;UACA;UACAL,EAAA,CAAAO,IAAA,EAAiD;UACjD1C,4BAA4B,CAACuC,SAAS,EAAEC,MAAM,CAAC;UAC/C;UACAA,MAAM,CAACG,KAAK,EAAE;;;;;;AAGhB,SAAeC,eAAeA,CAC5BnC,QAAgB,EAChBoC,cAA8B,EAC9BN,SAAoB,EACpBO,OAAoB,EACpBC,WAA4C,EAC5CC,wBAAoD;;EADpD,IAAAD,WAAA;IAAAA,WAAA,KAA4C;EAAA;;;;;;;UAGtCE,OAAO,GAAGF,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEG,MAAM,CACjC,UAACC,UAAU;YAAK,cAAOA,UAAU,KAAK,QAAQ;UAA9B,CAA8B,CACnC;UAEPC,aAAa,GAAGL,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEG,MAAM,CACvC,UAACC,UAAU;YACT,cAAOA,UAAU,KAAK,UAAU,IAChC,OAAOA,UAAU,CAACE,UAAU,KAAK,QAAQ;UADzC,CACyC,CACzB;eAEGrB,iBAAiB,CAACa,cAAc,CAAC,EAAjC;UACnB,qBAAM,MAAM,EACV,yCAA0C,+BAA+B,CAC1E,CAAChC,IAAI,CAAC,UAACyC,GAAG;YACT,OAAOA,GAAG,CAACC,cAAc,CACvBV,cAAc,CAACT,kBAAmB,CAACC,YAAY,CAChD;UACH,CAAC,CAAC;;UANFmB,EAAA,GAAAC,EAAA,CAAAf,IAAA,EAME;;;UACFc,EAAA,GAAAE,SAAS;;;UARPH,cAAc,GAAAC,EAQP;gBAGX/B,qBAAqB,CAACoB,cAAc,CAAC,IAAIG,wBAAwB,CAACjB,MAAM,GAAG,CAAC,GAA5E;UACI,qBAAM,MAAM,EACV,yCAA0C,4BAA4B,CACvE,CAAClB,IAAI,CAAC,UAACyC,GAAG;YACT,OAAOA,GAAG,CAACK,eAAe,CACxBlD,QAAQ,EACRoC,cAAc,EACdN,SAAS,CAACT,YAAY,EACtBgB,OAAO,EACPS,cAAc,EACdP,wBAAwB,CACzB;UACH,CAAC,CAAC;;UAXFY,EAAA,GAAAH,EAAA,CAAAf,IAAA,EAWE;;;UACFkB,EAAA,KAAE;;;UAdFC,kBAAkB,GAAAD,EAchB;eAEJf,cAAc,CAACiB,yBAAyB,EAAxC;UACF,qBAAM,MAAM,EACV,sCAAuC,iCAAiC,CACzE,CAACjD,IAAI,CAAC,UAACyC,GAAG;YACT,OAAOA,GAAG,CAACS,sBAAsB,CAACxB,SAAS,CAAC;UAC9C,CAAC,CAAC;;UAJFkB,EAAA,CAAAf,IAAA,EAIE;;;gBAGiB,CAAAP,EAAA,GAAAW,OAAO,CAACkB,IAAI,cAAA7B,EAAA,uBAAAA,EAAA,CAAE8B,KAAK;UACpC,qBAAM,MAAM,EACV,sCAAuC,0BAA0B,CAClE,CAACpD,IAAI,CAAC,UAACyC,GAAG;;YACT,OAAOA,GAAG,CAACY,YAAY,CAAC,CAAA/B,EAAA,GAAAW,OAAO,CAACkB,IAAI,cAAA7B,EAAA,uBAAAA,EAAA,CAAE8B,KAAK,EAAEpB,cAAc,CAAC;UAC9D,CAAC,CAAC;;UAJFsB,EAAA,GAAAV,EAAA,CAAAf,IAAA,EAIE;;;UACFyB,EAAA,GAAAT,SAAS;;;UANPQ,YAAY,GAAAC,EAML;UAEPC,cAAc,GAAG3E,aAAa,CAACoD,cAAc,EAAEC,OAAO,CAAC;UACvC,qBAAMlD,YAAY,CACtCiD,cAAc,EACdN,SAAS,CAACT,YAAY,EACtBsC,cAAc,EACdtB,OAAO,EACPS,cAAc,EACdH,aAAa,CACd,CAAChC,KAAK,CAAC;YAAM,SAAE;UAAF,CAAE,CAAC;;UAPXiD,aAAa,GAAGZ,EAAA,CAAAf,IAAA,EAOL;UAEX4B,UAAU,GAAAC,aAAA,CAAAA,aAAA,CAAAA,aAAA,EACdzE,UAAU,EACVH,aAAa,C,EACVsD,OAAO,SACPY,kBAAkB,SAClBQ,aAAa,OACjB;UAED,IAAIH,YAAY,EAAE;YAChBI,UAAU,CAACE,IAAI,CAACN,YAAY,CAAC;;UAGzBO,qBAAqB,GACxB,EAAAvC,EAAA,GAAAY,OAAO,CAAChB,YAAY,cAAAI,EAAA,uBAAAA,EAAA,CAAEwC,GAAG,MAAK,KAAK,IAClC,CAAC5B,OAAO,CAAChB,YAAY,CAAC,YAAY,CAAC,IACpCgB,OAAO,CAAChB,YAAY,IAAIgB,OAAO,CAAChB,YAAY,CAAC,YAAY,CAAC,KAAK,KAAM;eAEpE,CAAC2C,qBAAqB,EAAtB;UACFE,EAAA,IAAAC,EAAA,GAAAN,UAAU,EAACE,IAAI;UACb,qBAAM3E,SAAS,CACb0C,SAAS,EACT6B,cAAc,CAAC,YAAY,CAAsB,EACjDvB,cAAc,CAACf,YAAY,CAC5B;;UALH6C,EAAA,CAAAE,KAAA,CAAAD,EAAA,GACEnB,EAAA,CAAAf,IAAA,EAIC,EACF;;;UAGS,qBAAMH,SAAS,CAACuC,QAAQ,CAAAD,KAAA,CAAlBtC,SAAS,EAAa+B,UAAU;;UAA5CS,GAAG,GAAGtB,EAAA,CAAAf,IAAA,EAAuC;eAGjDd,MAAM,CAACoD,OAAO,CAAC,CAAA/C,EAAA,GAAAY,cAAc,CAACoC,iBAAiB,cAAAhD,EAAA,cAAAA,EAAA,GAAI,EAAE,CAAC,CAACiD,IAAI,CACzD,UAAC/C,EAAW;gBAARgD,OAAO,GAAAhD,EAAA;YAAM,OAAAgD,OAAO;UAAP,CAAO,CACzB,EAFD;UAIA,qBAAM,MAAM,EACV,0CAA2C,8BAA8B,CAC1E,CAACtE,IAAI,CAAC,UAAOsB,EAAqB;gBAAnBiD,iBAAiB,GAAAjD,EAAA,CAAAiD,iBAAA;;;;;;oBACZ,qBAAMA,iBAAiB,CACxCL,GAAG,EACHlC,cAAc,EACdC,OAAO,CAACuC,SAAS,CAClB;;oBAJKC,UAAU,GAAGpD,EAAA,CAAAQ,IAAA,EAIlB;oBACK6C,QAAQ,GAAGD,UAAU,CAACE,GAAG,CAAC,UAACC,GAAG;sBAClC,OAAAlD,SAAS,CAACmD,mBAAmB,CAACD,GAAG,CAAC;oBAAlC,CAAkC,CACnC;oBACD,sBAAOE,OAAO,CAACC,GAAG,CAACL,QAAQ,CAAC;;;;WAC7B,CAAC;;UAZF9B,EAAA,CAAAf,IAAA,EAYE;;;UAGJ,sBAAOqC,GAAG;;;;;AAGZ,SAAec,aAAaA,CAC1BnE,QAAkC,EAClCoB,OAAyB,EACzBgD,aAAsC;;EADtC,IAAAhD,OAAA;IAAAA,OAAA,KAAyB;EAAA;;;;;;UAGzB;UACA,IAAIA,OAAO,CAACiD,OAAO,KAAK,IAAI,EAAE;YAC5B,sBAAO,CAAC,IAAIxG,aAAa,EAAE,EAAEC,OAAO,CAACwG,MAAM,EAAE,CAAC;;UAGhD,IAAIlD,OAAO,CAACmD,kBAAkB,EAC5B1F,qBAAqB,CAACuC,OAAO,CAACmD,kBAAkB,CAAC;UACnD;UACA,IAAIvE,QAAQ,CAAChB,MAAM,EAAEtB,eAAe,CAACsC,QAAQ,CAAChB,MAAM,CAAC;UAErD,IAAIoC,OAAO,CAACoD,eAAe,EAAE;YAC3B;YACAJ,aAAa,CAACtB,IAAI,CAAC,IAAIpE,iBAAiB,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;;sBAIrDsB,QAAQ,CAACyE,WAAW,cAAAhE,EAAA;;;;UACnB,qBAAM3B,kBAAkB,CAACkB,QAAQ,CAACjB,QAAQ,EAAEiB,QAAQ,CAAChB,MAAM,CAAC;;UAA7D0F,EAAA,GAACC,EAAA,CAAA3D,IAAA,EAA6D;;;UAF5DG,cAAc,GAAAuD,EAE8C;UAEhE,IAAItD,OAAO,CAACwD,iBAAiB,EAAE;YAC7BzD,cAAc,GAAGC,OAAO,CAACwD,iBAAiB,CAACzD,cAAc,CAAC;;gBAIxD,OAAOC,OAAO,CAACiD,OAAO,KAAK,UAAU,GAArC;UACe,qBAAMjD,OAAO,CAACiD,OAAO,CAAClD,cAAc,CAAC;;UAAhD0D,QAAQ,GAAGF,EAAA,CAAA3D,IAAA,EAAqC;UACtD,IAAI6D,QAAQ,EAAE;YACZ,sBAAO,CAAC,IAAIhH,aAAa,EAAE,EAAEC,OAAO,CAACwG,MAAM,EAAE,CAAC;;;;UAI5CQ,UAAU,GACd,CAAAvE,EAAA,IAAAC,EAAA,GAAAW,cAAc,CAACf,YAAY,CAAC,YAAY,CAAC,cAAAI,EAAA,uBAAAA,EAAA,CAAEsE,UAAU,cAAAvE,EAAA,cAAAA,EAAA,GAAI,IAAI;UAE/Da,OAAO,GAAA2D,QAAA;YACLD,UAAU,EAAAA;UAAA,GACP1D,OAAO,CACX;UAEKP,SAAS,GAAG,IAAIjD,SAAS,CAACoC,QAAQ,EAAEoB,OAAO,CAAC;UAElDzC,eAAe,CAACkC,SAAS,CAAC;UAEpBU,OAAO,GAAG,CAAAO,EAAA,GAAA9B,QAAQ,CAACuB,OAAO,cAAAO,EAAA,cAAAA,EAAA,GAAI,EAAE;UAEhCkD,mBAAmB,GAAG,CAAA9C,EAAA,GAAAlC,QAAQ,CAACgF,mBAAmB,cAAA9C,EAAA,cAAAA,EAAA,GAAI,EAAE;UAExD+C,kBAAkB,GAAG,CAAAxC,EAAA,GAAArB,OAAO,CAAChB,YAAY,cAAAqC,EAAA,uBAAAA,EAAA,CAAG,YAAY,CAEjD;UAEb7D,KAAK,CAACsG,iBAAiB,CAAAH,QAAA,CAAAA,QAAA,KAClB5D,cAAc,CAACgE,OAAO;YACzBC,IAAI,EAAE,CAAAlC,EAAA,GAAA+B,kBAAkB,aAAlBA,kBAAkB,uBAAlBA,kBAAkB,CAAEI,OAAO,cAAAnC,EAAA,cAAAA,EAAA,GAAI,CAAAD,EAAA,GAAA9B,cAAc,CAACgE,OAAO,cAAAlC,EAAA,uBAAAA,EAAA,CAAEmC,IAAI;YACjEE,QAAQ,EAAEL,kBAAkB,aAAlBA,kBAAkB,uBAAlBA,kBAAkB,CAAEK;UAAQ,GACtC;UAEF;UACA1E,cAAc,CAACC,SAAS,EAAEuD,aAAa,CAAC;UAE5B,qBAAMlD,eAAe,CAC/BlB,QAAQ,CAACjB,QAAQ,EACjBoC,cAAc,EACdN,SAAS,EACTO,OAAO,EACPG,OAAO,EACPyD,mBAAmB,CACpB;;UAPK3B,GAAG,GAAGsB,EAAA,CAAA3D,IAAA,EAOX;UAEKuE,MAAM,GAAG,CAAAxD,EAAA,GAAAyD,MAAM,CAACC,QAAQ,CAACF,MAAM,cAAAxD,EAAA,cAAAA,EAAA,GAAI,EAAE;UACrC2D,IAAI,GAAG,CAAAC,EAAA,GAAAH,MAAM,CAACC,QAAQ,CAACC,IAAI,cAAAC,EAAA,cAAAA,EAAA,GAAI,EAAE;UAEjCC,IAAI,GAAGL,MAAM,CAAClF,MAAM,GAAGkF,MAAM,GAAGG,IAAI,CAACG,OAAO,CAAC,eAAe,EAAE,EAAE,CAAC;eAEnED,IAAI,CAACE,QAAQ,CAAC,MAAM,CAAC,EAArB;UACF,qBAAMjF,SAAS,CAACkF,WAAW,CAACH,IAAI,CAAC,CAAClG,KAAK,CAACE,OAAO,CAACC,KAAK,CAAC;;UAAtD8E,EAAA,CAAA3D,IAAA,EAAsD;;;UAGxDH,SAAS,CAACmF,WAAW,GAAG,IAAI;UAC5BnF,SAAS,CAACoF,IAAI,CAAC,YAAY,EAAEjG,QAAQ,EAAEoB,OAAO,CAAC;UAE/C,qBAAML,gBAAgB,CAACF,SAAS,EAAEuD,aAAa,CAAC;;UAAhDO,EAAA,CAAA3D,IAAA,EAAgD;UAEhD,sBAAO,CAACH,SAAS,EAAEwC,GAAG,CAAC;;;;;AAGzB;;;;;;;;;;AAUA,IAAA6C,gBAAA,0BAAAC,MAAA;EAAsCC,SAAA,CAAAF,gBAAA,EAAAC,MAAA;EAMpC,SAAAD,iBAAA;IAAA,IAAAG,KAAA;IACQ,IAAA5F,EAAA,GACJzC,cAAc,EAAwC;MADvCsI,SAAS,GAAA7F,EAAA,CAAA8F,OAAA;MAAWC,gBAAgB,GAAA/F,EAAA,CAAAgG,OACG;YAExDN,MAAA,CAAAO,IAAA,OAAM,UAAC5F,MAAM;MACX,OAAAwF,SAAS,CAACnH,IAAI,CAAC,UAACsB,EAAmB;YAAlBT,QAAQ,GAAAS,EAAA;UAAEW,OAAO,GAAAX,EAAA;QAChC,OAAA0D,aAAa,CAACnE,QAAQ,EAAEoB,OAAO,EAAEN,MAAM,CAAC;MAAxC,CAAwC,CACzC;IAFD,CAEC,CACF;IAEDuF,KAAI,CAACM,iBAAiB,GAAG,UAAC3G,QAAQ,EAAEoB,OAAO;MACzC,OAAAoF,gBAAgB,CAAC,CAACxG,QAAQ,EAAEoB,OAAO,CAAC,CAAC;IAArC,CAAqC;;EACzC;EAEA;;;;;;;;;;;;;;;;EAgBA8E,gBAAA,CAAAU,SAAA,CAAAC,IAAI,GAAJ,UACE7G,QAAkC,EAClCoB,OAAyB;IAAzB,IAAAA,OAAA;MAAAA,OAAA,KAAyB;IAAA;IAEzB,IAAI,CAACuF,iBAAiB,CAAC3G,QAAQ,EAAEoB,OAAO,CAAC;IACzC,OAAO,IAAI;EACb,CAAC;EAED;;;;;;;;;;;EAWO8E,gBAAA,CAAAW,IAAI,GAAX,UACE7G,QAAkC,EAClCoB,OAAyB;IAAzB,IAAAA,OAAA;MAAAA,OAAA,KAAyB;IAAA;IAEzB,OAAO,IAAI8E,gBAAgB,EAAE,CAACW,IAAI,CAAC7G,QAAQ,EAAEoB,OAAO,CAAC;EACvD,CAAC;EAEM8E,gBAAA,CAAAY,UAAU,GAAjB,UACE/H,QAAgB,EAChBqC,OAAqB;IAErB,OAAO8E,gBAAgB,CAACW,IAAI,CAAC;MAAE9H,QAAQ,EAAAA;IAAA,CAAE,EAAEqC,OAAO,CAAC,CAACjC,IAAI,CAAC,UAACC,GAAG;MAAK,OAAAA,GAAG,CAAC,CAAC,CAAC;IAAN,CAAM,CAAC;EAC3E,CAAC;EACH,OAAA8G,gBAAC;AAAD,CAAC,CApEqC7H,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}