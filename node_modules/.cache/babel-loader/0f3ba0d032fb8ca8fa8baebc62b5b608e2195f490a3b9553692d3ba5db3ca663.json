{"ast":null,"code":"export function pTimeout(promise, timeout) {\n  return new Promise(function (resolve, reject) {\n    var timeoutId = setTimeout(function () {\n      reject(Error('Promise timed out'));\n    }, timeout);\n    promise.then(function (val) {\n      clearTimeout(timeoutId);\n      return resolve(val);\n    }).catch(reject);\n  });\n}\nexport function sleep(timeoutInMs) {\n  return new Promise(function (resolve) {\n    return setTimeout(resolve, timeoutInMs);\n  });\n}\n/**\n * @param ctx\n * @param callback - the function to invoke\n * @param delay - aka \"timeout\". The amount of time in ms to wait before invoking the callback.\n */\nexport function invokeCallback(ctx, callback, delay) {\n  var cb = function () {\n    try {\n      return Promise.resolve(callback(ctx));\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  };\n  return sleep(delay)\n  // pTimeout ensures that the callback can't cause the context to hang\n  .then(function () {\n    return pTimeout(cb(), 1000);\n  }).catch(function (err) {\n    ctx === null || ctx === void 0 ? void 0 : ctx.log('warn', 'Callback Error', {\n      error: err\n    });\n    ctx === null || ctx === void 0 ? void 0 : ctx.stats.increment('callback_error');\n  }).then(function () {\n    return ctx;\n  });\n}","map":{"version":3,"names":["pTimeout","promise","timeout","Promise","resolve","reject","timeoutId","setTimeout","Error","then","val","clearTimeout","catch","sleep","timeoutInMs","invokeCallback","ctx","callback","delay","cb","err","log","error","stats","increment"],"sources":["/Users/bcaudillo/Desktop/Projects/todo/node_modules/@segment/analytics-core/src/callback/index.ts"],"sourcesContent":["import { CoreContext } from '../context'\nimport type { Callback } from '../events'\n\nexport function pTimeout<T>(promise: Promise<T>, timeout: number): Promise<T> {\n  return new Promise((resolve, reject) => {\n    const timeoutId = setTimeout(() => {\n      reject(Error('Promise timed out'))\n    }, timeout)\n\n    promise\n      .then((val) => {\n        clearTimeout(timeoutId)\n        return resolve(val)\n      })\n      .catch(reject)\n  })\n}\n\nexport function sleep(timeoutInMs: number): Promise<void> {\n  return new Promise((resolve) => setTimeout(resolve, timeoutInMs))\n}\n\n/**\n * @param ctx\n * @param callback - the function to invoke\n * @param delay - aka \"timeout\". The amount of time in ms to wait before invoking the callback.\n */\nexport function invokeCallback<Ctx extends CoreContext>(\n  ctx: Ctx,\n  callback: Callback<Ctx>,\n  delay: number\n): Promise<Ctx> {\n  const cb = () => {\n    try {\n      return Promise.resolve(callback(ctx))\n    } catch (err) {\n      return Promise.reject(err)\n    }\n  }\n\n  return (\n    sleep(delay)\n      // pTimeout ensures that the callback can't cause the context to hang\n      .then(() => pTimeout(cb(), 1000))\n      .catch((err) => {\n        ctx?.log('warn', 'Callback Error', { error: err })\n        ctx?.stats.increment('callback_error')\n      })\n      .then(() => ctx)\n  )\n}\n"],"mappings":"AAGA,OAAM,SAAUA,QAAQA,CAAIC,OAAmB,EAAEC,OAAe;EAC9D,OAAO,IAAIC,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM;IACjC,IAAMC,SAAS,GAAGC,UAAU,CAAC;MAC3BF,MAAM,CAACG,KAAK,CAAC,mBAAmB,CAAC,CAAC;IACpC,CAAC,EAAEN,OAAO,CAAC;IAEXD,OAAO,CACJQ,IAAI,CAAC,UAACC,GAAG;MACRC,YAAY,CAACL,SAAS,CAAC;MACvB,OAAOF,OAAO,CAACM,GAAG,CAAC;IACrB,CAAC,CAAC,CACDE,KAAK,CAACP,MAAM,CAAC;EAClB,CAAC,CAAC;AACJ;AAEA,OAAM,SAAUQ,KAAKA,CAACC,WAAmB;EACvC,OAAO,IAAIX,OAAO,CAAC,UAACC,OAAO;IAAK,OAAAG,UAAU,CAACH,OAAO,EAAEU,WAAW,CAAC;EAAhC,CAAgC,CAAC;AACnE;AAEA;;;;;AAKA,OAAM,SAAUC,cAAcA,CAC5BC,GAAQ,EACRC,QAAuB,EACvBC,KAAa;EAEb,IAAMC,EAAE,GAAG,SAAAA,CAAA;IACT,IAAI;MACF,OAAOhB,OAAO,CAACC,OAAO,CAACa,QAAQ,CAACD,GAAG,CAAC,CAAC;KACtC,CAAC,OAAOI,GAAG,EAAE;MACZ,OAAOjB,OAAO,CAACE,MAAM,CAACe,GAAG,CAAC;;EAE9B,CAAC;EAED,OACEP,KAAK,CAACK,KAAK;EACT;EAAA,CACCT,IAAI,CAAC;IAAM,OAAAT,QAAQ,CAACmB,EAAE,EAAE,EAAE,IAAI,CAAC;EAApB,CAAoB,CAAC,CAChCP,KAAK,CAAC,UAACQ,GAAG;IACTJ,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEK,GAAG,CAAC,MAAM,EAAE,gBAAgB,EAAE;MAAEC,KAAK,EAAEF;IAAG,CAAE,CAAC;IAClDJ,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEO,KAAK,CAACC,SAAS,CAAC,gBAAgB,CAAC;EACxC,CAAC,CAAC,CACDf,IAAI,CAAC;IAAM,OAAAO,GAAG;EAAH,CAAG,CAAC;AAEtB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}