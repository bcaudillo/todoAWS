{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["/Users/bcaudillo/Desktop/Projects/todo/node_modules/@segment/analytics-core/src/events/interfaces.ts"],"sourcesContent":["import { CoreContext } from '../context'\nimport { ID } from '../user'\nimport { DeepNullable } from '../utils/ts-helpers'\n\nexport type Callback<Ctx extends CoreContext = CoreContext> = (\n  ctx: Ctx\n) => Promise<unknown> | unknown\n\nexport type SegmentEventType =\n  | 'track'\n  | 'page'\n  | 'identify'\n  | 'group'\n  | 'alias'\n  | 'screen'\n\nexport type JSONPrimitive = string | number | boolean | null\nexport type JSONValue = JSONPrimitive | JSONObject | JSONArray\nexport type JSONObject = { [member: string]: JSONValue }\nexport type JSONArray = JSONValue[]\n\nexport type EventProperties = Record<string, any>\n\nexport type Integrations = {\n  All?: boolean\n  [integration: string]: boolean | JSONObject | undefined\n}\n\nexport interface CoreOptions {\n  integrations?: Integrations\n  timestamp?: Timestamp\n  context?: CoreExtraContext\n  anonymousId?: string\n  userId?: string\n  traits?: Traits\n  /**\n   * Override the messageId. Under normal circumstances, this is not recommended -- but neccessary for deduping events.\n   *\n   * **Currently, This option only works in `@segment/analytics-node`.**\n   */\n  messageId?: string\n  // ugh, this is ugly, but we allow literally any property to be passed to options (which get spread onto the event)\n  [key: string]: any\n}\n\n/**\n * Context is a dictionary of extra information that provides useful context about a datapoint, for example the user’s ip address or locale. You should only use Context fields for their intended meaning.\n * @link https://segment.com/docs/connections/spec/common/#context\n */\nexport interface CoreExtraContext {\n  /**\n   * This is usually used to flag an .identify() call to just update the trait, rather than \"last seen\".\n   */\n  active?: boolean\n\n  /**\n   * Current user's IP address.\n   */\n  ip?: string\n\n  /**\n   * Locale string for the current user, for example en-US.\n   * @example en-US\n   */\n  locale?: string\n  /**\n   * Dictionary of information about the user’s current location.\n   */\n  location?: {\n    /**\n     * @example San Francisco\n     */\n    city?: string\n    /**\n     * @example United States\n     */\n    country?: string\n    /**\n     * @example 40.2964197\n     */\n    latitude?: string\n    /**\n     * @example -76.9411617\n     */\n    longitude?: string\n    /**\n     * @example CA\n     */\n    region?: string\n    /**\n     * @example 100\n     */\n    speed?: number\n  }\n\n  /**\n   * Dictionary of information about the current web page.\n   */\n  page?: {\n    /**\n     * @example /academy/\n     */\n    path?: string\n    /**\n     * @example https://www.foo.com/\n     */\n    referrer?: string\n    /**\n     * @example projectId=123\n     */\n    search?: string\n    /**\n     * @example Analytics Academy\n     */\n    title?: string\n    /**\n     * @example https://segment.com/academy/\n     */\n    url?: string\n  }\n\n  /**\n   * User agent of the device making the request.\n   */\n  userAgent?: string\n\n  /**\n   * User agent data returned by the Client Hints API\n   */\n  userAgentData?: {\n    brands?: {\n      brand: string\n      version: string\n    }[]\n    mobile?: boolean\n    platform?: string\n    architecture?: string\n    bitness?: string\n    model?: string\n    platformVersion?: string\n    /** @deprecated in favour of fullVersionList */\n    uaFullVersion?: string\n    fullVersionList?: {\n      brand: string\n      version: string\n    }[]\n    wow64?: boolean\n  }\n\n  /**\n   * Information about the current library.\n   *\n   * **Automatically filled out by the library.**\n   *\n   * This type should probably be \"never\"\n   */\n  library?: {\n    /**\n     * @example analytics-node-next/latest\n     */\n    name: string\n    /**\n     * @example  \"1.43.1\"\n     */\n    version: string\n  }\n\n  /**\n   * This is useful in cases where you need to track an event,\n   * but also associate information from a previous identify call.\n   * You should fill this object the same way you would fill traits in an identify call.\n   */\n  traits?: Traits\n\n  /**\n   * Dictionary of information about the campaign that resulted in the API call, containing name, source, medium, term, content, and any other custom UTM parameter.\n   */\n  campaign?: Campaign\n\n  /**\n   * Dictionary of information about the way the user was referred to the website or app.\n   */\n  referrer?: {\n    type?: string\n    name?: string\n    url?: string\n    link?: string\n\n    id?: string // undocumented\n    btid?: string // undocumented?\n    urid?: string // undocumented?\n  }\n\n  amp?: {\n    // undocumented?\n    id: string\n  }\n\n  [key: string]: any\n}\n\nexport interface CoreSegmentEvent {\n  messageId?: string\n  type: SegmentEventType\n\n  // page specific\n  category?: string\n  name?: string\n\n  properties?: EventProperties\n\n  traits?: Traits // Traits is only defined in 'identify' and 'group', even if it can be passed in other calls.\n\n  integrations?: Integrations\n  context?: CoreExtraContext\n  options?: CoreOptions\n\n  userId?: ID\n  anonymousId?: ID\n  groupId?: ID\n  previousId?: ID\n\n  event?: string\n\n  writeKey?: string\n\n  sentAt?: Date\n\n  _metadata?: SegmentEventMetadata\n\n  timestamp?: Timestamp\n}\n\nexport interface SegmentEventMetadata {\n  failedInitializations?: unknown[]\n  bundled?: string[]\n  unbundled?: string[]\n  nodeVersion?: string\n  bundledConfigIds?: string[]\n  unbundledConfigIds?: string[]\n  bundledIds?: string[]\n}\n\nexport type Timestamp = Date | string\n\n/**\n * A Plan allows users to specify events and which destinations they would like them to be sent to\n */\nexport interface Plan {\n  track?: TrackPlan\n  identify?: TrackPlan\n  group?: TrackPlan\n}\n\nexport interface TrackPlan {\n  [key: string]: PlanEvent | undefined\n  // __default SHOULD always exist, but marking as optional for extra safety.\n  __default?: PlanEvent\n}\n\nexport interface PlanEvent {\n  /**\n   * Whether or not this plan event is enabled\n   */\n  enabled: boolean\n  /**\n   * Which integrations the plan event applies to\n   */\n  integrations?: {\n    [key: string]: boolean\n  }\n}\n\ntype DbId = string | number // TODO: the docs says that this can only be a string?\ntype PhoneNumber = string | number // TODO: the docs say this can only be a string?\n\n/**\n * Traits are pieces of information you know about a group.\n * This interface represents reserved traits that Segment has standardized.\n * @link https://segment.com/docs/connections/spec/group/#traits\n */\ntype BaseGroupTraits = DeepNullable<{\n  /**\n   * Street address of a group.\n   */\n  address?: BaseUserTraits['address']\n\n  /**\n   * URL to an avatar image for the group.\n   */\n  avatar?: BaseUserTraits['avatar']\n\n  /**\n   * Date the group's account was first created. Segment recommends ISO-8601 date strings.\n   */\n  createdAt?: BaseUserTraits['createdAt']\n\n  /**\n   * Description of a group\n   */\n  description?: BaseUserTraits['description']\n  /**\n   * Email address of group.\n   */\n  email?: BaseUserTraits['email']\n  /**\n   * Number of employees of a group, typically used for companies.\n   */\n  employees?: string | number // TODO: the docs says that this must be a string?\n\n  /**\n   * Unique ID in your database for a group.\n   */\n  id?: BaseUserTraits['id']\n\n  /**\n   * Industry a group is part of.\n   */\n  industry?: BaseUserTraits['industry']\n\n  /**\n   * Name of a group.\n   */\n  name?: BaseUserTraits['name']\n\n  /**\n   * Phone number of a group\n   */\n  phone?: BaseUserTraits['phone']\n\n  /**\n   * Website of a group.\n   */\n  website?: BaseUserTraits['website']\n\n  /**\n   * \tPlan that a group is in.\n   */\n  plan?: BaseUserTraits['plan']\n}>\n\n/**\n * Traits are pieces of information you know about a user.\n * This interface represents reserved traits that Segment has standardized.\n * @link https://segment.com/docs/connections/spec/identify/#traits\n */\ntype BaseUserTraits = DeepNullable<{\n  /**\n   * Unique ID in your database for a user\n   */\n  id?: DbId\n\n  /**\n   * Industry a user works in\n   */\n  industry?: string\n\n  /**\n   * First name of a user.\n   */\n  firstName?: string\n\n  /**\n   * Last name of a user.\n   */\n  lastName?: string\n\n  /**\n   * Full name of a user. If you only pass a first and last name Segment automatically fills in the full name for you.\n   */\n  name?: string\n\n  /**\n   * Phone number of a user\n   */\n  phone?: PhoneNumber\n\n  /**\n   * Title of a user, usually related to their position at a specific company.\n   * @example VP of Engineering\n   */\n  title?: string\n\n  /**\n   * User's username. This should be unique to each user, like the usernames of Twitter or GitHub.\n   */\n  username?: string\n\n  /**\n   * Website of a user.\n   */\n  website?: string\n\n  /**\n   * Street address of a user.\n   */\n  address?: {\n    city?: string\n    country?: string\n    postalCode?: string\n    state?: string\n    street?: string\n  }\n  /**\n   * Age of a user.\n   */\n  age?: number\n\n  /**\n   * URL to an avatar image for the user.\n   */\n  avatar?: string\n\n  /**\n   * User's birthday.\n   */\n  birthday?: Timestamp\n\n  /**\n   * User's company.\n   */\n  company?: {\n    name?: string\n    id?: DbId\n    industry?: BaseUserTraits['industry']\n    employee_count?: number\n    plan?: BaseUserTraits['plan']\n  }\n\n  /**\n    Plan that a user is in.\n\n   * @example enterprise\n   */\n  plan?: string\n\n  /**\n   * \tDate the user's account was first created. Segment recommends using ISO-8601 date strings.\n   */\n  createdAt?: Timestamp\n\n  /**\n   * Description of user, such as bio.\n   */\n  description?: string\n\n  /**\n   * Email address of a user.\n   */\n  email?: string\n\n  /**\n   * @example female\n   */\n  gender?: string\n}>\n\n/**\n * Traits are pieces of information you know about a group.\n * This interface represents reserved traits that Segment has standardized.\n * @link https://segment.com/docs/connections/spec/group/#traits\n */\nexport type GroupTraits = BaseGroupTraits & {\n  [customTrait: string]: any\n}\n\n/**\n * Traits are pieces of information you know about a user.\n * This interface represents reserved traits that Segment has standardized.\n * @link https://segment.com/docs/connections/spec/identify/#traits\n */\nexport type UserTraits = BaseUserTraits & {\n  [customTrait: string]: any\n}\n\n/**\n * Traits are pieces of information you know about a user or group.\n */\nexport type Traits = UserTraits | GroupTraits\n\nexport type Campaign = {\n  name: string\n  source: string\n  medium: string\n  [key: string]: string\n}\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}