{"ast":null,"code":"/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\nvar SIGN_MASK = require('@stdlib/constants-float64-high-word-sign-mask');\nvar ABS_MASK = require('@stdlib/constants-float64-high-word-abs-mask');\nvar toWords = require('@stdlib/number-float64-base-to-words');\nvar getHighWord = require('@stdlib/number-float64-base-get-high-word');\nvar fromWords = require('@stdlib/number-float64-base-from-words');\n\n// VARIABLES //\n\n// High/low words workspace:\nvar WORDS = [0, 0];\n\n// MAIN //\n\n/**\n* Returns a double-precision floating-point number with the magnitude of `x` and the sign of `y`.\n*\n* @param {number} x - number from which to derive a magnitude\n* @param {number} y - number from which to derive a sign\n* @returns {number} a double-precision floating-point number\n*\n* @example\n* var z = copysign( -3.14, 10.0 );\n* // returns 3.14\n*\n* @example\n* var z = copysign( 3.14, -1.0 );\n* // returns -3.14\n*\n* @example\n* var z = copysign( 1.0, -0.0 );\n* // returns -1.0\n*\n* @example\n* var z = copysign( -3.14, -0.0 );\n* // returns -3.14\n*\n* @example\n* var z = copysign( -0.0, 1.0 );\n* // returns 0.0\n*/\nfunction copysign(x, y) {\n  var hx;\n  var hy;\n\n  // Split `x` into higher and lower order words:\n  toWords.assign(x, WORDS, 1, 0);\n  hx = WORDS[0];\n\n  // Turn off the sign bit of `x`:\n  hx &= ABS_MASK;\n\n  // Extract the higher order word from `y`:\n  hy = getHighWord(y);\n\n  // Leave only the sign bit of `y` turned on:\n  hy &= SIGN_MASK;\n\n  // Copy the sign bit of `y` to `x`:\n  hx |= hy;\n\n  // Return a new value having the same magnitude as `x`, but with the sign of `y`:\n  return fromWords(hx, WORDS[1]);\n}\n\n// EXPORTS //\n\nmodule.exports = copysign;","map":{"version":3,"names":["SIGN_MASK","require","ABS_MASK","toWords","getHighWord","fromWords","WORDS","copysign","x","y","hx","hy","assign","module","exports"],"sources":["/Users/bcaudillo/Desktop/Projects/todo/node_modules/@stdlib/math-base-special-copysign/lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar SIGN_MASK = require( '@stdlib/constants-float64-high-word-sign-mask' );\nvar ABS_MASK = require( '@stdlib/constants-float64-high-word-abs-mask' );\nvar toWords = require( '@stdlib/number-float64-base-to-words' );\nvar getHighWord = require( '@stdlib/number-float64-base-get-high-word' );\nvar fromWords = require( '@stdlib/number-float64-base-from-words' );\n\n\n// VARIABLES //\n\n// High/low words workspace:\nvar WORDS = [ 0, 0 ];\n\n\n// MAIN //\n\n/**\n* Returns a double-precision floating-point number with the magnitude of `x` and the sign of `y`.\n*\n* @param {number} x - number from which to derive a magnitude\n* @param {number} y - number from which to derive a sign\n* @returns {number} a double-precision floating-point number\n*\n* @example\n* var z = copysign( -3.14, 10.0 );\n* // returns 3.14\n*\n* @example\n* var z = copysign( 3.14, -1.0 );\n* // returns -3.14\n*\n* @example\n* var z = copysign( 1.0, -0.0 );\n* // returns -1.0\n*\n* @example\n* var z = copysign( -3.14, -0.0 );\n* // returns -3.14\n*\n* @example\n* var z = copysign( -0.0, 1.0 );\n* // returns 0.0\n*/\nfunction copysign( x, y ) {\n\tvar hx;\n\tvar hy;\n\n\t// Split `x` into higher and lower order words:\n\ttoWords.assign( x, WORDS, 1, 0 );\n\thx = WORDS[ 0 ];\n\n\t// Turn off the sign bit of `x`:\n\thx &= ABS_MASK;\n\n\t// Extract the higher order word from `y`:\n\thy = getHighWord( y );\n\n\t// Leave only the sign bit of `y` turned on:\n\thy &= SIGN_MASK;\n\n\t// Copy the sign bit of `y` to `x`:\n\thx |= hy;\n\n\t// Return a new value having the same magnitude as `x`, but with the sign of `y`:\n\treturn fromWords( hx, WORDS[ 1 ] );\n}\n\n\n// EXPORTS //\n\nmodule.exports = copysign;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAE,+CAAgD,CAAC;AAC1E,IAAIC,QAAQ,GAAGD,OAAO,CAAE,8CAA+C,CAAC;AACxE,IAAIE,OAAO,GAAGF,OAAO,CAAE,sCAAuC,CAAC;AAC/D,IAAIG,WAAW,GAAGH,OAAO,CAAE,2CAA4C,CAAC;AACxE,IAAII,SAAS,GAAGJ,OAAO,CAAE,wCAAyC,CAAC;;AAGnE;;AAEA;AACA,IAAIK,KAAK,GAAG,CAAE,CAAC,EAAE,CAAC,CAAE;;AAGpB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,QAAQA,CAAEC,CAAC,EAAEC,CAAC,EAAG;EACzB,IAAIC,EAAE;EACN,IAAIC,EAAE;;EAEN;EACAR,OAAO,CAACS,MAAM,CAAEJ,CAAC,EAAEF,KAAK,EAAE,CAAC,EAAE,CAAE,CAAC;EAChCI,EAAE,GAAGJ,KAAK,CAAE,CAAC,CAAE;;EAEf;EACAI,EAAE,IAAIR,QAAQ;;EAEd;EACAS,EAAE,GAAGP,WAAW,CAAEK,CAAE,CAAC;;EAErB;EACAE,EAAE,IAAIX,SAAS;;EAEf;EACAU,EAAE,IAAIC,EAAE;;EAER;EACA,OAAON,SAAS,CAAEK,EAAE,EAAEJ,KAAK,CAAE,CAAC,CAAG,CAAC;AACnC;;AAGA;;AAEAO,MAAM,CAACC,OAAO,GAAGP,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}