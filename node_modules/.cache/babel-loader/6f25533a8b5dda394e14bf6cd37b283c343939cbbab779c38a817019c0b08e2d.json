{"ast":null,"code":"import { ValidationError } from './errors';\nimport { isString, isPlainObject, exists } from './helpers';\nvar stringError = 'is not a string';\nvar objError = 'is not an object';\nvar nilError = 'is nil';\nexport function assertUserIdentity(event) {\n  var USER_FIELD_NAME = '.userId/anonymousId/previousId/groupId';\n  var getAnyUserId = function (event) {\n    var _a, _b, _c;\n    return (_c = (_b = (_a = event.userId) !== null && _a !== void 0 ? _a : event.anonymousId) !== null && _b !== void 0 ? _b : event.groupId) !== null && _c !== void 0 ? _c : event.previousId;\n  };\n  var id = getAnyUserId(event);\n  if (!exists(id)) {\n    throw new ValidationError(USER_FIELD_NAME, nilError);\n  } else if (!isString(id)) {\n    throw new ValidationError(USER_FIELD_NAME, stringError);\n  }\n}\nexport function assertEventExists(event) {\n  if (!exists(event)) {\n    throw new ValidationError('Event', nilError);\n  }\n  if (typeof event !== 'object') {\n    throw new ValidationError('Event', objError);\n  }\n}\nexport function assertEventType(event) {\n  if (!isString(event.type)) {\n    throw new ValidationError('.type', stringError);\n  }\n}\nexport function assertTrackEventName(event) {\n  if (!isString(event.event)) {\n    throw new ValidationError('.event', stringError);\n  }\n}\nexport function assertTrackEventProperties(event) {\n  if (!isPlainObject(event.properties)) {\n    throw new ValidationError('.properties', objError);\n  }\n}\nexport function assertTraits(event) {\n  if (!isPlainObject(event.traits)) {\n    throw new ValidationError('.traits', objError);\n  }\n}\nexport function assertMessageId(event) {\n  if (!isString(event.messageId)) {\n    throw new ValidationError('.messageId', stringError);\n  }\n}\nexport function validateEvent(event) {\n  assertEventExists(event);\n  assertEventType(event);\n  assertMessageId(event);\n  if (event.type === 'track') {\n    assertTrackEventName(event);\n    assertTrackEventProperties(event);\n  }\n  if (['group', 'identify'].includes(event.type)) {\n    assertTraits(event);\n  }\n  assertUserIdentity(event);\n}","map":{"version":3,"names":["ValidationError","isString","isPlainObject","exists","stringError","objError","nilError","assertUserIdentity","event","USER_FIELD_NAME","getAnyUserId","_a","_b","_c","userId","anonymousId","groupId","previousId","id","assertEventExists","assertEventType","type","assertTrackEventName","assertTrackEventProperties","properties","assertTraits","traits","assertMessageId","messageId","validateEvent","includes"],"sources":["/Users/bcaudillo/Desktop/Projects/todo/node_modules/@segment/analytics-core/src/validation/assertions.ts"],"sourcesContent":["import { CoreSegmentEvent } from '../events'\nimport { ValidationError } from './errors'\nimport { isString, isPlainObject, exists } from './helpers'\n\nconst stringError = 'is not a string'\nconst objError = 'is not an object'\nconst nilError = 'is nil'\n\nexport function assertUserIdentity(event: CoreSegmentEvent): void {\n  const USER_FIELD_NAME = '.userId/anonymousId/previousId/groupId'\n\n  const getAnyUserId = (event: CoreSegmentEvent) =>\n    event.userId ?? event.anonymousId ?? event.groupId ?? event.previousId\n\n  const id = getAnyUserId(event)\n  if (!exists(id)) {\n    throw new ValidationError(USER_FIELD_NAME, nilError)\n  } else if (!isString(id)) {\n    throw new ValidationError(USER_FIELD_NAME, stringError)\n  }\n}\n\nexport function assertEventExists(\n  event?: CoreSegmentEvent | null\n): asserts event is CoreSegmentEvent {\n  if (!exists(event)) {\n    throw new ValidationError('Event', nilError)\n  }\n  if (typeof event !== 'object') {\n    throw new ValidationError('Event', objError)\n  }\n}\n\nexport function assertEventType(event: CoreSegmentEvent): void {\n  if (!isString(event.type)) {\n    throw new ValidationError('.type', stringError)\n  }\n}\n\nexport function assertTrackEventName(event: CoreSegmentEvent): void {\n  if (!isString(event.event)) {\n    throw new ValidationError('.event', stringError)\n  }\n}\n\nexport function assertTrackEventProperties(event: CoreSegmentEvent): void {\n  if (!isPlainObject(event.properties)) {\n    throw new ValidationError('.properties', objError)\n  }\n}\n\nexport function assertTraits(event: CoreSegmentEvent): void {\n  if (!isPlainObject(event.traits)) {\n    throw new ValidationError('.traits', objError)\n  }\n}\n\nexport function assertMessageId(event: CoreSegmentEvent): void {\n  if (!isString(event.messageId)) {\n    throw new ValidationError('.messageId', stringError)\n  }\n}\n\nexport function validateEvent(event?: CoreSegmentEvent | null) {\n  assertEventExists(event)\n  assertEventType(event)\n  assertMessageId(event)\n\n  if (event.type === 'track') {\n    assertTrackEventName(event)\n    assertTrackEventProperties(event)\n  }\n\n  if (['group', 'identify'].includes(event.type)) {\n    assertTraits(event)\n  }\n\n  assertUserIdentity(event)\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}