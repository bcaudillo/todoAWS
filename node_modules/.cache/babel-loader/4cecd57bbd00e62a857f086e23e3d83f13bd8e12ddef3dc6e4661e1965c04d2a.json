{"ast":null,"code":"var _a;\nvar _b;\nimport { getGlobal } from '../../lib/get-global';\nvar env = getGlobal();\n// The code below assumes the inspector extension will use Object.assign\n// to add the inspect interface on to this object reference (unless the\n// extension code ran first and has already set up the variable)\nvar inspectorHost = (_a = (_b = env)['__SEGMENT_INSPECTOR__']) !== null && _a !== void 0 ? _a : _b['__SEGMENT_INSPECTOR__'] = {};\nexport var attachInspector = function (analytics) {\n  var _a;\n  return (_a = inspectorHost.attach) === null || _a === void 0 ? void 0 : _a.call(inspectorHost, analytics);\n};","map":{"version":3,"names":["getGlobal","env","inspectorHost","_a","_b","attachInspector","analytics","attach","call"],"sources":["/Users/bcaudillo/Desktop/Projects/todo/node_modules/@segment/analytics-next/src/core/inspector/index.ts"],"sourcesContent":["import { getGlobal } from '../../lib/get-global'\nimport type { Analytics } from '../analytics'\n\nconst env = getGlobal()\n\n// The code below assumes the inspector extension will use Object.assign\n// to add the inspect interface on to this object reference (unless the\n// extension code ran first and has already set up the variable)\nconst inspectorHost: {\n  attach: (analytics: Analytics) => void\n} = ((env as any)['__SEGMENT_INSPECTOR__'] ??= {})\n\nexport const attachInspector = (analytics: Analytics) =>\n  inspectorHost.attach?.(analytics as any)\n"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,sBAAsB;AAGhD,IAAMC,GAAG,GAAGD,SAAS,EAAE;AAEvB;AACA;AACA;AACA,IAAME,aAAa,GAEf,CAAAC,EAAA,IAAAC,EAAA,GAAEH,GAAW,EAAC,uBAAuB,eAAAE,EAAA,cAAAA,EAAA,GAAAC,EAAA,CAAvB,uBAAuB,IAAM,EAAG;AAElD,OAAO,IAAMC,eAAe,GAAG,SAAAA,CAACC,SAAoB;EAAA,IAAAH,EAAA;EAClD,QAAAA,EAAA,GAAAD,aAAa,CAACK,MAAM,cAAAJ,EAAA,uBAAAA,EAAA,CAAAK,IAAA,CAAAN,aAAA,EAAGI,SAAgB,CAAC;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}