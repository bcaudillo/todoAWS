{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { isOffline } from '../../core/connection';\nimport { PriorityQueue } from '../../lib/priority-queue';\nimport { PersistedPriorityQueue } from '../../lib/priority-queue/persisted';\nimport { toFacade } from '../../lib/to-facade';\nimport batch from './batched-dispatcher';\nimport standard from './fetch-dispatcher';\nimport { normalize } from './normalize';\nimport { scheduleFlush } from './schedule-flush';\nimport { SEGMENT_API_HOST } from '../../core/constants';\nfunction onAlias(analytics, json) {\n  var _a, _b, _c, _d;\n  var user = analytics.user();\n  json.previousId = (_c = (_b = (_a = json.previousId) !== null && _a !== void 0 ? _a : json.from) !== null && _b !== void 0 ? _b : user.id()) !== null && _c !== void 0 ? _c : user.anonymousId();\n  json.userId = (_d = json.userId) !== null && _d !== void 0 ? _d : json.to;\n  delete json.from;\n  delete json.to;\n  return json;\n}\nexport function segmentio(analytics, settings, integrations) {\n  var _a, _b, _c;\n  // Attach `pagehide` before buffer is created so that inflight events are added\n  // to the buffer before the buffer persists events in its own `pagehide` handler.\n  window.addEventListener('pagehide', function () {\n    buffer.push.apply(buffer, Array.from(inflightEvents));\n    inflightEvents.clear();\n  });\n  var writeKey = (_a = settings === null || settings === void 0 ? void 0 : settings.apiKey) !== null && _a !== void 0 ? _a : '';\n  var buffer = analytics.options.disableClientPersistence ? new PriorityQueue(analytics.queue.queue.maxAttempts, []) : new PersistedPriorityQueue(analytics.queue.queue.maxAttempts, \"\".concat(writeKey, \":dest-Segment.io\"));\n  var inflightEvents = new Set();\n  var flushing = false;\n  var apiHost = (_b = settings === null || settings === void 0 ? void 0 : settings.apiHost) !== null && _b !== void 0 ? _b : SEGMENT_API_HOST;\n  var protocol = (_c = settings === null || settings === void 0 ? void 0 : settings.protocol) !== null && _c !== void 0 ? _c : 'https';\n  var remote = \"\".concat(protocol, \"://\").concat(apiHost);\n  var deliveryStrategy = settings === null || settings === void 0 ? void 0 : settings.deliveryStrategy;\n  var client = (deliveryStrategy === null || deliveryStrategy === void 0 ? void 0 : deliveryStrategy.strategy) === 'batching' ? batch(apiHost, deliveryStrategy.config) : standard(deliveryStrategy === null || deliveryStrategy === void 0 ? void 0 : deliveryStrategy.config);\n  function send(ctx) {\n    return __awaiter(this, void 0, void 0, function () {\n      var path, json;\n      return __generator(this, function (_a) {\n        if (isOffline()) {\n          buffer.push(ctx);\n          // eslint-disable-next-line @typescript-eslint/no-use-before-define\n          scheduleFlush(flushing, buffer, segmentio, scheduleFlush);\n          return [2 /*return*/, ctx];\n        }\n        inflightEvents.add(ctx);\n        path = ctx.event.type.charAt(0);\n        json = toFacade(ctx.event).json();\n        if (ctx.event.type === 'track') {\n          delete json.traits;\n        }\n        if (ctx.event.type === 'alias') {\n          json = onAlias(analytics, json);\n        }\n        return [2 /*return*/, client.dispatch(\"\".concat(remote, \"/\").concat(path), normalize(analytics, json, settings, integrations)).then(function () {\n          return ctx;\n        }).catch(function () {\n          buffer.pushWithBackoff(ctx);\n          // eslint-disable-next-line @typescript-eslint/no-use-before-define\n          scheduleFlush(flushing, buffer, segmentio, scheduleFlush);\n          return ctx;\n        }).finally(function () {\n          inflightEvents.delete(ctx);\n        })];\n      });\n    });\n  }\n  var segmentio = {\n    name: 'Segment.io',\n    type: 'destination',\n    version: '0.1.0',\n    isLoaded: function () {\n      return true;\n    },\n    load: function () {\n      return Promise.resolve();\n    },\n    track: send,\n    identify: send,\n    page: send,\n    alias: send,\n    group: send,\n    screen: send\n  };\n  // Buffer may already have items if they were previously stored in localStorage.\n  // Start flushing them immediately.\n  if (buffer.todo) {\n    scheduleFlush(flushing, buffer, segmentio, scheduleFlush);\n  }\n  return segmentio;\n}","map":{"version":3,"names":["isOffline","PriorityQueue","PersistedPriorityQueue","toFacade","batch","standard","normalize","scheduleFlush","SEGMENT_API_HOST","onAlias","analytics","json","user","previousId","_c","_b","_a","from","id","anonymousId","userId","_d","to","segmentio","settings","integrations","window","addEventListener","buffer","push","apply","Array","inflightEvents","clear","writeKey","apiKey","options","disableClientPersistence","queue","maxAttempts","concat","Set","flushing","apiHost","protocol","remote","deliveryStrategy","client","strategy","config","send","ctx","add","path","event","type","charAt","traits","dispatch","then","catch","pushWithBackoff","finally","delete","name","version","isLoaded","load","Promise","resolve","track","identify","page","alias","group","screen","todo"],"sources":["/Users/bcaudillo/Desktop/Projects/todo/node_modules/@segment/analytics-next/src/plugins/segmentio/index.ts"],"sourcesContent":["import { Facade } from '@segment/facade'\nimport { Analytics } from '../../core/analytics'\nimport { LegacySettings } from '../../browser'\nimport { isOffline } from '../../core/connection'\nimport { Context } from '../../core/context'\nimport { Plugin } from '../../core/plugin'\nimport { PriorityQueue } from '../../lib/priority-queue'\nimport { PersistedPriorityQueue } from '../../lib/priority-queue/persisted'\nimport { toFacade } from '../../lib/to-facade'\nimport batch, { BatchingDispatchConfig } from './batched-dispatcher'\nimport standard, { StandardDispatcherConfig } from './fetch-dispatcher'\nimport { normalize } from './normalize'\nimport { scheduleFlush } from './schedule-flush'\nimport { SEGMENT_API_HOST } from '../../core/constants'\n\ntype DeliveryStrategy =\n  | {\n      strategy?: 'standard'\n      config?: StandardDispatcherConfig\n    }\n  | {\n      strategy?: 'batching'\n      config?: BatchingDispatchConfig\n    }\n\nexport type SegmentioSettings = {\n  apiKey: string\n  apiHost?: string\n  protocol?: 'http' | 'https'\n\n  addBundledMetadata?: boolean\n  unbundledIntegrations?: string[]\n  bundledConfigIds?: string[]\n  unbundledConfigIds?: string[]\n\n  maybeBundledConfigIds?: Record<string, string[]>\n\n  deliveryStrategy?: DeliveryStrategy\n}\n\ntype JSON = ReturnType<Facade['json']>\n\nfunction onAlias(analytics: Analytics, json: JSON): JSON {\n  const user = analytics.user()\n  json.previousId =\n    json.previousId ?? json.from ?? user.id() ?? user.anonymousId()\n  json.userId = json.userId ?? json.to\n  delete json.from\n  delete json.to\n  return json\n}\n\nexport function segmentio(\n  analytics: Analytics,\n  settings?: SegmentioSettings,\n  integrations?: LegacySettings['integrations']\n): Plugin {\n  // Attach `pagehide` before buffer is created so that inflight events are added\n  // to the buffer before the buffer persists events in its own `pagehide` handler.\n  window.addEventListener('pagehide', () => {\n    buffer.push(...Array.from(inflightEvents))\n    inflightEvents.clear()\n  })\n\n  const writeKey = settings?.apiKey ?? ''\n\n  const buffer = analytics.options.disableClientPersistence\n    ? new PriorityQueue<Context>(analytics.queue.queue.maxAttempts, [])\n    : new PersistedPriorityQueue(\n        analytics.queue.queue.maxAttempts,\n        `${writeKey}:dest-Segment.io`\n      )\n\n  const inflightEvents = new Set<Context>()\n  const flushing = false\n\n  const apiHost = settings?.apiHost ?? SEGMENT_API_HOST\n  const protocol = settings?.protocol ?? 'https'\n  const remote = `${protocol}://${apiHost}`\n\n  const deliveryStrategy = settings?.deliveryStrategy\n  const client =\n    deliveryStrategy?.strategy === 'batching'\n      ? batch(apiHost, deliveryStrategy.config)\n      : standard(deliveryStrategy?.config as StandardDispatcherConfig)\n\n  async function send(ctx: Context): Promise<Context> {\n    if (isOffline()) {\n      buffer.push(ctx)\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      scheduleFlush(flushing, buffer, segmentio, scheduleFlush)\n      return ctx\n    }\n\n    inflightEvents.add(ctx)\n\n    const path = ctx.event.type.charAt(0)\n\n    let json = toFacade(ctx.event).json()\n\n    if (ctx.event.type === 'track') {\n      delete json.traits\n    }\n\n    if (ctx.event.type === 'alias') {\n      json = onAlias(analytics, json)\n    }\n\n    return client\n      .dispatch(\n        `${remote}/${path}`,\n        normalize(analytics, json, settings, integrations)\n      )\n      .then(() => ctx)\n      .catch(() => {\n        buffer.pushWithBackoff(ctx)\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        scheduleFlush(flushing, buffer, segmentio, scheduleFlush)\n        return ctx\n      })\n      .finally(() => {\n        inflightEvents.delete(ctx)\n      })\n  }\n\n  const segmentio: Plugin = {\n    name: 'Segment.io',\n    type: 'destination',\n    version: '0.1.0',\n    isLoaded: (): boolean => true,\n    load: (): Promise<void> => Promise.resolve(),\n    track: send,\n    identify: send,\n    page: send,\n    alias: send,\n    group: send,\n    screen: send,\n  }\n\n  // Buffer may already have items if they were previously stored in localStorage.\n  // Start flushing them immediately.\n  if (buffer.todo) {\n    scheduleFlush(flushing, buffer, segmentio, scheduleFlush)\n  }\n\n  return segmentio\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}