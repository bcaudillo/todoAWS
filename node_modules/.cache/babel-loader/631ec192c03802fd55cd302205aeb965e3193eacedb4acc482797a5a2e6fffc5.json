{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nvar compactMetricType = function (type) {\n  var enums = {\n    gauge: 'g',\n    counter: 'c'\n  };\n  return enums[type];\n};\nvar CoreStats = /** @class */function () {\n  function CoreStats() {\n    this.metrics = [];\n  }\n  CoreStats.prototype.increment = function (metric, by, tags) {\n    if (by === void 0) {\n      by = 1;\n    }\n    this.metrics.push({\n      metric: metric,\n      value: by,\n      tags: tags !== null && tags !== void 0 ? tags : [],\n      type: 'counter',\n      timestamp: Date.now()\n    });\n  };\n  CoreStats.prototype.gauge = function (metric, value, tags) {\n    this.metrics.push({\n      metric: metric,\n      value: value,\n      tags: tags !== null && tags !== void 0 ? tags : [],\n      type: 'gauge',\n      timestamp: Date.now()\n    });\n  };\n  CoreStats.prototype.flush = function () {\n    var formatted = this.metrics.map(function (m) {\n      return __assign(__assign({}, m), {\n        tags: m.tags.join(',')\n      });\n    });\n    // ie doesn't like console.table\n    if (console.table) {\n      console.table(formatted);\n    } else {\n      console.log(formatted);\n    }\n    this.metrics = [];\n  };\n  /**\n   * compact keys for smaller payload\n   */\n  CoreStats.prototype.serialize = function () {\n    return this.metrics.map(function (m) {\n      return {\n        m: m.metric,\n        v: m.value,\n        t: m.tags,\n        k: compactMetricType(m.type),\n        e: m.timestamp\n      };\n    });\n  };\n  return CoreStats;\n}();\nexport { CoreStats };\nvar NullStats = /** @class */function (_super) {\n  __extends(NullStats, _super);\n  function NullStats() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  NullStats.prototype.gauge = function () {\n    var _args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      _args[_i] = arguments[_i];\n    }\n  };\n  NullStats.prototype.increment = function () {\n    var _args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      _args[_i] = arguments[_i];\n    }\n  };\n  NullStats.prototype.flush = function () {\n    var _args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      _args[_i] = arguments[_i];\n    }\n  };\n  NullStats.prototype.serialize = function () {\n    var _args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      _args[_i] = arguments[_i];\n    }\n    return [];\n  };\n  return NullStats;\n}(CoreStats);\nexport { NullStats };","map":{"version":3,"names":["compactMetricType","type","enums","gauge","counter","CoreStats","metrics","prototype","increment","metric","by","tags","push","value","timestamp","Date","now","flush","formatted","map","m","__assign","join","console","table","log","serialize","v","t","k","e","NullStats","_super","__extends","_args","_i","arguments","length"],"sources":["/Users/bcaudillo/Desktop/Projects/todo/node_modules/@segment/analytics-core/src/stats/index.ts"],"sourcesContent":["type CompactMetricType = 'g' | 'c'\n\nexport type CoreMetricType = 'gauge' | 'counter'\n\nexport interface CoreMetric {\n  metric: string\n  value: number\n  type: CoreMetricType\n  tags: string[]\n  timestamp: number // unit milliseconds\n}\n\nexport interface CompactMetric {\n  m: string // metric name\n  v: number // value\n  k: CompactMetricType\n  t: string[] // tags\n  e: number // timestamp in unit milliseconds\n}\n\nconst compactMetricType = (type: CoreMetricType): CompactMetricType => {\n  const enums: Record<CoreMetricType, CompactMetricType> = {\n    gauge: 'g',\n    counter: 'c',\n  }\n  return enums[type]\n}\n\nexport abstract class CoreStats {\n  metrics: CoreMetric[] = []\n  increment(metric: string, by = 1, tags?: string[]): void {\n    this.metrics.push({\n      metric,\n      value: by,\n      tags: tags ?? [],\n      type: 'counter',\n      timestamp: Date.now(),\n    })\n  }\n\n  gauge(metric: string, value: number, tags?: string[]): void {\n    this.metrics.push({\n      metric,\n      value,\n      tags: tags ?? [],\n      type: 'gauge',\n      timestamp: Date.now(),\n    })\n  }\n\n  flush(): void {\n    const formatted = this.metrics.map((m) => ({\n      ...m,\n      tags: m.tags.join(','),\n    }))\n    // ie doesn't like console.table\n    if (console.table) {\n      console.table(formatted)\n    } else {\n      console.log(formatted)\n    }\n    this.metrics = []\n  }\n\n  /**\n   * compact keys for smaller payload\n   */\n  serialize(): CompactMetric[] {\n    return this.metrics.map((m) => {\n      return {\n        m: m.metric,\n        v: m.value,\n        t: m.tags,\n        k: compactMetricType(m.type),\n        e: m.timestamp,\n      }\n    })\n  }\n}\n\nexport class NullStats extends CoreStats {\n  override gauge(..._args: Parameters<CoreStats['gauge']>) {}\n  override increment(..._args: Parameters<CoreStats['increment']>) {}\n  override flush(..._args: Parameters<CoreStats['flush']>) {}\n  override serialize(..._args: Parameters<CoreStats['serialize']>) {\n    return []\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}