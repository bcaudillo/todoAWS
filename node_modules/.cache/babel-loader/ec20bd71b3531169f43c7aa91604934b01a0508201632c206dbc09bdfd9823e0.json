{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { fetch } from '../../lib/fetch';\nimport { version } from '../../generated/version';\nimport { getVersionType } from '../../lib/version-type';\nimport { SEGMENT_API_HOST } from '../constants';\nvar createRemoteMetric = function (metric, tags, versionType) {\n  var formattedTags = tags.reduce(function (acc, t) {\n    var _a = t.split(':'),\n      k = _a[0],\n      v = _a[1];\n    acc[k] = v;\n    return acc;\n  }, {});\n  return {\n    type: 'Counter',\n    metric: metric,\n    value: 1,\n    tags: __assign(__assign({}, formattedTags), {\n      library: 'analytics.js',\n      library_version: versionType === 'web' ? \"next-\".concat(version) : \"npm:next-\".concat(version)\n    })\n  };\n};\nfunction logError(err) {\n  console.error('Error sending segment performance metrics', err);\n}\nvar RemoteMetrics = /** @class */function () {\n  function RemoteMetrics(options) {\n    var _this = this;\n    var _a, _b, _c, _d, _e;\n    this.host = (_a = options === null || options === void 0 ? void 0 : options.host) !== null && _a !== void 0 ? _a : SEGMENT_API_HOST;\n    this.sampleRate = (_b = options === null || options === void 0 ? void 0 : options.sampleRate) !== null && _b !== void 0 ? _b : 1;\n    this.flushTimer = (_c = options === null || options === void 0 ? void 0 : options.flushTimer) !== null && _c !== void 0 ? _c : 30 * 1000; /* 30s */\n    this.maxQueueSize = (_d = options === null || options === void 0 ? void 0 : options.maxQueueSize) !== null && _d !== void 0 ? _d : 20;\n    this.protocol = (_e = options === null || options === void 0 ? void 0 : options.protocol) !== null && _e !== void 0 ? _e : 'https';\n    this.queue = [];\n    if (this.sampleRate > 0) {\n      var flushing_1 = false;\n      var run_1 = function () {\n        if (flushing_1) {\n          return;\n        }\n        flushing_1 = true;\n        _this.flush().catch(logError);\n        flushing_1 = false;\n        setTimeout(run_1, _this.flushTimer);\n      };\n      run_1();\n    }\n  }\n  RemoteMetrics.prototype.increment = function (metric, tags) {\n    // All metrics are part of an allow list in Tracking API\n    if (!metric.includes('analytics_js.')) {\n      return;\n    }\n    // /m doesn't like empty tags\n    if (tags.length === 0) {\n      return;\n    }\n    if (Math.random() > this.sampleRate) {\n      return;\n    }\n    if (this.queue.length >= this.maxQueueSize) {\n      return;\n    }\n    var remoteMetric = createRemoteMetric(metric, tags, getVersionType());\n    this.queue.push(remoteMetric);\n    if (metric.includes('error')) {\n      this.flush().catch(logError);\n    }\n  };\n  RemoteMetrics.prototype.flush = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this.queue.length <= 0) {\n              return [2 /*return*/];\n            }\n            return [4 /*yield*/, this.send().catch(function (error) {\n              logError(error);\n              _this.sampleRate = 0;\n            })];\n          case 1:\n            _a.sent();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  RemoteMetrics.prototype.send = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var payload, headers, url;\n      return __generator(this, function (_a) {\n        payload = {\n          series: this.queue\n        };\n        this.queue = [];\n        headers = {\n          'Content-Type': 'text/plain'\n        };\n        url = \"\".concat(this.protocol, \"://\").concat(this.host, \"/m\");\n        return [2 /*return*/, fetch(url, {\n          headers: headers,\n          body: JSON.stringify(payload),\n          method: 'POST'\n        })];\n      });\n    });\n  };\n  return RemoteMetrics;\n}();\nexport { RemoteMetrics };","map":{"version":3,"names":["fetch","version","getVersionType","SEGMENT_API_HOST","createRemoteMetric","metric","tags","versionType","formattedTags","reduce","acc","t","_a","split","k","v","type","value","__assign","library","library_version","concat","logError","err","console","error","RemoteMetrics","options","_this","host","sampleRate","_b","flushTimer","_c","maxQueueSize","_d","protocol","_e","queue","flushing_1","run_1","flush","catch","setTimeout","prototype","increment","includes","length","Math","random","remoteMetric","push","send","sent","payload","series","headers","url","body","JSON","stringify","method"],"sources":["/Users/bcaudillo/Desktop/Projects/todo/node_modules/@segment/analytics-next/src/core/stats/remote-metrics.ts"],"sourcesContent":["import { fetch } from '../../lib/fetch'\nimport { version } from '../../generated/version'\nimport { getVersionType } from '../../lib/version-type'\nimport { SEGMENT_API_HOST } from '../constants'\n\nexport interface MetricsOptions {\n  host?: string\n  sampleRate?: number\n  flushTimer?: number\n  maxQueueSize?: number\n  protocol?: 'http' | 'https'\n}\n\n/**\n * Type expected by the segment metrics API endpoint\n */\ntype RemoteMetric = {\n  type: 'Counter'\n  metric: string\n  value: 1\n  tags: {\n    library: string\n    library_version: string\n    [key: string]: string\n  }\n}\n\nconst createRemoteMetric = (\n  metric: string,\n  tags: string[],\n  versionType: 'web' | 'npm'\n): RemoteMetric => {\n  const formattedTags = tags.reduce((acc, t) => {\n    const [k, v] = t.split(':')\n    acc[k] = v\n    return acc\n  }, {} as Record<string, string>)\n\n  return {\n    type: 'Counter',\n    metric,\n    value: 1,\n    tags: {\n      ...formattedTags,\n      library: 'analytics.js',\n      library_version:\n        versionType === 'web' ? `next-${version}` : `npm:next-${version}`,\n    },\n  }\n}\n\nfunction logError(err: unknown): void {\n  console.error('Error sending segment performance metrics', err)\n}\n\nexport class RemoteMetrics {\n  private host: string\n  private flushTimer: number\n  private maxQueueSize: number\n  private protocol: string\n\n  sampleRate: number\n  queue: RemoteMetric[]\n\n  constructor(options?: MetricsOptions) {\n    this.host = options?.host ?? SEGMENT_API_HOST\n    this.sampleRate = options?.sampleRate ?? 1\n    this.flushTimer = options?.flushTimer ?? 30 * 1000 /* 30s */\n    this.maxQueueSize = options?.maxQueueSize ?? 20\n    this.protocol = options?.protocol ?? 'https'\n\n    this.queue = []\n\n    if (this.sampleRate > 0) {\n      let flushing = false\n\n      const run = (): void => {\n        if (flushing) {\n          return\n        }\n\n        flushing = true\n        this.flush().catch(logError)\n\n        flushing = false\n\n        setTimeout(run, this.flushTimer)\n      }\n      run()\n    }\n  }\n\n  increment(metric: string, tags: string[]): void {\n    // All metrics are part of an allow list in Tracking API\n    if (!metric.includes('analytics_js.')) {\n      return\n    }\n\n    // /m doesn't like empty tags\n    if (tags.length === 0) {\n      return\n    }\n\n    if (Math.random() > this.sampleRate) {\n      return\n    }\n\n    if (this.queue.length >= this.maxQueueSize) {\n      return\n    }\n\n    const remoteMetric = createRemoteMetric(metric, tags, getVersionType())\n    this.queue.push(remoteMetric)\n\n    if (metric.includes('error')) {\n      this.flush().catch(logError)\n    }\n  }\n\n  async flush(): Promise<void> {\n    if (this.queue.length <= 0) {\n      return\n    }\n\n    await this.send().catch((error) => {\n      logError(error)\n      this.sampleRate = 0\n    })\n  }\n\n  private async send(): Promise<Response> {\n    const payload = { series: this.queue }\n    this.queue = []\n\n    const headers = { 'Content-Type': 'text/plain' }\n    const url = `${this.protocol}://${this.host}/m`\n\n    return fetch(url, {\n      headers,\n      body: JSON.stringify(payload),\n      method: 'POST',\n    })\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}