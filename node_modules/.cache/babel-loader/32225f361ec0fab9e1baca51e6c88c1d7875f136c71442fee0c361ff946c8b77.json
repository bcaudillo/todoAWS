{"ast":null,"code":"import { __awaiter, __generator, __spreadArray } from \"tslib\";\nimport { getNextIntegrationsURL } from '../../lib/parse-cdn';\nimport { loadScript, unloadScript } from '../../lib/load-script';\nfunction normalizeName(name) {\n  return name.toLowerCase().replace('.', '').replace(/\\s+/g, '-');\n}\nfunction obfuscatePathName(pathName, obfuscate) {\n  if (obfuscate === void 0) {\n    obfuscate = false;\n  }\n  return obfuscate ? btoa(pathName).replace(/=/g, '') : undefined;\n}\nexport function resolveIntegrationNameFromSource(integrationSource) {\n  return ('Integration' in integrationSource ? integrationSource.Integration : integrationSource).prototype.name;\n}\nfunction recordLoadMetrics(fullPath, ctx, name) {\n  var _a, _b;\n  try {\n    var metric = ((_b = (_a = window === null || window === void 0 ? void 0 : window.performance) === null || _a === void 0 ? void 0 : _a.getEntriesByName(fullPath, 'resource')) !== null && _b !== void 0 ? _b : [])[0];\n    // we assume everything that took under 100ms is cached\n    metric && ctx.stats.gauge('legacy_destination_time', Math.round(metric.duration), __spreadArray([name], metric.duration < 100 ? ['cached'] : [], true));\n  } catch (_) {\n    // not available\n  }\n}\nexport function buildIntegration(integrationSource, integrationSettings, analyticsInstance) {\n  var integrationCtr;\n  // GA and Appcues use a different interface to instantiating integrations\n  if ('Integration' in integrationSource) {\n    var analyticsStub = {\n      user: function () {\n        return analyticsInstance.user();\n      },\n      addIntegration: function () {}\n    };\n    integrationSource(analyticsStub);\n    integrationCtr = integrationSource.Integration;\n  } else {\n    integrationCtr = integrationSource;\n  }\n  var integration = new integrationCtr(integrationSettings);\n  integration.analytics = analyticsInstance;\n  return integration;\n}\nexport function loadIntegration(ctx, name, version, obfuscate) {\n  return __awaiter(this, void 0, void 0, function () {\n    var pathName, obfuscatedPathName, path, fullPath, err_1, deps;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          pathName = normalizeName(name);\n          obfuscatedPathName = obfuscatePathName(pathName, obfuscate);\n          path = getNextIntegrationsURL();\n          fullPath = \"\".concat(path, \"/integrations/\").concat(obfuscatedPathName !== null && obfuscatedPathName !== void 0 ? obfuscatedPathName : pathName, \"/\").concat(version, \"/\").concat(obfuscatedPathName !== null && obfuscatedPathName !== void 0 ? obfuscatedPathName : pathName, \".dynamic.js.gz\");\n          _a.label = 1;\n        case 1:\n          _a.trys.push([1, 3,, 4]);\n          return [4 /*yield*/, loadScript(fullPath)];\n        case 2:\n          _a.sent();\n          recordLoadMetrics(fullPath, ctx, name);\n          return [3 /*break*/, 4];\n        case 3:\n          err_1 = _a.sent();\n          ctx.stats.gauge('legacy_destination_time', -1, [\"plugin:\".concat(name), \"failed\"]);\n          throw err_1;\n        case 4:\n          deps = window[\"\".concat(pathName, \"Deps\")];\n          return [4 /*yield*/, Promise.all(deps.map(function (dep) {\n            return loadScript(path + dep + '.gz');\n          }))\n          // @ts-ignore\n          ];\n        case 5:\n          _a.sent();\n          // @ts-ignore\n          window[\"\".concat(pathName, \"Loader\")]();\n          return [2 /*return*/, window[\n          // @ts-ignore\n          \"\".concat(pathName, \"Integration\")]];\n      }\n    });\n  });\n}\nexport function unloadIntegration(name, version, obfuscate) {\n  return __awaiter(this, void 0, void 0, function () {\n    var path, pathName, obfuscatedPathName, fullPath;\n    return __generator(this, function (_a) {\n      path = getNextIntegrationsURL();\n      pathName = normalizeName(name);\n      obfuscatedPathName = obfuscatePathName(name, obfuscate);\n      fullPath = \"\".concat(path, \"/integrations/\").concat(obfuscatedPathName !== null && obfuscatedPathName !== void 0 ? obfuscatedPathName : pathName, \"/\").concat(version, \"/\").concat(obfuscatedPathName !== null && obfuscatedPathName !== void 0 ? obfuscatedPathName : pathName, \".dynamic.js.gz\");\n      return [2 /*return*/, unloadScript(fullPath)];\n    });\n  });\n}\nexport function resolveVersion(settings) {\n  var _a, _b, _c, _d;\n  return (_d = (_b = (_a = settings === null || settings === void 0 ? void 0 : settings.versionSettings) === null || _a === void 0 ? void 0 : _a.override) !== null && _b !== void 0 ? _b : (_c = settings === null || settings === void 0 ? void 0 : settings.versionSettings) === null || _c === void 0 ? void 0 : _c.version) !== null && _d !== void 0 ? _d : 'latest';\n}","map":{"version":3,"names":["getNextIntegrationsURL","loadScript","unloadScript","normalizeName","name","toLowerCase","replace","obfuscatePathName","pathName","obfuscate","btoa","undefined","resolveIntegrationNameFromSource","integrationSource","Integration","prototype","recordLoadMetrics","fullPath","ctx","metric","_b","_a","window","performance","getEntriesByName","stats","gauge","Math","round","duration","__spreadArray","_","buildIntegration","integrationSettings","analyticsInstance","integrationCtr","analyticsStub","user","addIntegration","integration","analytics","loadIntegration","version","obfuscatedPathName","path","concat","sent","err_1","deps","Promise","all","map","dep","unloadIntegration","resolveVersion","settings","_d","versionSettings","override","_c"],"sources":["/Users/bcaudillo/Desktop/Projects/todo/node_modules/@segment/analytics-next/src/plugins/ajs-destination/loader.ts"],"sourcesContent":["import { Analytics } from '../../core/analytics'\nimport { LegacyIntegrationConfiguration } from '../../browser'\nimport { getNextIntegrationsURL } from '../../lib/parse-cdn'\nimport { Context } from '../../core/context'\nimport { User } from '../../core/user'\nimport { loadScript, unloadScript } from '../../lib/load-script'\nimport {\n  LegacyIntegration,\n  ClassicIntegrationBuilder,\n  ClassicIntegrationSource,\n} from './types'\n\nfunction normalizeName(name: string): string {\n  return name.toLowerCase().replace('.', '').replace(/\\s+/g, '-')\n}\n\nfunction obfuscatePathName(pathName: string, obfuscate = false): string | void {\n  return obfuscate ? btoa(pathName).replace(/=/g, '') : undefined\n}\n\nexport function resolveIntegrationNameFromSource(\n  integrationSource: ClassicIntegrationSource\n) {\n  return (\n    'Integration' in integrationSource\n      ? integrationSource.Integration\n      : integrationSource\n  ).prototype.name\n}\n\nfunction recordLoadMetrics(fullPath: string, ctx: Context, name: string): void {\n  try {\n    const [metric] =\n      window?.performance?.getEntriesByName(fullPath, 'resource') ?? []\n    // we assume everything that took under 100ms is cached\n    metric &&\n      ctx.stats.gauge('legacy_destination_time', Math.round(metric.duration), [\n        name,\n        ...(metric.duration < 100 ? ['cached'] : []),\n      ])\n  } catch (_) {\n    // not available\n  }\n}\n\nexport function buildIntegration(\n  integrationSource: ClassicIntegrationSource,\n  integrationSettings: { [key: string]: any },\n  analyticsInstance: Analytics\n): LegacyIntegration {\n  let integrationCtr: ClassicIntegrationBuilder\n  // GA and Appcues use a different interface to instantiating integrations\n  if ('Integration' in integrationSource) {\n    const analyticsStub = {\n      user: (): User => analyticsInstance.user(),\n      addIntegration: (): void => {},\n    }\n\n    integrationSource(analyticsStub)\n    integrationCtr = integrationSource.Integration\n  } else {\n    integrationCtr = integrationSource\n  }\n\n  const integration = new integrationCtr(integrationSettings)\n  integration.analytics = analyticsInstance\n  return integration\n}\n\nexport async function loadIntegration(\n  ctx: Context,\n  name: string,\n  version: string,\n  obfuscate?: boolean\n): Promise<ClassicIntegrationSource> {\n  const pathName = normalizeName(name)\n  const obfuscatedPathName = obfuscatePathName(pathName, obfuscate)\n  const path = getNextIntegrationsURL()\n\n  const fullPath = `${path}/integrations/${\n    obfuscatedPathName ?? pathName\n  }/${version}/${obfuscatedPathName ?? pathName}.dynamic.js.gz`\n\n  try {\n    await loadScript(fullPath)\n    recordLoadMetrics(fullPath, ctx, name)\n  } catch (err) {\n    ctx.stats.gauge('legacy_destination_time', -1, [`plugin:${name}`, `failed`])\n    throw err\n  }\n\n  // @ts-ignore\n  const deps: string[] = window[`${pathName}Deps`]\n  await Promise.all(deps.map((dep) => loadScript(path + dep + '.gz')))\n\n  // @ts-ignore\n  window[`${pathName}Loader`]()\n\n  return window[\n    // @ts-ignore\n    `${pathName}Integration`\n  ] as ClassicIntegrationSource\n}\n\nexport async function unloadIntegration(\n  name: string,\n  version: string,\n  obfuscate?: boolean\n): Promise<void> {\n  const path = getNextIntegrationsURL()\n  const pathName = normalizeName(name)\n  const obfuscatedPathName = obfuscatePathName(name, obfuscate)\n\n  const fullPath = `${path}/integrations/${\n    obfuscatedPathName ?? pathName\n  }/${version}/${obfuscatedPathName ?? pathName}.dynamic.js.gz`\n\n  return unloadScript(fullPath)\n}\n\nexport function resolveVersion(\n  settings?: LegacyIntegrationConfiguration\n): string {\n  return (\n    settings?.versionSettings?.override ??\n    settings?.versionSettings?.version ??\n    'latest'\n  )\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}