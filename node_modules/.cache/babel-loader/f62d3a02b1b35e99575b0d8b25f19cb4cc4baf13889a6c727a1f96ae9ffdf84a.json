{"ast":null,"code":"import { getGlobalAnalytics } from './global-analytics-helper';\nimport { embeddedWriteKey } from './embedded-write-key';\nvar analyticsScriptRegex = /(https:\\/\\/.*)\\/analytics\\.js\\/v1\\/(?:.*?)\\/(?:platform|analytics.*)?/;\nvar getCDNUrlFromScriptTag = function () {\n  var cdn;\n  var scripts = Array.prototype.slice.call(document.querySelectorAll('script'));\n  scripts.forEach(function (s) {\n    var _a;\n    var src = (_a = s.getAttribute('src')) !== null && _a !== void 0 ? _a : '';\n    var result = analyticsScriptRegex.exec(src);\n    if (result && result[1]) {\n      cdn = result[1];\n    }\n  });\n  return cdn;\n};\nvar _globalCDN; // set globalCDN as in-memory singleton\nvar getGlobalCDNUrl = function () {\n  var _a;\n  var result = _globalCDN !== null && _globalCDN !== void 0 ? _globalCDN : (_a = getGlobalAnalytics()) === null || _a === void 0 ? void 0 : _a._cdn;\n  return result;\n};\nexport var setGlobalCDNUrl = function (cdn) {\n  var globalAnalytics = getGlobalAnalytics();\n  if (globalAnalytics) {\n    globalAnalytics._cdn = cdn;\n  }\n  _globalCDN = cdn;\n};\nexport var getCDN = function () {\n  var globalCdnUrl = getGlobalCDNUrl();\n  if (globalCdnUrl) return globalCdnUrl;\n  var cdnFromScriptTag = getCDNUrlFromScriptTag();\n  if (cdnFromScriptTag) {\n    return cdnFromScriptTag;\n  } else {\n    // it's possible that the CDN is not found in the page because:\n    // - the script is loaded through a proxy\n    // - the script is removed after execution\n    // in this case, we fall back to the default Segment CDN\n    return \"https://cdn.segment.com\";\n  }\n};\nexport var getNextIntegrationsURL = function () {\n  var cdn = getCDN();\n  return \"\".concat(cdn, \"/next-integrations\");\n};\n/**\n * Replaces the CDN URL in the script tag with the one from Analytics.js 1.0\n *\n * @returns the path to Analytics JS 1.0\n **/\nexport function getLegacyAJSPath() {\n  var _a, _b, _c;\n  var writeKey = (_a = embeddedWriteKey()) !== null && _a !== void 0 ? _a : (_b = getGlobalAnalytics()) === null || _b === void 0 ? void 0 : _b._writeKey;\n  var scripts = Array.prototype.slice.call(document.querySelectorAll('script'));\n  var path = undefined;\n  for (var _i = 0, scripts_1 = scripts; _i < scripts_1.length; _i++) {\n    var s = scripts_1[_i];\n    var src = (_c = s.getAttribute('src')) !== null && _c !== void 0 ? _c : '';\n    var result = analyticsScriptRegex.exec(src);\n    if (result && result[1]) {\n      path = src;\n      break;\n    }\n  }\n  if (path) {\n    return path.replace('analytics.min.js', 'analytics.classic.js');\n  }\n  return \"https://cdn.segment.com/analytics.js/v1/\".concat(writeKey, \"/analytics.classic.js\");\n}","map":{"version":3,"names":["getGlobalAnalytics","embeddedWriteKey","analyticsScriptRegex","getCDNUrlFromScriptTag","cdn","scripts","Array","prototype","slice","call","document","querySelectorAll","forEach","s","src","_a","getAttribute","result","exec","_globalCDN","getGlobalCDNUrl","_cdn","setGlobalCDNUrl","globalAnalytics","getCDN","globalCdnUrl","cdnFromScriptTag","getNextIntegrationsURL","concat","getLegacyAJSPath","writeKey","_b","_writeKey","path","undefined","_i","scripts_1","length","_c","replace"],"sources":["/Users/bcaudillo/Desktop/Projects/todo/node_modules/@segment/analytics-next/src/lib/parse-cdn.ts"],"sourcesContent":["import { getGlobalAnalytics } from './global-analytics-helper'\nimport { embeddedWriteKey } from './embedded-write-key'\n\nconst analyticsScriptRegex =\n  /(https:\\/\\/.*)\\/analytics\\.js\\/v1\\/(?:.*?)\\/(?:platform|analytics.*)?/\nconst getCDNUrlFromScriptTag = (): string | undefined => {\n  let cdn: string | undefined\n  const scripts = Array.prototype.slice.call(\n    document.querySelectorAll('script')\n  )\n  scripts.forEach((s) => {\n    const src = s.getAttribute('src') ?? ''\n    const result = analyticsScriptRegex.exec(src)\n\n    if (result && result[1]) {\n      cdn = result[1]\n    }\n  })\n  return cdn\n}\n\nlet _globalCDN: string | undefined // set globalCDN as in-memory singleton\nconst getGlobalCDNUrl = (): string | undefined => {\n  const result = _globalCDN ?? getGlobalAnalytics()?._cdn\n  return result\n}\n\nexport const setGlobalCDNUrl = (cdn: string) => {\n  const globalAnalytics = getGlobalAnalytics()\n  if (globalAnalytics) {\n    globalAnalytics._cdn = cdn\n  }\n  _globalCDN = cdn\n}\n\nexport const getCDN = (): string => {\n  const globalCdnUrl = getGlobalCDNUrl()\n\n  if (globalCdnUrl) return globalCdnUrl\n\n  const cdnFromScriptTag = getCDNUrlFromScriptTag()\n\n  if (cdnFromScriptTag) {\n    return cdnFromScriptTag\n  } else {\n    // it's possible that the CDN is not found in the page because:\n    // - the script is loaded through a proxy\n    // - the script is removed after execution\n    // in this case, we fall back to the default Segment CDN\n    return `https://cdn.segment.com`\n  }\n}\n\nexport const getNextIntegrationsURL = () => {\n  const cdn = getCDN()\n  return `${cdn}/next-integrations`\n}\n\n/**\n * Replaces the CDN URL in the script tag with the one from Analytics.js 1.0\n *\n * @returns the path to Analytics JS 1.0\n **/\nexport function getLegacyAJSPath(): string {\n  const writeKey = embeddedWriteKey() ?? getGlobalAnalytics()?._writeKey\n\n  const scripts = Array.prototype.slice.call(\n    document.querySelectorAll('script')\n  )\n  let path: string | undefined = undefined\n\n  for (const s of scripts) {\n    const src = s.getAttribute('src') ?? ''\n    const result = analyticsScriptRegex.exec(src)\n\n    if (result && result[1]) {\n      path = src\n      break\n    }\n  }\n\n  if (path) {\n    return path.replace('analytics.min.js', 'analytics.classic.js')\n  }\n\n  return `https://cdn.segment.com/analytics.js/v1/${writeKey}/analytics.classic.js`\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}