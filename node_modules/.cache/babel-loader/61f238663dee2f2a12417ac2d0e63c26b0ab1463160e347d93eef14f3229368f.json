{"ast":null,"code":"import { StoreType } from './types';\nexport function isArrayOfStoreType(s) {\n  return s && s.stores && Array.isArray(s.stores) && s.stores.every(function (e) {\n    return Object.values(StoreType).includes(e);\n  });\n}\nexport function isStoreTypeWithSettings(s) {\n  return typeof s === 'object' && s.name !== undefined;\n}","map":{"version":3,"names":["StoreType","isArrayOfStoreType","s","stores","Array","isArray","every","e","Object","values","includes","isStoreTypeWithSettings","name","undefined"],"sources":["/Users/bcaudillo/Desktop/Projects/todo/node_modules/@segment/analytics-next/src/core/storage/settings.ts"],"sourcesContent":["import { StoreType, StoreTypeWithSettings } from './types'\n\nexport type UniversalStorageSettings = { stores: StoreType[] }\n\n// This is setup this way to permit eventually a different set of settings for custom storage\nexport type StorageSettings = UniversalStorageSettings\n\nexport function isArrayOfStoreType(\n  s: StorageSettings\n): s is UniversalStorageSettings {\n  return (\n    s &&\n    s.stores &&\n    Array.isArray(s.stores) &&\n    s.stores.every((e) => Object.values(StoreType).includes(e))\n  )\n}\n\nexport function isStoreTypeWithSettings(\n  s: StoreTypeWithSettings | StoreType\n): s is StoreTypeWithSettings {\n  return typeof s === 'object' && s.name !== undefined\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAA+B,SAAS;AAO1D,OAAM,SAAUC,kBAAkBA,CAChCC,CAAkB;EAElB,OACEA,CAAC,IACDA,CAAC,CAACC,MAAM,IACRC,KAAK,CAACC,OAAO,CAACH,CAAC,CAACC,MAAM,CAAC,IACvBD,CAAC,CAACC,MAAM,CAACG,KAAK,CAAC,UAACC,CAAC;IAAK,OAAAC,MAAM,CAACC,MAAM,CAACT,SAAS,CAAC,CAACU,QAAQ,CAACH,CAAC,CAAC;EAApC,CAAoC,CAAC;AAE/D;AAEA,OAAM,SAAUI,uBAAuBA,CACrCT,CAAoC;EAEpC,OAAO,OAAOA,CAAC,KAAK,QAAQ,IAAIA,CAAC,CAACU,IAAI,KAAKC,SAAS;AACtD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}