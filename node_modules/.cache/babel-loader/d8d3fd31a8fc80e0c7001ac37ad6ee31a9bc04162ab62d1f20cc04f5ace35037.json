{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { CoreContext, ContextCancelation } from '../context';\nfunction tryAsync(fn) {\n  return __awaiter(this, void 0, void 0, function () {\n    var err_1;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          _a.trys.push([0, 2,, 3]);\n          return [4 /*yield*/, fn()];\n        case 1:\n          return [2 /*return*/, _a.sent()];\n        case 2:\n          err_1 = _a.sent();\n          return [2 /*return*/, Promise.reject(err_1)];\n        case 3:\n          return [2 /*return*/];\n      }\n    });\n  });\n}\nexport function attempt(ctx, plugin) {\n  ctx.log('debug', 'plugin', {\n    plugin: plugin.name\n  });\n  var start = new Date().getTime();\n  var hook = plugin[ctx.event.type];\n  if (hook === undefined) {\n    return Promise.resolve(ctx);\n  }\n  var newCtx = tryAsync(function () {\n    return hook.apply(plugin, [ctx]);\n  }).then(function (ctx) {\n    var done = new Date().getTime() - start;\n    ctx.stats.gauge('plugin_time', done, [\"plugin:\".concat(plugin.name)]);\n    return ctx;\n  }).catch(function (err) {\n    if (err instanceof ContextCancelation && err.type === 'middleware_cancellation') {\n      throw err;\n    }\n    if (err instanceof ContextCancelation) {\n      ctx.log('warn', err.type, {\n        plugin: plugin.name,\n        error: err\n      });\n      return err;\n    }\n    ctx.log('error', 'plugin Error', {\n      plugin: plugin.name,\n      error: err\n    });\n    ctx.stats.increment('plugin_error', 1, [\"plugin:\".concat(plugin.name)]);\n    return err;\n  });\n  return newCtx;\n}\nexport function ensure(ctx, plugin) {\n  return attempt(ctx, plugin).then(function (newContext) {\n    if (newContext instanceof CoreContext) {\n      return newContext;\n    }\n    ctx.log('debug', 'Context canceled');\n    ctx.stats.increment('context_canceled');\n    ctx.cancel(newContext);\n  });\n}","map":{"version":3,"names":["CoreContext","ContextCancelation","tryAsync","fn","_a","sent","Promise","reject","err_1","attempt","ctx","plugin","log","name","start","Date","getTime","hook","event","type","undefined","resolve","newCtx","apply","then","done","stats","gauge","concat","catch","err","error","increment","ensure","newContext","cancel"],"sources":["/Users/bcaudillo/Desktop/Projects/todo/node_modules/@segment/analytics-core/src/queue/delivery.ts"],"sourcesContent":["import { CoreContext, ContextCancelation } from '../context'\nimport { CorePlugin } from '../plugins'\n\nasync function tryAsync<T>(fn: () => T | Promise<T>): Promise<T> {\n  try {\n    return await fn()\n  } catch (err) {\n    return Promise.reject(err)\n  }\n}\n\nexport function attempt<Ctx extends CoreContext = CoreContext>(\n  ctx: Ctx,\n  plugin: CorePlugin<Ctx>\n): Promise<Ctx | ContextCancelation | Error> {\n  ctx.log('debug', 'plugin', { plugin: plugin.name })\n  const start = new Date().getTime()\n\n  const hook = plugin[ctx.event.type]\n  if (hook === undefined) {\n    return Promise.resolve(ctx)\n  }\n\n  const newCtx = tryAsync(() => hook.apply(plugin, [ctx]))\n    .then((ctx) => {\n      const done = new Date().getTime() - start\n      ctx.stats.gauge('plugin_time', done, [`plugin:${plugin.name}`])\n\n      return ctx\n    })\n    .catch((err: Error | ContextCancelation) => {\n      if (\n        err instanceof ContextCancelation &&\n        err.type === 'middleware_cancellation'\n      ) {\n        throw err\n      }\n\n      if (err instanceof ContextCancelation) {\n        ctx.log('warn', err.type, {\n          plugin: plugin.name,\n          error: err,\n        })\n\n        return err\n      }\n\n      ctx.log('error', 'plugin Error', {\n        plugin: plugin.name,\n        error: err,\n      })\n      ctx.stats.increment('plugin_error', 1, [`plugin:${plugin.name}`])\n\n      return err\n    })\n\n  return newCtx\n}\n\nexport function ensure<Ctx extends CoreContext = CoreContext>(\n  ctx: Ctx,\n  plugin: CorePlugin<Ctx>\n): Promise<Ctx | undefined> {\n  return attempt(ctx, plugin).then((newContext) => {\n    if (newContext instanceof CoreContext) {\n      return newContext\n    }\n\n    ctx.log('debug', 'Context canceled')\n    ctx.stats.increment('context_canceled')\n    ctx.cancel(newContext)\n  })\n}\n"],"mappings":";AAAA,SAASA,WAAW,EAAEC,kBAAkB,QAAQ,YAAY;AAG5D,SAAeC,QAAQA,CAAIC,EAAwB;;;;;;;UAExC,qBAAMA,EAAE,EAAE;;UAAjB,sBAAOC,EAAA,CAAAC,IAAA,EAAU;;;UAEjB,sBAAOC,OAAO,CAACC,MAAM,CAACC,KAAG,CAAC;;;;;;;AAI9B,OAAM,SAAUC,OAAOA,CACrBC,GAAQ,EACRC,MAAuB;EAEvBD,GAAG,CAACE,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE;IAAED,MAAM,EAAEA,MAAM,CAACE;EAAI,CAAE,CAAC;EACnD,IAAMC,KAAK,GAAG,IAAIC,IAAI,EAAE,CAACC,OAAO,EAAE;EAElC,IAAMC,IAAI,GAAGN,MAAM,CAACD,GAAG,CAACQ,KAAK,CAACC,IAAI,CAAC;EACnC,IAAIF,IAAI,KAAKG,SAAS,EAAE;IACtB,OAAOd,OAAO,CAACe,OAAO,CAACX,GAAG,CAAC;;EAG7B,IAAMY,MAAM,GAAGpB,QAAQ,CAAC;IAAM,OAAAe,IAAI,CAACM,KAAK,CAACZ,MAAM,EAAE,CAACD,GAAG,CAAC,CAAC;EAAzB,CAAyB,CAAC,CACrDc,IAAI,CAAC,UAACd,GAAG;IACR,IAAMe,IAAI,GAAG,IAAIV,IAAI,EAAE,CAACC,OAAO,EAAE,GAAGF,KAAK;IACzCJ,GAAG,CAACgB,KAAK,CAACC,KAAK,CAAC,aAAa,EAAEF,IAAI,EAAE,CAAC,UAAAG,MAAA,CAAUjB,MAAM,CAACE,IAAI,CAAE,CAAC,CAAC;IAE/D,OAAOH,GAAG;EACZ,CAAC,CAAC,CACDmB,KAAK,CAAC,UAACC,GAA+B;IACrC,IACEA,GAAG,YAAY7B,kBAAkB,IACjC6B,GAAG,CAACX,IAAI,KAAK,yBAAyB,EACtC;MACA,MAAMW,GAAG;;IAGX,IAAIA,GAAG,YAAY7B,kBAAkB,EAAE;MACrCS,GAAG,CAACE,GAAG,CAAC,MAAM,EAAEkB,GAAG,CAACX,IAAI,EAAE;QACxBR,MAAM,EAAEA,MAAM,CAACE,IAAI;QACnBkB,KAAK,EAAED;OACR,CAAC;MAEF,OAAOA,GAAG;;IAGZpB,GAAG,CAACE,GAAG,CAAC,OAAO,EAAE,cAAc,EAAE;MAC/BD,MAAM,EAAEA,MAAM,CAACE,IAAI;MACnBkB,KAAK,EAAED;KACR,CAAC;IACFpB,GAAG,CAACgB,KAAK,CAACM,SAAS,CAAC,cAAc,EAAE,CAAC,EAAE,CAAC,UAAAJ,MAAA,CAAUjB,MAAM,CAACE,IAAI,CAAE,CAAC,CAAC;IAEjE,OAAOiB,GAAG;EACZ,CAAC,CAAC;EAEJ,OAAOR,MAAM;AACf;AAEA,OAAM,SAAUW,MAAMA,CACpBvB,GAAQ,EACRC,MAAuB;EAEvB,OAAOF,OAAO,CAACC,GAAG,EAAEC,MAAM,CAAC,CAACa,IAAI,CAAC,UAACU,UAAU;IAC1C,IAAIA,UAAU,YAAYlC,WAAW,EAAE;MACrC,OAAOkC,UAAU;;IAGnBxB,GAAG,CAACE,GAAG,CAAC,OAAO,EAAE,kBAAkB,CAAC;IACpCF,GAAG,CAACgB,KAAK,CAACM,SAAS,CAAC,kBAAkB,CAAC;IACvCtB,GAAG,CAACyB,MAAM,CAACD,UAAU,CAAC;EACxB,CAAC,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}