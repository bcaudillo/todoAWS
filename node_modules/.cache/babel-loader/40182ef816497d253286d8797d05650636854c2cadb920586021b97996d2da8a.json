{"ast":null,"code":"\"use strict\";\n\nvar isodate = require(\"@segment/isodate\");\nvar milliseconds = require(\"./milliseconds\");\nvar seconds = require(\"./seconds\");\nvar objProto = Object.prototype;\nvar toStr = objProto.toString;\nfunction isDate(value) {\n  return toStr.call(value) === \"[object Date]\";\n}\nfunction isNumber(value) {\n  return toStr.call(value) === \"[object Number]\";\n}\n\n/**\n * Returns a new Javascript Date object, allowing a variety of extra input types\n * over the native Date constructor.\n *\n * @param {Date|string|number} val\n */\nmodule.exports = function newDate(val) {\n  if (isDate(val)) return val;\n  if (isNumber(val)) return new Date(toMs(val));\n\n  // date strings\n  if (isodate.is(val)) {\n    return isodate.parse(val);\n  }\n  if (milliseconds.is(val)) {\n    return milliseconds.parse(val);\n  }\n  if (seconds.is(val)) {\n    return seconds.parse(val);\n  }\n\n  // fallback to Date.parse\n  return new Date(val);\n};\n\n/**\n * If the number passed val is seconds from the epoch, turn it into milliseconds.\n * Milliseconds would be greater than 31557600000 (December 31, 1970).\n *\n * @param {number} num\n */\nfunction toMs(num) {\n  if (num < 31557600000) return num * 1000;\n  return num;\n}","map":{"version":3,"names":["isodate","require","milliseconds","seconds","objProto","Object","prototype","toStr","toString","isDate","value","call","isNumber","module","exports","newDate","val","Date","toMs","is","parse","num"],"sources":["/Users/bcaudillo/Desktop/Projects/todo/node_modules/new-date/lib/index.js"],"sourcesContent":["\"use strict\";\n\nvar isodate = require(\"@segment/isodate\");\nvar milliseconds = require(\"./milliseconds\");\nvar seconds = require(\"./seconds\");\n\nvar objProto = Object.prototype;\nvar toStr = objProto.toString;\n\nfunction isDate(value) {\n  return toStr.call(value) === \"[object Date]\";\n}\n\nfunction isNumber(value) {\n  return toStr.call(value) === \"[object Number]\";\n}\n\n/**\n * Returns a new Javascript Date object, allowing a variety of extra input types\n * over the native Date constructor.\n *\n * @param {Date|string|number} val\n */\nmodule.exports = function newDate(val) {\n  if (isDate(val)) return val;\n  if (isNumber(val)) return new Date(toMs(val));\n\n  // date strings\n  if (isodate.is(val)) {\n    return isodate.parse(val);\n  }\n  if (milliseconds.is(val)) {\n    return milliseconds.parse(val);\n  }\n  if (seconds.is(val)) {\n    return seconds.parse(val);\n  }\n\n  // fallback to Date.parse\n  return new Date(val);\n};\n\n/**\n * If the number passed val is seconds from the epoch, turn it into milliseconds.\n * Milliseconds would be greater than 31557600000 (December 31, 1970).\n *\n * @param {number} num\n */\nfunction toMs(num) {\n  if (num < 31557600000) return num * 1000;\n  return num;\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,OAAO,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AACzC,IAAIC,YAAY,GAAGD,OAAO,CAAC,gBAAgB,CAAC;AAC5C,IAAIE,OAAO,GAAGF,OAAO,CAAC,WAAW,CAAC;AAElC,IAAIG,QAAQ,GAAGC,MAAM,CAACC,SAAS;AAC/B,IAAIC,KAAK,GAAGH,QAAQ,CAACI,QAAQ;AAE7B,SAASC,MAAMA,CAACC,KAAK,EAAE;EACrB,OAAOH,KAAK,CAACI,IAAI,CAACD,KAAK,CAAC,KAAK,eAAe;AAC9C;AAEA,SAASE,QAAQA,CAACF,KAAK,EAAE;EACvB,OAAOH,KAAK,CAACI,IAAI,CAACD,KAAK,CAAC,KAAK,iBAAiB;AAChD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACAG,MAAM,CAACC,OAAO,GAAG,SAASC,OAAOA,CAACC,GAAG,EAAE;EACrC,IAAIP,MAAM,CAACO,GAAG,CAAC,EAAE,OAAOA,GAAG;EAC3B,IAAIJ,QAAQ,CAACI,GAAG,CAAC,EAAE,OAAO,IAAIC,IAAI,CAACC,IAAI,CAACF,GAAG,CAAC,CAAC;;EAE7C;EACA,IAAIhB,OAAO,CAACmB,EAAE,CAACH,GAAG,CAAC,EAAE;IACnB,OAAOhB,OAAO,CAACoB,KAAK,CAACJ,GAAG,CAAC;EAC3B;EACA,IAAId,YAAY,CAACiB,EAAE,CAACH,GAAG,CAAC,EAAE;IACxB,OAAOd,YAAY,CAACkB,KAAK,CAACJ,GAAG,CAAC;EAChC;EACA,IAAIb,OAAO,CAACgB,EAAE,CAACH,GAAG,CAAC,EAAE;IACnB,OAAOb,OAAO,CAACiB,KAAK,CAACJ,GAAG,CAAC;EAC3B;;EAEA;EACA,OAAO,IAAIC,IAAI,CAACD,GAAG,CAAC;AACtB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,IAAIA,CAACG,GAAG,EAAE;EACjB,IAAIA,GAAG,GAAG,WAAW,EAAE,OAAOA,GAAG,GAAG,IAAI;EACxC,OAAOA,GAAG;AACZ","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}