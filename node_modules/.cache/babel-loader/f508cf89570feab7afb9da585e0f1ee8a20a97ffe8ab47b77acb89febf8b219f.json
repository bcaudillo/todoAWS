{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { isPlanEventEnabled } from '../../lib/is-plan-event-enabled';\nfunction disabledActionDestinations(plan, settings) {\n  var _a, _b;\n  if (!plan || !Object.keys(plan)) {\n    return {};\n  }\n  var disabledIntegrations = plan.integrations ? Object.keys(plan.integrations).filter(function (i) {\n    return plan.integrations[i] === false;\n  }) : [];\n  // This accounts for cases like Fullstory, where the settings.integrations\n  // contains a \"Fullstory\" object but settings.remotePlugins contains \"Fullstory (Actions)\"\n  var disabledRemotePlugins = [];\n  ((_a = settings.remotePlugins) !== null && _a !== void 0 ? _a : []).forEach(function (p) {\n    disabledIntegrations.forEach(function (int) {\n      if (p.creationName == int) {\n        disabledRemotePlugins.push(p.name);\n      }\n    });\n  });\n  return ((_b = settings.remotePlugins) !== null && _b !== void 0 ? _b : []).reduce(function (acc, p) {\n    if (p.settings['subscriptions']) {\n      if (disabledRemotePlugins.includes(p.name)) {\n        // @ts-expect-error element implicitly has an 'any' type because p.settings is a JSONObject\n        p.settings['subscriptions'].forEach(\n        // @ts-expect-error parameter 'sub' implicitly has an 'any' type\n        function (sub) {\n          return acc[\"\".concat(p.name, \" \").concat(sub.partnerAction)] = false;\n        });\n      }\n    }\n    return acc;\n  }, {});\n}\nexport function schemaFilter(track, settings) {\n  function filter(ctx) {\n    var plan = track;\n    var ev = ctx.event.event;\n    if (plan && ev) {\n      var planEvent = plan[ev];\n      if (!isPlanEventEnabled(plan, planEvent)) {\n        ctx.updateEvent('integrations', __assign(__assign({}, ctx.event.integrations), {\n          All: false,\n          'Segment.io': true\n        }));\n        return ctx;\n      } else {\n        var disabledActions = disabledActionDestinations(planEvent, settings);\n        ctx.updateEvent('integrations', __assign(__assign(__assign({}, ctx.event.integrations), planEvent === null || planEvent === void 0 ? void 0 : planEvent.integrations), disabledActions));\n      }\n    }\n    return ctx;\n  }\n  return {\n    name: 'Schema Filter',\n    version: '0.1.0',\n    isLoaded: function () {\n      return true;\n    },\n    load: function () {\n      return Promise.resolve();\n    },\n    type: 'before',\n    page: filter,\n    alias: filter,\n    track: filter,\n    identify: filter,\n    group: filter\n  };\n}","map":{"version":3,"names":["isPlanEventEnabled","disabledActionDestinations","plan","settings","Object","keys","disabledIntegrations","integrations","filter","i","disabledRemotePlugins","_a","remotePlugins","forEach","p","int","creationName","push","name","_b","reduce","acc","includes","sub","concat","partnerAction","schemaFilter","track","ctx","ev","event","planEvent","updateEvent","__assign","All","disabledActions","version","isLoaded","load","Promise","resolve","type","page","alias","identify","group"],"sources":["/Users/bcaudillo/Desktop/Projects/todo/node_modules/@segment/analytics-next/src/plugins/schema-filter/index.ts"],"sourcesContent":["import { LegacySettings } from '../../browser'\nimport { Context } from '../../core/context'\nimport { PlanEvent, TrackPlan } from '../../core/events/interfaces'\nimport { Plugin } from '../../core/plugin'\nimport { isPlanEventEnabled } from '../../lib/is-plan-event-enabled'\nimport { RemotePlugin } from '../remote-loader'\n\nfunction disabledActionDestinations(\n  plan: PlanEvent | undefined,\n  settings: LegacySettings\n): { [destination: string]: string[] } {\n  if (!plan || !Object.keys(plan)) {\n    return {}\n  }\n\n  const disabledIntegrations = plan.integrations\n    ? Object.keys(plan.integrations).filter(\n        (i) => plan.integrations![i] === false\n      )\n    : []\n\n  // This accounts for cases like Fullstory, where the settings.integrations\n  // contains a \"Fullstory\" object but settings.remotePlugins contains \"Fullstory (Actions)\"\n  const disabledRemotePlugins: string[] = []\n  ;(settings.remotePlugins ?? []).forEach((p: RemotePlugin) => {\n    disabledIntegrations.forEach((int) => {\n      if (p.creationName == int) {\n        disabledRemotePlugins.push(p.name)\n      }\n    })\n  })\n\n  return (settings.remotePlugins ?? []).reduce((acc, p) => {\n    if (p.settings['subscriptions']) {\n      if (disabledRemotePlugins.includes(p.name)) {\n        // @ts-expect-error element implicitly has an 'any' type because p.settings is a JSONObject\n        p.settings['subscriptions'].forEach(\n          // @ts-expect-error parameter 'sub' implicitly has an 'any' type\n          (sub) => (acc[`${p.name} ${sub.partnerAction}`] = false)\n        )\n      }\n    }\n    return acc\n  }, {})\n}\n\nexport function schemaFilter(\n  track: TrackPlan | undefined,\n  settings: LegacySettings\n): Plugin {\n  function filter(ctx: Context): Context {\n    const plan = track\n    const ev = ctx.event.event\n\n    if (plan && ev) {\n      const planEvent = plan[ev]\n      if (!isPlanEventEnabled(plan, planEvent)) {\n        ctx.updateEvent('integrations', {\n          ...ctx.event.integrations,\n          All: false,\n          'Segment.io': true,\n        })\n        return ctx\n      } else {\n        const disabledActions = disabledActionDestinations(planEvent, settings)\n\n        ctx.updateEvent('integrations', {\n          ...ctx.event.integrations,\n          ...planEvent?.integrations,\n          ...disabledActions,\n        })\n      }\n    }\n\n    return ctx\n  }\n\n  return {\n    name: 'Schema Filter',\n    version: '0.1.0',\n    isLoaded: () => true,\n    load: () => Promise.resolve(),\n    type: 'before',\n    page: filter,\n    alias: filter,\n    track: filter,\n    identify: filter,\n    group: filter,\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}