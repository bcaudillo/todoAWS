{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { isServer } from '../../core/environment';\nimport { loadScript } from '../../lib/load-script';\nimport { getNextIntegrationsURL } from '../../lib/parse-cdn';\nexport function remoteMiddlewares(ctx, settings, obfuscate) {\n  var _a;\n  return __awaiter(this, void 0, void 0, function () {\n    var path, remoteMiddleware, names, scripts, middleware;\n    var _this = this;\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          if (isServer()) {\n            return [2 /*return*/, []];\n          }\n          path = getNextIntegrationsURL();\n          remoteMiddleware = (_a = settings.enabledMiddleware) !== null && _a !== void 0 ? _a : {};\n          names = Object.entries(remoteMiddleware).filter(function (_a) {\n            var _ = _a[0],\n              enabled = _a[1];\n            return enabled;\n          }).map(function (_a) {\n            var name = _a[0];\n            return name;\n          });\n          scripts = names.map(function (name) {\n            return __awaiter(_this, void 0, void 0, function () {\n              var nonNamespaced, bundleName, fullPath, error_1;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    nonNamespaced = name.replace('@segment/', '');\n                    bundleName = nonNamespaced;\n                    if (obfuscate) {\n                      bundleName = btoa(nonNamespaced).replace(/=/g, '');\n                    }\n                    fullPath = \"\".concat(path, \"/middleware/\").concat(bundleName, \"/latest/\").concat(bundleName, \".js.gz\");\n                    _a.label = 1;\n                  case 1:\n                    _a.trys.push([1, 3,, 4]);\n                    return [4 /*yield*/, loadScript(fullPath)\n                    // @ts-ignore\n                    ];\n                  case 2:\n                    _a.sent();\n                    // @ts-ignore\n                    return [2 /*return*/, window[\"\".concat(nonNamespaced, \"Middleware\")]];\n                  case 3:\n                    error_1 = _a.sent();\n                    ctx.log('error', error_1);\n                    ctx.stats.increment('failed_remote_middleware');\n                    return [3 /*break*/, 4];\n                  case 4:\n                    return [2 /*return*/];\n                }\n              });\n            });\n          });\n          return [4 /*yield*/, Promise.all(scripts)];\n        case 1:\n          middleware = _b.sent();\n          middleware = middleware.filter(Boolean);\n          return [2 /*return*/, middleware];\n      }\n    });\n  });\n}","map":{"version":3,"names":["isServer","loadScript","getNextIntegrationsURL","remoteMiddlewares","ctx","settings","obfuscate","path","remoteMiddleware","_a","enabledMiddleware","names","Object","entries","filter","_","enabled","map","name","scripts","__awaiter","_this","nonNamespaced","replace","bundleName","btoa","fullPath","concat","sent","window","log","error_1","stats","increment","Promise","all","middleware","_b","Boolean"],"sources":["/Users/bcaudillo/Desktop/Projects/todo/node_modules/@segment/analytics-next/src/plugins/remote-middleware/index.ts"],"sourcesContent":["import { LegacySettings } from '../../browser'\nimport { Context } from '../../core/context'\nimport { isServer } from '../../core/environment'\nimport { loadScript } from '../../lib/load-script'\nimport { getNextIntegrationsURL } from '../../lib/parse-cdn'\nimport { MiddlewareFunction } from '../middleware'\n\nexport async function remoteMiddlewares(\n  ctx: Context,\n  settings: LegacySettings,\n  obfuscate?: boolean\n): Promise<MiddlewareFunction[]> {\n  if (isServer()) {\n    return []\n  }\n  const path = getNextIntegrationsURL()\n  const remoteMiddleware = settings.enabledMiddleware ?? {}\n  const names = Object.entries(remoteMiddleware)\n    .filter(([_, enabled]) => enabled)\n    .map(([name]) => name)\n\n  const scripts = names.map(async (name) => {\n    const nonNamespaced = name.replace('@segment/', '')\n    let bundleName = nonNamespaced\n    if (obfuscate) {\n      bundleName = btoa(nonNamespaced).replace(/=/g, '')\n    }\n    const fullPath = `${path}/middleware/${bundleName}/latest/${bundleName}.js.gz`\n\n    try {\n      await loadScript(fullPath)\n      // @ts-ignore\n      return window[`${nonNamespaced}Middleware`] as MiddlewareFunction\n    } catch (error: any) {\n      ctx.log('error', error)\n      ctx.stats.increment('failed_remote_middleware')\n    }\n  })\n\n  let middleware = await Promise.all(scripts)\n  middleware = middleware.filter(Boolean)\n\n  return middleware as MiddlewareFunction[]\n}\n"],"mappings":";AAEA,SAASA,QAAQ,QAAQ,wBAAwB;AACjD,SAASC,UAAU,QAAQ,uBAAuB;AAClD,SAASC,sBAAsB,QAAQ,qBAAqB;AAG5D,OAAM,SAAgBC,iBAAiBA,CACrCC,GAAY,EACZC,QAAwB,EACxBC,SAAmB;;;;;;;;UAEnB,IAAIN,QAAQ,EAAE,EAAE;YACd,sBAAO,EAAE;;UAELO,IAAI,GAAGL,sBAAsB,EAAE;UAC/BM,gBAAgB,GAAG,CAAAC,EAAA,GAAAJ,QAAQ,CAACK,iBAAiB,cAAAD,EAAA,cAAAA,EAAA,GAAI,EAAE;UACnDE,KAAK,GAAGC,MAAM,CAACC,OAAO,CAACL,gBAAgB,CAAC,CAC3CM,MAAM,CAAC,UAACL,EAAY;gBAAXM,CAAC,GAAAN,EAAA;cAAEO,OAAO,GAAAP,EAAA;YAAM,OAAAO,OAAO;UAAP,CAAO,CAAC,CACjCC,GAAG,CAAC,UAACR,EAAM;gBAALS,IAAI,GAAAT,EAAA;YAAM,OAAAS,IAAI;UAAJ,CAAI,CAAC;UAElBC,OAAO,GAAGR,KAAK,CAACM,GAAG,CAAC,UAAOC,IAAI;YAAA,OAAAE,SAAA,CAAAC,KAAA;;;;;oBAC7BC,aAAa,GAAGJ,IAAI,CAACK,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC;oBAC/CC,UAAU,GAAGF,aAAa;oBAC9B,IAAIhB,SAAS,EAAE;sBACbkB,UAAU,GAAGC,IAAI,CAACH,aAAa,CAAC,CAACC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;;oBAE9CG,QAAQ,GAAG,GAAAC,MAAA,CAAGpB,IAAI,kBAAAoB,MAAA,CAAeH,UAAU,cAAAG,MAAA,CAAWH,UAAU,WAAQ;;;;oBAG5E,qBAAMvB,UAAU,CAACyB,QAAQ;oBACzB;oBAAA,C;;oBADAjB,EAAA,CAAAmB,IAAA,EAA0B;oBAC1B;oBACA,sBAAOC,MAAM,CAAC,GAAAF,MAAA,CAAGL,aAAa,eAAY,CAAuB;;;oBAEjElB,GAAG,CAAC0B,GAAG,CAAC,OAAO,EAAEC,OAAK,CAAC;oBACvB3B,GAAG,CAAC4B,KAAK,CAACC,SAAS,CAAC,0BAA0B,CAAC;;;;;;;WAElD,CAAC;UAEe,qBAAMC,OAAO,CAACC,GAAG,CAAChB,OAAO,CAAC;;UAAvCiB,UAAU,GAAGC,EAAA,CAAAT,IAAA,EAA0B;UAC3CQ,UAAU,GAAGA,UAAU,CAACtB,MAAM,CAACwB,OAAO,CAAC;UAEvC,sBAAOF,UAAkC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}