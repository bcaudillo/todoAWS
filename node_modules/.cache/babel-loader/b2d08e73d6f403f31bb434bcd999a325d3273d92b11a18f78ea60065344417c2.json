{"ast":null,"code":"export var isInstallableIntegration = function (name, integrationSettings) {\n  var _a;\n  var type = integrationSettings.type,\n    bundlingStatus = integrationSettings.bundlingStatus,\n    versionSettings = integrationSettings.versionSettings;\n  // We use `!== 'unbundled'` (versus `=== 'bundled'`) to be inclusive of\n  // destinations without a defined value for `bundlingStatus`\n  var deviceMode = bundlingStatus !== 'unbundled' && (type === 'browser' || ((_a = versionSettings === null || versionSettings === void 0 ? void 0 : versionSettings.componentTypes) === null || _a === void 0 ? void 0 : _a.includes('browser')));\n  // checking for iterable is a quick fix we need in place to prevent\n  // errors showing Iterable as a failed destiantion. Ideally, we should\n  // fix the Iterable metadata instead, but that's a longer process.\n  return !name.startsWith('Segment') && name !== 'Iterable' && deviceMode;\n};\nexport var isDisabledIntegration = function (integrationName, globalIntegrations) {\n  var allDisableAndNotDefined = globalIntegrations.All === false && globalIntegrations[integrationName] === undefined;\n  return globalIntegrations[integrationName] === false || allDisableAndNotDefined;\n};","map":{"version":3,"names":["isInstallableIntegration","name","integrationSettings","type","bundlingStatus","versionSettings","deviceMode","_a","componentTypes","includes","startsWith","isDisabledIntegration","integrationName","globalIntegrations","allDisableAndNotDefined","All","undefined"],"sources":["/Users/bcaudillo/Desktop/Projects/todo/node_modules/@segment/analytics-next/src/plugins/ajs-destination/utils.ts"],"sourcesContent":["import { Integrations } from '@segment/analytics-core'\nimport { LegacyIntegrationConfiguration } from '../..'\n\nexport const isInstallableIntegration = (\n  name: string,\n  integrationSettings: LegacyIntegrationConfiguration\n) => {\n  const { type, bundlingStatus, versionSettings } = integrationSettings\n  // We use `!== 'unbundled'` (versus `=== 'bundled'`) to be inclusive of\n  // destinations without a defined value for `bundlingStatus`\n  const deviceMode =\n    bundlingStatus !== 'unbundled' &&\n    (type === 'browser' || versionSettings?.componentTypes?.includes('browser'))\n\n  // checking for iterable is a quick fix we need in place to prevent\n  // errors showing Iterable as a failed destiantion. Ideally, we should\n  // fix the Iterable metadata instead, but that's a longer process.\n  return !name.startsWith('Segment') && name !== 'Iterable' && deviceMode\n}\n\nexport const isDisabledIntegration = (\n  integrationName: string,\n  globalIntegrations: Integrations\n) => {\n  const allDisableAndNotDefined =\n    globalIntegrations.All === false &&\n    globalIntegrations[integrationName] === undefined\n\n  return (\n    globalIntegrations[integrationName] === false || allDisableAndNotDefined\n  )\n}\n"],"mappings":"AAGA,OAAO,IAAMA,wBAAwB,GAAG,SAAAA,CACtCC,IAAY,EACZC,mBAAmD;;EAE3C,IAAAC,IAAI,GAAsCD,mBAAmB,CAAAC,IAAzD;IAAEC,cAAc,GAAsBF,mBAAmB,CAAAE,cAAzC;IAAEC,eAAe,GAAKH,mBAAmB,CAAAG,eAAxB;EAC7C;EACA;EACA,IAAMC,UAAU,GACdF,cAAc,KAAK,WAAW,KAC7BD,IAAI,KAAK,SAAS,KAAI,CAAAI,EAAA,GAAAF,eAAe,aAAfA,eAAe,uBAAfA,eAAe,CAAEG,cAAc,cAAAD,EAAA,uBAAAA,EAAA,CAAEE,QAAQ,CAAC,SAAS,CAAC,EAAC;EAE9E;EACA;EACA;EACA,OAAO,CAACR,IAAI,CAACS,UAAU,CAAC,SAAS,CAAC,IAAIT,IAAI,KAAK,UAAU,IAAIK,UAAU;AACzE,CAAC;AAED,OAAO,IAAMK,qBAAqB,GAAG,SAAAA,CACnCC,eAAuB,EACvBC,kBAAgC;EAEhC,IAAMC,uBAAuB,GAC3BD,kBAAkB,CAACE,GAAG,KAAK,KAAK,IAChCF,kBAAkB,CAACD,eAAe,CAAC,KAAKI,SAAS;EAEnD,OACEH,kBAAkB,CAACD,eAAe,CAAC,KAAK,KAAK,IAAIE,uBAAuB;AAE5E,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}