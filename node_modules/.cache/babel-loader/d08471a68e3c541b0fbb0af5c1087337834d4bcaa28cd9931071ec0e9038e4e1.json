{"ast":null,"code":"// not adding to private method because those method names do not get minified atm, and does not use 'this'\nvar _logStoreKeyError = function (store, action, key, err) {\n  console.warn(\"\".concat(store.constructor.name, \": Can't \").concat(action, \" key \\\"\").concat(key, \"\\\" | Err: \").concat(err));\n};\n/**\n * Uses multiple storages in a priority list to get/set values in the order they are specified.\n */\nvar UniversalStorage = /** @class */function () {\n  function UniversalStorage(stores) {\n    this.stores = stores;\n  }\n  UniversalStorage.prototype.get = function (key) {\n    var val = null;\n    for (var _i = 0, _a = this.stores; _i < _a.length; _i++) {\n      var store = _a[_i];\n      try {\n        val = store.get(key);\n        if (val !== undefined && val !== null) {\n          return val;\n        }\n      } catch (e) {\n        _logStoreKeyError(store, 'get', key, e);\n      }\n    }\n    return null;\n  };\n  UniversalStorage.prototype.set = function (key, value) {\n    this.stores.forEach(function (store) {\n      try {\n        store.set(key, value);\n      } catch (e) {\n        _logStoreKeyError(store, 'set', key, e);\n      }\n    });\n  };\n  UniversalStorage.prototype.clear = function (key) {\n    this.stores.forEach(function (store) {\n      try {\n        store.remove(key);\n      } catch (e) {\n        _logStoreKeyError(store, 'remove', key, e);\n      }\n    });\n  };\n  /*\n    This is to support few scenarios where:\n    - value exist in one of the stores ( as a result of other stores being cleared from browser ) and we want to resync them\n    - read values in AJS 1.0 format ( for customers after 1.0 --> 2.0 migration ) and then re-write them in AJS 2.0 format\n  */\n  UniversalStorage.prototype.getAndSync = function (key) {\n    var val = this.get(key);\n    // legacy behavior, getAndSync can change the type of a value from number to string (AJS 1.0 stores numerical values as a number)\n    var coercedValue = typeof val === 'number' ? val.toString() : val;\n    this.set(key, coercedValue);\n    return coercedValue;\n  };\n  return UniversalStorage;\n}();\nexport { UniversalStorage };","map":{"version":3,"names":["_logStoreKeyError","store","action","key","err","console","warn","concat","constructor","name","UniversalStorage","stores","prototype","get","val","_i","_a","length","undefined","e","set","value","forEach","clear","remove","getAndSync","coercedValue","toString"],"sources":["/Users/bcaudillo/Desktop/Projects/todo/node_modules/@segment/analytics-next/src/core/storage/universalStorage.ts"],"sourcesContent":["import { Store, StorageObject } from './types'\n\n// not adding to private method because those method names do not get minified atm, and does not use 'this'\nconst _logStoreKeyError = (\n  store: Store,\n  action: 'set' | 'get' | 'remove',\n  key: string,\n  err: unknown\n) => {\n  console.warn(\n    `${store.constructor.name}: Can't ${action} key \"${key}\" | Err: ${err}`\n  )\n}\n\n/**\n * Uses multiple storages in a priority list to get/set values in the order they are specified.\n */\nexport class UniversalStorage<Data extends StorageObject = StorageObject> {\n  private stores: Store[]\n\n  constructor(stores: Store[]) {\n    this.stores = stores\n  }\n\n  get<K extends keyof Data>(key: K): Data[K] | null {\n    let val: Data[K] | null = null\n\n    for (const store of this.stores) {\n      try {\n        val = store.get(key) as Data[K] | null\n        if (val !== undefined && val !== null) {\n          return val\n        }\n      } catch (e) {\n        _logStoreKeyError(store, 'get', key, e)\n      }\n    }\n    return null\n  }\n\n  set<K extends keyof Data>(key: K, value: Data[K] | null): void {\n    this.stores.forEach((store) => {\n      try {\n        store.set(key, value)\n      } catch (e) {\n        _logStoreKeyError(store, 'set', key, e)\n      }\n    })\n  }\n\n  clear<K extends keyof Data>(key: K): void {\n    this.stores.forEach((store) => {\n      try {\n        store.remove(key)\n      } catch (e) {\n        _logStoreKeyError(store, 'remove', key, e)\n      }\n    })\n  }\n\n  /*\n    This is to support few scenarios where:\n    - value exist in one of the stores ( as a result of other stores being cleared from browser ) and we want to resync them\n    - read values in AJS 1.0 format ( for customers after 1.0 --> 2.0 migration ) and then re-write them in AJS 2.0 format\n  */\n  getAndSync<K extends keyof Data>(key: K): Data[K] | null {\n    const val = this.get(key)\n\n    // legacy behavior, getAndSync can change the type of a value from number to string (AJS 1.0 stores numerical values as a number)\n    const coercedValue = (typeof val === 'number' ? val.toString() : val) as\n      | Data[K]\n      | null\n\n    this.set(key, coercedValue)\n\n    return coercedValue\n  }\n}\n"],"mappings":"AAEA;AACA,IAAMA,iBAAiB,GAAG,SAAAA,CACxBC,KAAY,EACZC,MAAgC,EAChCC,GAAW,EACXC,GAAY;EAEZC,OAAO,CAACC,IAAI,CACV,GAAAC,MAAA,CAAGN,KAAK,CAACO,WAAW,CAACC,IAAI,cAAAF,MAAA,CAAWL,MAAM,aAAAK,MAAA,CAASJ,GAAG,gBAAAI,MAAA,CAAYH,GAAG,CAAE,CACxE;AACH,CAAC;AAED;;;AAGA,IAAAM,gBAAA;EAGE,SAAAA,iBAAYC,MAAe;IACzB,IAAI,CAACA,MAAM,GAAGA,MAAM;EACtB;EAEAD,gBAAA,CAAAE,SAAA,CAAAC,GAAG,GAAH,UAA0BV,GAAM;IAC9B,IAAIW,GAAG,GAAmB,IAAI;IAE9B,KAAoB,IAAAC,EAAA,IAAW,EAAXC,EAAA,OAAI,CAACL,MAAM,EAAXI,EAAA,GAAAC,EAAA,CAAAC,MAAW,EAAXF,EAAA,EAAW,EAAE;MAA5B,IAAMd,KAAK,GAAAe,EAAA,CAAAD,EAAA;MACd,IAAI;QACFD,GAAG,GAAGb,KAAK,CAACY,GAAG,CAACV,GAAG,CAAmB;QACtC,IAAIW,GAAG,KAAKI,SAAS,IAAIJ,GAAG,KAAK,IAAI,EAAE;UACrC,OAAOA,GAAG;;OAEb,CAAC,OAAOK,CAAC,EAAE;QACVnB,iBAAiB,CAACC,KAAK,EAAE,KAAK,EAAEE,GAAG,EAAEgB,CAAC,CAAC;;;IAG3C,OAAO,IAAI;EACb,CAAC;EAEDT,gBAAA,CAAAE,SAAA,CAAAQ,GAAG,GAAH,UAA0BjB,GAAM,EAAEkB,KAAqB;IACrD,IAAI,CAACV,MAAM,CAACW,OAAO,CAAC,UAACrB,KAAK;MACxB,IAAI;QACFA,KAAK,CAACmB,GAAG,CAACjB,GAAG,EAAEkB,KAAK,CAAC;OACtB,CAAC,OAAOF,CAAC,EAAE;QACVnB,iBAAiB,CAACC,KAAK,EAAE,KAAK,EAAEE,GAAG,EAAEgB,CAAC,CAAC;;IAE3C,CAAC,CAAC;EACJ,CAAC;EAEDT,gBAAA,CAAAE,SAAA,CAAAW,KAAK,GAAL,UAA4BpB,GAAM;IAChC,IAAI,CAACQ,MAAM,CAACW,OAAO,CAAC,UAACrB,KAAK;MACxB,IAAI;QACFA,KAAK,CAACuB,MAAM,CAACrB,GAAG,CAAC;OAClB,CAAC,OAAOgB,CAAC,EAAE;QACVnB,iBAAiB,CAACC,KAAK,EAAE,QAAQ,EAAEE,GAAG,EAAEgB,CAAC,CAAC;;IAE9C,CAAC,CAAC;EACJ,CAAC;EAED;;;;;EAKAT,gBAAA,CAAAE,SAAA,CAAAa,UAAU,GAAV,UAAiCtB,GAAM;IACrC,IAAMW,GAAG,GAAG,IAAI,CAACD,GAAG,CAACV,GAAG,CAAC;IAEzB;IACA,IAAMuB,YAAY,GAAI,OAAOZ,GAAG,KAAK,QAAQ,GAAGA,GAAG,CAACa,QAAQ,EAAE,GAAGb,GAEzD;IAER,IAAI,CAACM,GAAG,CAACjB,GAAG,EAAEuB,YAAY,CAAC;IAE3B,OAAOA,YAAY;EACrB,CAAC;EACH,OAAAhB,gBAAC;AAAD,CAAC,CA5DD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}