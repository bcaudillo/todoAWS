{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Group = void 0;\nvar inherits_1 = __importDefault(require(\"inherits\"));\nvar is_email_1 = __importDefault(require(\"./is-email\"));\nvar new_date_1 = __importDefault(require(\"new-date\"));\nvar facade_1 = require(\"./facade\");\nfunction Group(dictionary, opts) {\n  facade_1.Facade.call(this, dictionary, opts);\n}\nexports.Group = Group;\ninherits_1.default(Group, facade_1.Facade);\nvar g = Group.prototype;\ng.action = function () {\n  return \"group\";\n};\ng.type = g.action;\ng.groupId = facade_1.Facade.field(\"groupId\");\ng.created = function () {\n  var created = this.proxy(\"traits.createdAt\") || this.proxy(\"traits.created\") || this.proxy(\"properties.createdAt\") || this.proxy(\"properties.created\");\n  if (created) return new_date_1.default(created);\n};\ng.email = function () {\n  var email = this.proxy(\"traits.email\");\n  if (email) return email;\n  var groupId = this.groupId();\n  if (is_email_1.default(groupId)) return groupId;\n};\ng.traits = function (aliases) {\n  var ret = this.properties();\n  var id = this.groupId();\n  aliases = aliases || {};\n  if (id) ret.id = id;\n  for (var alias in aliases) {\n    if (Object.prototype.hasOwnProperty.call(aliases, alias)) {\n      var value = this[alias] == null ? this.proxy(\"traits.\" + alias) : this[alias]();\n      if (value == null) continue;\n      ret[aliases[alias]] = value;\n      delete ret[alias];\n    }\n  }\n  return ret;\n};\ng.name = facade_1.Facade.proxy(\"traits.name\");\ng.industry = facade_1.Facade.proxy(\"traits.industry\");\ng.employees = facade_1.Facade.proxy(\"traits.employees\");\ng.properties = function () {\n  return this.field(\"traits\") || this.field(\"properties\") || {};\n};","map":{"version":3,"names":["inherits_1","__importDefault","require","is_email_1","new_date_1","facade_1","Group","dictionary","opts","Facade","call","exports","default","g","prototype","action","type","groupId","field","created","proxy","email","traits","aliases","ret","properties","id","alias","Object","hasOwnProperty","value","name","industry","employees"],"sources":["/Users/bcaudillo/Desktop/Projects/todo/node_modules/@segment/facade/lib/group.js"],"sourcesContent":["\"use strict\";\n\nimport inherit from \"inherits\";\nimport isEmail from \"./is-email\";\nimport newDate from \"new-date\";\nimport { Facade } from \"./facade\";\n\n/**\n * Initialize a new `Group` facade with a `dictionary` of arguments.\n *\n * @param {Object} dictionary - The object to wrap.\n * @param {string} [dictionary.userId] - The user to add to the group.\n * @param {string} [dictionary.groupId] - The ID of the group.\n * @param {Object} [dictionary.traits] - The traits of the group.\n * @param {Object} opts - Options about what kind of Facade to create.\n *\n * @augments Facade\n */\nexport function Group(dictionary, opts) {\n  Facade.call(this, dictionary, opts);\n}\n\ninherit(Group, Facade);\n\nconst g = Group.prototype;\n\n/**\n * Return the type of facade this is. This will always return `\"group\"`.\n *\n * @return {string}\n */\ng.action = function () {\n  return \"group\";\n};\n\n/**\n * An alias for {@link Group#action}.\n *\n * @function\n * @return {string}\n */\ng.type = g.action;\n\n/**\n * Get the group ID from `groupId`.\n *\n * This *should* be a string, but may not be if the client isn't adhering to\n * the spec.\n *\n * @return {string}\n */\ng.groupId = Facade.field(\"groupId\");\n\n/**\n * Get the time of creation of the group from `traits.createdAt`,\n * `traits.created`, `properties.createdAt`, or `properties.created`.\n *\n * @return {Date}\n */\ng.created = function () {\n  var created =\n    this.proxy(\"traits.createdAt\") ||\n    this.proxy(\"traits.created\") ||\n    this.proxy(\"properties.createdAt\") ||\n    this.proxy(\"properties.created\");\n\n  if (created) return newDate(created);\n};\n\n/**\n * Get the group's email from `traits.email`, falling back to `groupId` only if\n * it looks like a valid email.\n *\n * @return {string}\n */\ng.email = function () {\n  var email = this.proxy(\"traits.email\");\n  if (email) return email;\n  var groupId = this.groupId();\n  if (isEmail(groupId)) return groupId;\n};\n\n/**\n * Get the group's traits. This is identical to how {@link Facade#traits}\n * works, except it looks at `traits.*` instead of `options.traits.*`.\n *\n * Traits are gotten from `traits`, augmented with a property `id` with\n * the event's `groupId`.\n *\n * The parameter `aliases` is meant to transform keys in `traits` into new\n * keys. Each alias like `{ \"xxx\": \"yyy\" }` will take whatever is at `xxx` in\n * the traits, and move it to `yyy`. If `xxx` is a method of this facade, it'll\n * be called as a function instead of treated as a key into the traits.\n *\n * @example\n * var obj = { traits: { foo: \"bar\" }, anonymousId: \"xxx\" }\n * var group = new Group(obj)\n *\n * group.traits() // { \"foo\": \"bar\" }\n * group.traits({ \"foo\": \"asdf\" }) // { \"asdf\": \"bar\" }\n * group.traits({ \"sessionId\": \"rofl\" }) // { \"rofl\": \"xxx\" }\n *\n * @param {Object} aliases - A mapping from keys to the new keys they should be\n * transformed to.\n * @return {Object}\n */\ng.traits = function (aliases) {\n  var ret = this.properties();\n  var id = this.groupId();\n  aliases = aliases || {};\n\n  if (id) ret.id = id;\n\n  for (const alias in aliases) {\n    if (Object.prototype.hasOwnProperty.call(aliases, alias)) {\n      const value = this[alias] == null\n        ? this.proxy(\"traits.\" + alias)\n        : this[alias]();\n      if (value == null) continue;\n      ret[aliases[alias]] = value;\n      delete ret[alias];\n    }\n  }\n\n  return ret;\n};\n\n/**\n * Get the group's name from `traits.name`.\n *\n * This *should* be a string, but may not be if the client isn't adhering to\n * the spec.\n *\n * @function\n * @return {string}\n */\ng.name = Facade.proxy(\"traits.name\");\n\n/**\n * Get the group's industry from `traits.industry`.\n *\n * This *should* be a string, but may not be if the client isn't adhering to\n * the spec.\n *\n * @function\n * @return {string}\n */\ng.industry = Facade.proxy(\"traits.industry\");\n\n/**\n * Get the group's employee count from `traits.employees`.\n *\n * This *should* be a number, but may not be if the client isn't adhering to\n * the spec.\n *\n * @function\n * @return {number}\n */\ng.employees = Facade.proxy(\"traits.employees\");\n\n/**\n * Get the group's properties from `traits` or `properties`, falling back to\n * simply an empty object.\n *\n * @return {Object}\n */\ng.properties = function () {\n  // TODO remove this function\n  return this.field(\"traits\") || this.field(\"properties\") || {};\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}